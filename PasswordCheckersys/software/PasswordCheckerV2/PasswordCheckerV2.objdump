
PasswordCheckerV2.elf:     file format elf32-littlenios2
PasswordCheckerV2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00000990 memsz 0x00000990 flags r-x
    LOAD off    0x000019b0 vaddr 0x080009b0 paddr 0x08000a7c align 2**12
         filesz 0x000000cc memsz 0x000000cc flags rw-
    LOAD off    0x00001b48 vaddr 0x08000b48 paddr 0x08000b48 align 2**12
         filesz 0x00000000 memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08000020  08000020  00001a7c  2**0
                  CONTENTS
  2 .text         000008d8  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b8  080008f8  080008f8  000018f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000cc  080009b0  08000a7c  000019b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000028  08000b48  08000b48  00001b48  2**2
                  ALLOC, SMALL_DATA
  6 .TCM          00000000  00000000  00000000  00001a7c  2**0
                  CONTENTS
  7 .SDRAM        00000000  08000b70  08000b70  00001a7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002a0  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000029d7  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001102  00000000  00000000  00004717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001203  00000000  00000000  00005819  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000414  00000000  00000000  00006a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000cb0  00000000  00000000  00006e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000ae8  00000000  00000000  00007ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000085c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000138  00000000  00000000  000085f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00009bba  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00009bbd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00009bc2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00009bc3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00009bc8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00009bcc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00009bd0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00009bdb  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00009be6  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  00009bf1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  00009bf8  2**0
                  CONTENTS, READONLY
 30 .jdi          00003fec  00000000  00000000  00009c1a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a1e6c  00000000  00000000  0000dc06  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000020 l    d  .text	00000000 .text
080008f8 l    d  .rodata	00000000 .rodata
080009b0 l    d  .rwdata	00000000 .rwdata
08000b48 l    d  .bss	00000000 .bss
00000000 l    d  .TCM	00000000 .TCM
08000b70 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PasswordCheckerV2_bsp//obj/HAL/src/crt0.o
08000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080009dc l     O .rwdata	0000002c character_lcd_0
080009b0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08000778 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
0800032c g     F .text	0000002c alt_main
08000a7c g       *ABS*	00000000 __flash_rwdata_start
080005c8 g     F .text	0000000c alt_up_character_lcd_send_cmd
00000000 g       *ABS*	00000000 __alt_mem_TCM
0800006c g     F .text	00000004 keyInput
0800086c g     F .text	00000008 altera_nios2_gen2_irq_init
080005b4 g     F .text	00000014 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08000b5c g     O .bss	00000004 errno
08000b54 g     O .bss	00000004 alt_argv
08008a60 g       *ABS*	00000000 _gp
08000a08 g     O .rwdata	00000030 alt_fd_list
080007ec g     F .text	00000074 alt_find_dev
08000224 g     F .text	00000028 memcpy
08000634 g     F .text	00000020 alt_up_character_lcd_write_fd
08000b48 g     O .bss	00000001 numChars
08000874 g     F .text	00000038 alt_icache_flush
08000a64 g     O .rwdata	00000004 alt_max_fd
08000b70 g       *ABS*	00000000 __bss_end
08000a38 g     O .rwdata	00000028 alt_dev_null
08000750 g     F .text	00000010 alt_up_character_lcd_cursor_blink_on
08000760 g     F .text	00000018 alt_dcache_flush_all
08000a7c g       *ABS*	00000000 __ram_rwdata_end
08000a68 g     O .rwdata	00000008 alt_dev_list
080009b0 g       *ABS*	00000000 __ram_rodata_end
08000a60 g     O .rwdata	00000004 jtag_uart_0
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
08000b70 g       *ABS*	00000000 end
0ffffc00 g       *ABS*	00000000 __alt_stack_pointer
08000580 g     F .text	00000034 altera_avalon_jtag_uart_write
080005ec g     F .text	00000020 alt_up_character_lcd_write
08000358 g     F .text	00000170 alt_printf
08000020 g     F .text	0000004c _start
08000530 g     F .text	00000050 alt_sys_init
080006c4 g     F .text	00000038 alt_up_character_lcd_shift_display
08000b60 g     O .bss	00000010 buffer
080006fc g     F .text	00000044 alt_up_character_lcd_erase_pos
080009b0 g       *ABS*	00000000 __ram_rwdata_start
080008f8 g       *ABS*	00000000 __ram_rodata_start
080008ac g     F .text	00000030 memcmp
08000b70 g       *ABS*	00000000 __alt_stack_base
08000780 g     F .text	0000006c alt_dev_llist_insert
08000070 g     F .text	00000040 timerSetup
08000b48 g       *ABS*	00000000 __bss_start
08000124 g     F .text	00000100 main
08000b50 g     O .bss	00000004 alt_envp
0800068c g     F .text	00000038 alt_up_character_lcd_shift_cursor
08000a78 g     O .rwdata	00000004 alt_errno
080005e4 g     F .text	00000008 alt_up_character_lcd_open_dev
080005d4 g     F .text	00000010 alt_up_character_lcd_init
080008f8 g       *ABS*	00000000 __flash_rodata_start
08000510 g     F .text	00000020 alt_irq_init
08000740 g     F .text	00000010 alt_up_character_lcd_cursor_off
08000b58 g     O .bss	00000004 alt_argc
08000a70 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000b4c g     O .bss	00000004 bufferIndex
08000a7c g       *ABS*	00000000 _edata
08000b70 g       *ABS*	00000000 _end
080000dc g     F .text	00000048 initHexDisplays
08000020 g       *ABS*	00000000 __ram_exceptions_end
0ffffc00 g       *ABS*	00000000 __alt_data_end
0800060c g     F .text	00000028 alt_up_character_lcd_string
0800001c g       .entry	00000000 _exit
080008dc g     F .text	0000001c strlen
080004c8 g     F .text	00000048 alt_putchar
08000860 g     F .text	0000000c alt_icache_flush_all
08000654 g     F .text	00000038 alt_up_character_lcd_set_cursor_pos
080000b0 g     F .text	0000002c startDelay
0800024c g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000404>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08400814 	ori	at,at,32
    jmp r1
 8000018:	0800683a 	jmp	at

0800001c <_exit>:
 800001c:	00000000 	call	0 <__alt_mem_TCM>

Disassembly of section .text:

08000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800002c:	00bffd16 	blt	zero,r2,8000024 <__alt_data_end+0xf8000424>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000030:	06c3fff4 	movhi	sp,4095
    ori sp, sp, %lo(__alt_stack_pointer)
 8000034:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
 8000038:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800003c:	d6a29814 	ori	gp,gp,35424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000044:	1082d214 	ori	r2,r2,2888

    movhi r3, %hi(__bss_end)
 8000048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800004c:	18c2dc14 	ori	r3,r3,2928

    beq r2, r3, 1f
 8000050:	10c00326 	beq	r2,r3,8000060 <_start+0x40>

0:
    stw zero, (r2)
 8000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800005c:	10fffd36 	bltu	r2,r3,8000054 <__alt_data_end+0xf8000454>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000060:	800024c0 	call	800024c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000064:	800032c0 	call	800032c <alt_main>

08000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000068:	003fff06 	br	8000068 <__alt_data_end+0xf8000468>

0800006c <keyInput>:
	}
	return 0;
}

void keyInput()
{
 800006c:	f800283a 	ret

08000070 <timerSetup>:

}
//------------------------------------------------------------------//
void timerSetup(alt_u32 period)
{
 8000070:	00800074 	movhi	r2,1
 8000074:	1093e044 	addi	r2,r2,20353
 8000078:	1100012e 	bgeu	r2,r4,8000080 <timerSetup+0x10>
 800007c:	1009883a 	mov	r4,r2
	if(period > 85889)
	{
		period = 85889;
	}
	period *= 50000;//Convert from ms to cc
 8000080:	00b0d414 	movui	r2,50000
 8000084:	2089383a 	mul	r4,r4,r2

	//HIGH_RES_TIMER_BASE
	IOWR(HIGH_RES_TIMER_BASE, 1, 8);//Set stop on control bit of timer
 8000088:	00c00204 	movi	r3,8
 800008c:	00860104 	movi	r2,6148
 8000090:	10c00035 	stwio	r3,0(r2)

	alt_u16 periodIn = period & 0x0FFFF;
	IOWR(HIGH_RES_TIMER_BASE, 2, periodIn);//Set period low
 8000094:	20ffffcc 	andi	r3,r4,65535
 8000098:	00860204 	movi	r2,6152
 800009c:	10c00035 	stwio	r3,0(r2)

	periodIn = period >> 16;
	IOWR(HIGH_RES_TIMER_BASE, 3, periodIn);//Set period high
 80000a0:	2008d43a 	srli	r4,r4,16
 80000a4:	00860304 	movi	r2,6156
 80000a8:	11000035 	stwio	r4,0(r2)
 80000ac:	f800283a 	ret

080000b0 <startDelay>:
	return;
}
//------------------------------------------------------------------//
void startDelay()
{
	IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Set Start on control register
 80000b0:	00860104 	movi	r2,6148
 80000b4:	00c00104 	movi	r3,4
 80000b8:	10c00035 	stwio	r3,0(r2)
	alt_u8 status;
	do{
		status = IORD(HIGH_RES_TIMER_BASE, 0) & 1;
 80000bc:	00c60004 	movi	r3,6144
 80000c0:	18800037 	ldwio	r2,0(r3)
	}while(!status);
 80000c4:	1080004c 	andi	r2,r2,1
 80000c8:	103ffd26 	beq	r2,zero,80000c0 <__alt_data_end+0xf80004c0>
	IOWR(HIGH_RES_TIMER_BASE, 0, 1);//Reset Time out bit
 80000cc:	00c00044 	movi	r3,1
 80000d0:	00860004 	movi	r2,6144
 80000d4:	10c00035 	stwio	r3,0(r2)
 80000d8:	f800283a 	ret

080000dc <initHexDisplays>:
}
//------------------------------------------------------------------//
void initHexDisplays()
{
	//Clear all the displays
	IOWR(HEX_0_BASE, 0, 0xFF);
 80000dc:	00803fc4 	movi	r2,255
 80000e0:	00c63404 	movi	r3,6352
 80000e4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_1_BASE, 0, 0xFF);
 80000e8:	00c63004 	movi	r3,6336
 80000ec:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_2_BASE, 0, 0xFF);
 80000f0:	00c62c04 	movi	r3,6320
 80000f4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_3_BASE, 0, 0xFF);
 80000f8:	00c62804 	movi	r3,6304
 80000fc:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_4_BASE, 0, 0xFF);
 8000100:	00c62404 	movi	r3,6288
 8000104:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_5_BASE, 0, 0xFF);
 8000108:	00c62004 	movi	r3,6272
 800010c:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_6_BASE, 0, 0xFF);
 8000110:	00c61c04 	movi	r3,6256
 8000114:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_7_BASE, 0, 0xFF);
 8000118:	00c61804 	movi	r3,6240
 800011c:	18800035 	stwio	r2,0(r3)
 8000120:	f800283a 	ret

08000124 <main>:

int main()
{
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 8000124:	01020034 	movhi	r4,2048

void keyInput();
void printBuffer();

int main()
{
 8000128:	defff604 	addi	sp,sp,-40
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 800012c:	21023e04 	addi	r4,r4,2296

void keyInput();
void printBuffer();

int main()
{
 8000130:	dc000415 	stw	r16,16(sp)
 8000134:	dfc00915 	stw	ra,36(sp)
 8000138:	dd000815 	stw	r20,32(sp)
 800013c:	dcc00715 	stw	r19,28(sp)
 8000140:	dc800615 	stw	r18,24(sp)
 8000144:	dc400515 	stw	r17,20(sp)
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 8000148:	80005e40 	call	80005e4 <alt_up_character_lcd_open_dev>
 800014c:	1021883a 	mov	r16,r2

	if ( char_lcd_dev == NULL)
 8000150:	1000031e 	bne	r2,zero,8000160 <main+0x3c>
		alt_printf ("Error: could not open character LCD device\n");
 8000154:	01020034 	movhi	r4,2048
 8000158:	21024404 	addi	r4,r4,2320
 800015c:	00000206 	br	8000168 <main+0x44>
	else
		alt_printf ("Opened character LCD device\n");
 8000160:	01020034 	movhi	r4,2048
 8000164:	21024f04 	addi	r4,r4,2364
 8000168:	80003580 	call	8000358 <alt_printf>

	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
 800016c:	8009883a 	mov	r4,r16
 8000170:	80005d40 	call	80005d4 <alt_up_character_lcd_init>

	initHexDisplays();
 8000174:	80000dc0 	call	80000dc <initHexDisplays>
	timerSetup(200);//testing 1 second
 8000178:	01003204 	movi	r4,200
 800017c:	80000700 	call	8000070 <timerSetup>
	int i = 0;
	int k = 0;
	int state = 0;
 8000180:	0027883a 	mov	r19,zero
	alt_up_character_lcd_init (char_lcd_dev);

	initHexDisplays();
	timerSetup(200);//testing 1 second
	int i = 0;
	int k = 0;
 8000184:	0023883a 	mov	r17,zero
	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);

	initHexDisplays();
	timerSetup(200);//testing 1 second
	int i = 0;
 8000188:	0025883a 	mov	r18,zero
					++i;
					break;
			  case(1):
					/* Initialize the character display */
					alt_up_character_lcd_init (char_lcd_dev);
					if(k < 1024)
 800018c:	0500ffc4 	movi	r20,1023
	int state = 0;

	//main event loop
	while (1)
	{
		  startDelay();
 8000190:	80000b00 	call	80000b0 <startDelay>

		  if(state)
 8000194:	98001926 	beq	r19,zero,80001fc <main+0xd8>

		  switch(state)
		  {
			  case(0):
					/* Write "Welcome to" in the first row */
					alt_up_character_lcd_string(char_lcd_dev, "Welcome to");
 8000198:	01420034 	movhi	r5,2048
 800019c:	29425704 	addi	r5,r5,2396
 80001a0:	8009883a 	mov	r4,r16
 80001a4:	800060c0 	call	800060c <alt_up_character_lcd_string>

			  	  	/* Write "the DE2 board" in the second row */
					char second_row[] = "the DE2 board\0";
 80001a8:	01420034 	movhi	r5,2048
 80001ac:	018003c4 	movi	r6,15
 80001b0:	29425a04 	addi	r5,r5,2408
 80001b4:	d809883a 	mov	r4,sp
 80001b8:	80002240 	call	8000224 <memcpy>
					alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 80001bc:	01800044 	movi	r6,1
 80001c0:	000b883a 	mov	r5,zero
 80001c4:	8009883a 	mov	r4,r16
 80001c8:	80006540 	call	8000654 <alt_up_character_lcd_set_cursor_pos>
					alt_up_character_lcd_string(char_lcd_dev, second_row);
 80001cc:	d80b883a 	mov	r5,sp
 80001d0:	8009883a 	mov	r4,r16
 80001d4:	800060c0 	call	800060c <alt_up_character_lcd_string>

			  	  	if(i < 256)
 80001d8:	00803fc4 	movi	r2,255
 80001dc:	14800516 	blt	r2,r18,80001f4 <main+0xd0>
					  IOWR(LEDG_BASE, 0, i);
 80001e0:	00861404 	movi	r2,6224
 80001e4:	14800035 	stwio	r18,0(r2)
					else
					  i = 0;
					++i;
 80001e8:	94800044 	addi	r18,r18,1
	while (1)
	{
		  startDelay();

		  if(state)
			  state = 0;
 80001ec:	0027883a 	mov	r19,zero
			  	  	if(i < 256)
					  IOWR(LEDG_BASE, 0, i);
					else
					  i = 0;
					++i;
					break;
 80001f0:	003fe706 	br	8000190 <__alt_data_end+0xf8000590>
					alt_up_character_lcd_string(char_lcd_dev, second_row);

			  	  	if(i < 256)
					  IOWR(LEDG_BASE, 0, i);
					else
					  i = 0;
 80001f4:	0025883a 	mov	r18,zero
 80001f8:	003ffb06 	br	80001e8 <__alt_data_end+0xf80005e8>
					++i;
					break;
			  case(1):
					/* Initialize the character display */
					alt_up_character_lcd_init (char_lcd_dev);
 80001fc:	8009883a 	mov	r4,r16
 8000200:	80005d40 	call	80005d4 <alt_up_character_lcd_init>
					if(k < 1024)
 8000204:	a4400516 	blt	r20,r17,800021c <main+0xf8>
					  IOWR(LEDS_BASE, 0 , k);
 8000208:	00863804 	movi	r2,6368
 800020c:	14400035 	stwio	r17,0(r2)
					else
					  k = 0;
					++k;
 8000210:	8c400044 	addi	r17,r17,1
		  startDelay();

		  if(state)
			  state = 0;
		  else
			  state = 1;
 8000214:	04c00044 	movi	r19,1
					if(k < 1024)
					  IOWR(LEDS_BASE, 0 , k);
					else
					  k = 0;
					++k;
					break;
 8000218:	003fdd06 	br	8000190 <__alt_data_end+0xf8000590>
					/* Initialize the character display */
					alt_up_character_lcd_init (char_lcd_dev);
					if(k < 1024)
					  IOWR(LEDS_BASE, 0 , k);
					else
					  k = 0;
 800021c:	0023883a 	mov	r17,zero
 8000220:	003ffb06 	br	8000210 <__alt_data_end+0xf8000610>

08000224 <memcpy>:
 8000224:	2005883a 	mov	r2,r4
 8000228:	2007883a 	mov	r3,r4
 800022c:	218d883a 	add	r6,r4,r6
 8000230:	19800526 	beq	r3,r6,8000248 <memcpy+0x24>
 8000234:	29000003 	ldbu	r4,0(r5)
 8000238:	18c00044 	addi	r3,r3,1
 800023c:	29400044 	addi	r5,r5,1
 8000240:	193fffc5 	stb	r4,-1(r3)
 8000244:	003ffa06 	br	8000230 <__alt_data_end+0xf8000630>
 8000248:	f800283a 	ret

0800024c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800024c:	deffff04 	addi	sp,sp,-4
 8000250:	01020034 	movhi	r4,2048
 8000254:	01420034 	movhi	r5,2048
 8000258:	dfc00015 	stw	ra,0(sp)
 800025c:	21026c04 	addi	r4,r4,2480
 8000260:	29429f04 	addi	r5,r5,2684

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000264:	2140061e 	bne	r4,r5,8000280 <alt_load+0x34>
 8000268:	01020034 	movhi	r4,2048
 800026c:	01420034 	movhi	r5,2048
 8000270:	21000804 	addi	r4,r4,32
 8000274:	29400804 	addi	r5,r5,32
 8000278:	2140121e 	bne	r4,r5,80002c4 <alt_load+0x78>
 800027c:	00000b06 	br	80002ac <alt_load+0x60>
 8000280:	00c20034 	movhi	r3,2048
 8000284:	18c29f04 	addi	r3,r3,2684
 8000288:	1907c83a 	sub	r3,r3,r4
 800028c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000290:	10fff526 	beq	r2,r3,8000268 <__alt_data_end+0xf8000668>
    {
      *to++ = *from++;
 8000294:	114f883a 	add	r7,r2,r5
 8000298:	39c00017 	ldw	r7,0(r7)
 800029c:	110d883a 	add	r6,r2,r4
 80002a0:	10800104 	addi	r2,r2,4
 80002a4:	31c00015 	stw	r7,0(r6)
 80002a8:	003ff906 	br	8000290 <__alt_data_end+0xf8000690>
 80002ac:	01020034 	movhi	r4,2048
 80002b0:	01420034 	movhi	r5,2048
 80002b4:	21023e04 	addi	r4,r4,2296
 80002b8:	29423e04 	addi	r5,r5,2296

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80002bc:	2140101e 	bne	r4,r5,8000300 <alt_load+0xb4>
 80002c0:	00000b06 	br	80002f0 <alt_load+0xa4>
 80002c4:	00c20034 	movhi	r3,2048
 80002c8:	18c00804 	addi	r3,r3,32
 80002cc:	1907c83a 	sub	r3,r3,r4
 80002d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80002d4:	10fff526 	beq	r2,r3,80002ac <__alt_data_end+0xf80006ac>
    {
      *to++ = *from++;
 80002d8:	114f883a 	add	r7,r2,r5
 80002dc:	39c00017 	ldw	r7,0(r7)
 80002e0:	110d883a 	add	r6,r2,r4
 80002e4:	10800104 	addi	r2,r2,4
 80002e8:	31c00015 	stw	r7,0(r6)
 80002ec:	003ff906 	br	80002d4 <__alt_data_end+0xf80006d4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80002f0:	80007600 	call	8000760 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 80002f4:	dfc00017 	ldw	ra,0(sp)
 80002f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 80002fc:	80008601 	jmpi	8000860 <alt_icache_flush_all>
 8000300:	00c20034 	movhi	r3,2048
 8000304:	18c26c04 	addi	r3,r3,2480
 8000308:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800030c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000310:	18bff726 	beq	r3,r2,80002f0 <__alt_data_end+0xf80006f0>
    {
      *to++ = *from++;
 8000314:	114f883a 	add	r7,r2,r5
 8000318:	39c00017 	ldw	r7,0(r7)
 800031c:	110d883a 	add	r6,r2,r4
 8000320:	10800104 	addi	r2,r2,4
 8000324:	31c00015 	stw	r7,0(r6)
 8000328:	003ff906 	br	8000310 <__alt_data_end+0xf8000710>

0800032c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800032c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000330:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000334:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000338:	80005100 	call	8000510 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800033c:	80005300 	call	8000530 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000340:	d1a03c17 	ldw	r6,-32528(gp)
 8000344:	d1603d17 	ldw	r5,-32524(gp)
 8000348:	d1203e17 	ldw	r4,-32520(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 800034c:	dfc00017 	ldw	ra,0(sp)
 8000350:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000354:	80001241 	jmpi	8000124 <main>

08000358 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8000358:	defff204 	addi	sp,sp,-56
 800035c:	2005883a 	mov	r2,r4
 8000360:	dfc00a15 	stw	ra,40(sp)
 8000364:	df000915 	stw	fp,36(sp)
 8000368:	ddc00815 	stw	r23,32(sp)
 800036c:	dd800715 	stw	r22,28(sp)
 8000370:	dd400615 	stw	r21,24(sp)
 8000374:	dd000515 	stw	r20,20(sp)
 8000378:	dcc00415 	stw	r19,16(sp)
 800037c:	dc800315 	stw	r18,12(sp)
 8000380:	dc400215 	stw	r17,8(sp)
 8000384:	dc000115 	stw	r16,4(sp)
 8000388:	d9400b15 	stw	r5,44(sp)
 800038c:	d9800c15 	stw	r6,48(sp)
 8000390:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8000394:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 8000398:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 800039c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 80003a0:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 80003a4:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 80003a8:	11000007 	ldb	r4,0(r2)
 80003ac:	20003a26 	beq	r4,zero,8000498 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 80003b0:	24000226 	beq	r4,r16,80003bc <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 80003b4:	14400044 	addi	r17,r2,1
 80003b8:	00001406 	br	800040c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 80003bc:	14400084 	addi	r17,r2,2
 80003c0:	10800047 	ldb	r2,1(r2)
 80003c4:	10003426 	beq	r2,zero,8000498 <alt_printf+0x140>
            {
                if (c == '%')
 80003c8:	1400021e 	bne	r2,r16,80003d4 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 80003cc:	8009883a 	mov	r4,r16
 80003d0:	00000e06 	br	800040c <alt_printf+0xb4>
                } 
                else if (c == 'c')
 80003d4:	1480051e 	bne	r2,r18,80003ec <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 80003d8:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 80003dc:	ad800104 	addi	r22,r21,4
 80003e0:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 80003e4:	80004c80 	call	80004c8 <alt_putchar>
 80003e8:	00002906 	br	8000490 <alt_printf+0x138>
                }
                else if (c == 'x')
 80003ec:	14c0201e 	bne	r2,r19,8000470 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 80003f0:	adc00017 	ldw	r23,0(r21)
 80003f4:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 80003f8:	b8000326 	beq	r23,zero,8000408 <alt_printf+0xb0>
 80003fc:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8000400:	00c003c4 	movi	r3,15
 8000404:	00000306 	br	8000414 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 8000408:	01000c04 	movi	r4,48
 800040c:	80004c80 	call	80004c8 <alt_putchar>
                        continue;
 8000410:	00001f06 	br	8000490 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8000414:	1d84983a 	sll	r2,r3,r22
 8000418:	15c4703a 	and	r2,r2,r23
 800041c:	1000021e 	bne	r2,zero,8000428 <alt_printf+0xd0>
                        digit_shift -= 4;
 8000420:	b5bfff04 	addi	r22,r22,-4
 8000424:	003ffb06 	br	8000414 <__alt_data_end+0xf8000814>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8000428:	070003c4 	movi	fp,15
                        if (digit <= 9)
 800042c:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8000430:	b0001716 	blt	r22,zero,8000490 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8000434:	e588983a 	sll	r4,fp,r22
 8000438:	25c8703a 	and	r4,r4,r23
 800043c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 8000440:	19000236 	bltu	r3,r4,800044c <alt_printf+0xf4>
                            c = '0' + digit;
 8000444:	21000c04 	addi	r4,r4,48
 8000448:	00000106 	br	8000450 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 800044c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 8000450:	21003fcc 	andi	r4,r4,255
 8000454:	2100201c 	xori	r4,r4,128
 8000458:	213fe004 	addi	r4,r4,-128
 800045c:	d8c00015 	stw	r3,0(sp)
 8000460:	80004c80 	call	80004c8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8000464:	b5bfff04 	addi	r22,r22,-4
 8000468:	d8c00017 	ldw	r3,0(sp)
 800046c:	003ff006 	br	8000430 <__alt_data_end+0xf8000830>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8000470:	1500071e 	bne	r2,r20,8000490 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8000474:	ad800017 	ldw	r22,0(r21)
 8000478:	ad400104 	addi	r21,r21,4

                    while(*s)
 800047c:	b1000007 	ldb	r4,0(r22)
 8000480:	20000326 	beq	r4,zero,8000490 <alt_printf+0x138>
                      alt_putchar(*s++);
 8000484:	b5800044 	addi	r22,r22,1
 8000488:	80004c80 	call	80004c8 <alt_putchar>
 800048c:	003ffb06 	br	800047c <__alt_data_end+0xf800087c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 8000490:	8805883a 	mov	r2,r17
 8000494:	003fc406 	br	80003a8 <__alt_data_end+0xf80007a8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8000498:	dfc00a17 	ldw	ra,40(sp)
 800049c:	df000917 	ldw	fp,36(sp)
 80004a0:	ddc00817 	ldw	r23,32(sp)
 80004a4:	dd800717 	ldw	r22,28(sp)
 80004a8:	dd400617 	ldw	r21,24(sp)
 80004ac:	dd000517 	ldw	r20,20(sp)
 80004b0:	dcc00417 	ldw	r19,16(sp)
 80004b4:	dc800317 	ldw	r18,12(sp)
 80004b8:	dc400217 	ldw	r17,8(sp)
 80004bc:	dc000117 	ldw	r16,4(sp)
 80004c0:	dec00e04 	addi	sp,sp,56
 80004c4:	f800283a 	ret

080004c8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 80004c8:	defffd04 	addi	sp,sp,-12
 80004cc:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 80004d0:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 80004d4:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 80004d8:	01020034 	movhi	r4,2048
 80004dc:	000f883a 	mov	r7,zero
 80004e0:	01800044 	movi	r6,1
 80004e4:	d80b883a 	mov	r5,sp
 80004e8:	21029804 	addi	r4,r4,2656
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 80004ec:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 80004f0:	80005800 	call	8000580 <altera_avalon_jtag_uart_write>
 80004f4:	00ffffc4 	movi	r3,-1
 80004f8:	10c00126 	beq	r2,r3,8000500 <alt_putchar+0x38>
        return -1;
    }
    return c;
 80004fc:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 8000500:	dfc00217 	ldw	ra,8(sp)
 8000504:	dc000117 	ldw	r16,4(sp)
 8000508:	dec00304 	addi	sp,sp,12
 800050c:	f800283a 	ret

08000510 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000510:	deffff04 	addi	sp,sp,-4
 8000514:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MYCPU, myCPU);
 8000518:	800086c0 	call	800086c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800051c:	00800044 	movi	r2,1
 8000520:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000524:	dfc00017 	ldw	ra,0(sp)
 8000528:	dec00104 	addi	sp,sp,4
 800052c:	f800283a 	ret

08000530 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000530:	defffd04 	addi	sp,sp,-12
 8000534:	dc400115 	stw	r17,4(sp)
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, High_Res_Timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_CLOCK_TIMER, System_Clock_Timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysID);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8000538:	04420034 	movhi	r17,2048
 800053c:	8c427704 	addi	r17,r17,2524
 8000540:	8809883a 	mov	r4,r17
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000544:	dfc00215 	stw	ra,8(sp)
 8000548:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, High_Res_Timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_CLOCK_TIMER, System_Clock_Timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysID);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800054c:	80005d40 	call	80005d4 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8000550:	d4200204 	addi	r16,gp,-32760
 8000554:	800b883a 	mov	r5,r16
 8000558:	8809883a 	mov	r4,r17
 800055c:	80007800 	call	8000780 <alt_dev_llist_insert>
 8000560:	01020034 	movhi	r4,2048
 8000564:	800b883a 	mov	r5,r16
 8000568:	21026c04 	addi	r4,r4,2480
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
 800056c:	dfc00217 	ldw	ra,8(sp)
 8000570:	dc400117 	ldw	r17,4(sp)
 8000574:	dc000017 	ldw	r16,0(sp)
 8000578:	dec00304 	addi	sp,sp,12
 800057c:	80007801 	jmpi	8000780 <alt_dev_llist_insert>

08000580 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 8000580:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000584:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 8000588:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 800058c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8000590:	2980072e 	bgeu	r5,r6,80005b0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8000594:	38c00037 	ldwio	r3,0(r7)
 8000598:	18ffffec 	andhi	r3,r3,65535
 800059c:	183ffc26 	beq	r3,zero,8000590 <__alt_data_end+0xf8000990>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80005a0:	28c00007 	ldb	r3,0(r5)
 80005a4:	20c00035 	stwio	r3,0(r4)
 80005a8:	29400044 	addi	r5,r5,1
 80005ac:	003ff806 	br	8000590 <__alt_data_end+0xf8000990>

  return count;
}
 80005b0:	f800283a 	ret

080005b4 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 80005b4:	28000126 	beq	r5,zero,80005bc <get_DDRAM_addr+0x8>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 80005b8:	21001014 	ori	r4,r4,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
 80005bc:	00bfe004 	movi	r2,-128
 80005c0:	1104b03a 	or	r2,r2,r4
 80005c4:	f800283a 	ret

080005c8 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80005c8:	20800a17 	ldw	r2,40(r4)
 80005cc:	11400025 	stbio	r5,0(r2)
 80005d0:	f800283a 	ret

080005d4 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80005d4:	20800a17 	ldw	r2,40(r4)
 80005d8:	00c00044 	movi	r3,1
 80005dc:	10c00025 	stbio	r3,0(r2)
 80005e0:	f800283a 	ret

080005e4 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 80005e4:	d1600204 	addi	r5,gp,-32760
 80005e8:	80007ec1 	jmpi	80007ec <alt_find_dev>

080005ec <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 80005ec:	298d883a 	add	r6,r5,r6
	unsigned int i;
	for (i = 0; i < len; i++)
 80005f0:	29800526 	beq	r5,r6,8000608 <alt_up_character_lcd_write+0x1c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 80005f4:	20800a17 	ldw	r2,40(r4)
 80005f8:	28c00007 	ldb	r3,0(r5)
 80005fc:	10c00065 	stbio	r3,1(r2)
 8000600:	29400044 	addi	r5,r5,1
 8000604:	003ffa06 	br	80005f0 <__alt_data_end+0xf80009f0>
	}
}
 8000608:	f800283a 	ret

0800060c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800060c:	28800003 	ldbu	r2,0(r5)
 8000610:	10c03fcc 	andi	r3,r2,255
 8000614:	18c0201c 	xori	r3,r3,128
 8000618:	18ffe004 	addi	r3,r3,-128
 800061c:	18000426 	beq	r3,zero,8000630 <alt_up_character_lcd_string+0x24>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8000620:	20c00a17 	ldw	r3,40(r4)
 8000624:	18800065 	stbio	r2,1(r3)
		++ptr;
 8000628:	29400044 	addi	r5,r5,1
 800062c:	003ff706 	br	800060c <__alt_data_end+0xf8000a0c>
	}
}
 8000630:	f800283a 	ret

08000634 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8000634:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8000638:	deffff04 	addi	sp,sp,-4
 800063c:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8000640:	80005ec0 	call	80005ec <alt_up_character_lcd_write>
	return 0;
}
 8000644:	0005883a 	mov	r2,zero
 8000648:	dfc00017 	ldw	ra,0(sp)
 800064c:	dec00104 	addi	sp,sp,4
 8000650:	f800283a 	ret

08000654 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8000654:	008009c4 	movi	r2,39
 8000658:	11400a36 	bltu	r2,r5,8000684 <alt_up_character_lcd_set_cursor_pos+0x30>
 800065c:	00800044 	movi	r2,1
 8000660:	11800836 	bltu	r2,r6,8000684 <alt_up_character_lcd_set_cursor_pos+0x30>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 8000664:	30000126 	beq	r6,zero,800066c <alt_up_character_lcd_set_cursor_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 8000668:	29401014 	ori	r5,r5,64
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800066c:	00bfe004 	movi	r2,-128
 8000670:	288ab03a 	or	r5,r5,r2
 8000674:	20800a17 	ldw	r2,40(r4)
 8000678:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
 800067c:	0005883a 	mov	r2,zero
 8000680:	f800283a 	ret
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
		// invalid argument
		return -1;
 8000684:	00bfffc4 	movi	r2,-1
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}
 8000688:	f800283a 	ret

0800068c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
 800068c:	28000c26 	beq	r5,zero,80006c0 <alt_up_character_lcd_shift_cursor+0x34>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8000690:	01400216 	blt	zero,r5,800069c <alt_up_character_lcd_shift_cursor+0x10>
 8000694:	00800404 	movi	r2,16
 8000698:	00000106 	br	80006a0 <alt_up_character_lcd_shift_cursor+0x14>
 800069c:	00800504 	movi	r2,20
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80006a0:	2800010e 	bge	r5,zero,80006a8 <alt_up_character_lcd_shift_cursor+0x1c>
 80006a4:	014bc83a 	sub	r5,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80006a8:	28c03fcc 	andi	r3,r5,255
 80006ac:	18000426 	beq	r3,zero,80006c0 <alt_up_character_lcd_shift_cursor+0x34>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80006b0:	20c00a17 	ldw	r3,40(r4)
 80006b4:	18800025 	stbio	r2,0(r3)
 80006b8:	297fffc4 	addi	r5,r5,-1
 80006bc:	003ffa06 	br	80006a8 <__alt_data_end+0xf8000aa8>
 80006c0:	f800283a 	ret

080006c4 <alt_up_character_lcd_shift_display>:
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
 80006c4:	28000c26 	beq	r5,zero,80006f8 <alt_up_character_lcd_shift_display+0x34>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80006c8:	01400216 	blt	zero,r5,80006d4 <alt_up_character_lcd_shift_display+0x10>
 80006cc:	00800604 	movi	r2,24
 80006d0:	00000106 	br	80006d8 <alt_up_character_lcd_shift_display+0x14>
 80006d4:	00800704 	movi	r2,28
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80006d8:	2800010e 	bge	r5,zero,80006e0 <alt_up_character_lcd_shift_display+0x1c>
 80006dc:	014bc83a 	sub	r5,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80006e0:	28c03fcc 	andi	r3,r5,255
 80006e4:	18000426 	beq	r3,zero,80006f8 <alt_up_character_lcd_shift_display+0x34>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80006e8:	20c00a17 	ldw	r3,40(r4)
 80006ec:	18800025 	stbio	r2,0(r3)
 80006f0:	297fffc4 	addi	r5,r5,-1
 80006f4:	003ffa06 	br	80006e0 <__alt_data_end+0xf8000ae0>
 80006f8:	f800283a 	ret

080006fc <alt_up_character_lcd_erase_pos>:
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 80006fc:	008009c4 	movi	r2,39
 8000700:	11400d36 	bltu	r2,r5,8000738 <alt_up_character_lcd_erase_pos+0x3c>
 8000704:	00800044 	movi	r2,1
 8000708:	11800b36 	bltu	r2,r6,8000738 <alt_up_character_lcd_erase_pos+0x3c>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 800070c:	30000126 	beq	r6,zero,8000714 <alt_up_character_lcd_erase_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 8000710:	29401014 	ori	r5,r5,64
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8000714:	00bfe004 	movi	r2,-128
 8000718:	288ab03a 	or	r5,r5,r2
 800071c:	20800a17 	ldw	r2,40(r4)
 8000720:	11400025 	stbio	r5,0(r2)
	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8000724:	20800a17 	ldw	r2,40(r4)
 8000728:	00c00084 	movi	r3,2
 800072c:	10c00065 	stbio	r3,1(r2)
	return 0;
 8000730:	0005883a 	mov	r2,zero
 8000734:	f800283a 	ret

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
		return -1;
 8000738:	00bfffc4 	movi	r2,-1
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}
 800073c:	f800283a 	ret

08000740 <alt_up_character_lcd_cursor_off>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8000740:	20800a17 	ldw	r2,40(r4)
 8000744:	00c00304 	movi	r3,12
 8000748:	10c00025 	stbio	r3,0(r2)
 800074c:	f800283a 	ret

08000750 <alt_up_character_lcd_cursor_blink_on>:
 8000750:	20800a17 	ldw	r2,40(r4)
 8000754:	00c003c4 	movi	r3,15
 8000758:	10c00025 	stbio	r3,0(r2)
 800075c:	f800283a 	ret

08000760 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8000760:	0005883a 	mov	r2,zero
 8000764:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8000768:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800076c:	10800804 	addi	r2,r2,32
 8000770:	10fffd1e 	bne	r2,r3,8000768 <__alt_data_end+0xf8000b68>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8000774:	f800283a 	ret

08000778 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 8000778:	3005883a 	mov	r2,r6
 800077c:	f800283a 	ret

08000780 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8000780:	20000226 	beq	r4,zero,800078c <alt_dev_llist_insert+0xc>
 8000784:	20800217 	ldw	r2,8(r4)
 8000788:	1000101e 	bne	r2,zero,80007cc <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 800078c:	d0a00617 	ldw	r2,-32744(gp)
 8000790:	10000926 	beq	r2,zero,80007b8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8000794:	deffff04 	addi	sp,sp,-4
 8000798:	dfc00015 	stw	ra,0(sp)
 800079c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 80007a0:	00c00584 	movi	r3,22
 80007a4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 80007a8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 80007ac:	dfc00017 	ldw	ra,0(sp)
 80007b0:	dec00104 	addi	sp,sp,4
 80007b4:	f800283a 	ret
 80007b8:	d0a03f04 	addi	r2,gp,-32516
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 80007bc:	00c00584 	movi	r3,22
 80007c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 80007c4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 80007c8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 80007cc:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80007d0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 80007d4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 80007d8:	28800017 	ldw	r2,0(r5)
 80007dc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 80007e0:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 80007e4:	0005883a 	mov	r2,zero
 80007e8:	f800283a 	ret

080007ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80007ec:	defffb04 	addi	sp,sp,-20
 80007f0:	dcc00315 	stw	r19,12(sp)
 80007f4:	dc800215 	stw	r18,8(sp)
 80007f8:	dc400115 	stw	r17,4(sp)
 80007fc:	dc000015 	stw	r16,0(sp)
 8000800:	dfc00415 	stw	ra,16(sp)
 8000804:	2027883a 	mov	r19,r4
 8000808:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 800080c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 8000810:	80008dc0 	call	80008dc <strlen>
 8000814:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8000818:	84400726 	beq	r16,r17,8000838 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800081c:	81000217 	ldw	r4,8(r16)
 8000820:	900d883a 	mov	r6,r18
 8000824:	980b883a 	mov	r5,r19
 8000828:	80008ac0 	call	80008ac <memcmp>
 800082c:	10000426 	beq	r2,zero,8000840 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 8000830:	84000017 	ldw	r16,0(r16)
 8000834:	003ff806 	br	8000818 <__alt_data_end+0xf8000c18>
  }
  
  /* No match found */
  
  return NULL;
 8000838:	0005883a 	mov	r2,zero
 800083c:	00000106 	br	8000844 <alt_find_dev+0x58>
 8000840:	8005883a 	mov	r2,r16
}
 8000844:	dfc00417 	ldw	ra,16(sp)
 8000848:	dcc00317 	ldw	r19,12(sp)
 800084c:	dc800217 	ldw	r18,8(sp)
 8000850:	dc400117 	ldw	r17,4(sp)
 8000854:	dc000017 	ldw	r16,0(sp)
 8000858:	dec00504 	addi	sp,sp,20
 800085c:	f800283a 	ret

08000860 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8000860:	01440004 	movi	r5,4096
 8000864:	0009883a 	mov	r4,zero
 8000868:	80008741 	jmpi	8000874 <alt_icache_flush>

0800086c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 800086c:	000170fa 	wrctl	ienable,zero
 8000870:	f800283a 	ret

08000874 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 8000874:	00840004 	movi	r2,4096
 8000878:	1140012e 	bgeu	r2,r5,8000880 <alt_icache_flush+0xc>
 800087c:	100b883a 	mov	r5,r2
 8000880:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8000884:	2005883a 	mov	r2,r4
 8000888:	1140032e 	bgeu	r2,r5,8000898 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800088c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8000890:	10800804 	addi	r2,r2,32
 8000894:	003ffc06 	br	8000888 <__alt_data_end+0xf8000c88>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8000898:	210007cc 	andi	r4,r4,31
 800089c:	20000126 	beq	r4,zero,80008a4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80008a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80008a4:	0000203a 	flushp
 80008a8:	f800283a 	ret

080008ac <memcmp>:
 80008ac:	218d883a 	add	r6,r4,r6
 80008b0:	21800826 	beq	r4,r6,80008d4 <memcmp+0x28>
 80008b4:	20800003 	ldbu	r2,0(r4)
 80008b8:	28c00003 	ldbu	r3,0(r5)
 80008bc:	10c00226 	beq	r2,r3,80008c8 <memcmp+0x1c>
 80008c0:	10c5c83a 	sub	r2,r2,r3
 80008c4:	f800283a 	ret
 80008c8:	21000044 	addi	r4,r4,1
 80008cc:	29400044 	addi	r5,r5,1
 80008d0:	003ff706 	br	80008b0 <__alt_data_end+0xf8000cb0>
 80008d4:	0005883a 	mov	r2,zero
 80008d8:	f800283a 	ret

080008dc <strlen>:
 80008dc:	2005883a 	mov	r2,r4
 80008e0:	10c00007 	ldb	r3,0(r2)
 80008e4:	18000226 	beq	r3,zero,80008f0 <strlen+0x14>
 80008e8:	10800044 	addi	r2,r2,1
 80008ec:	003ffc06 	br	80008e0 <__alt_data_end+0xf8000ce0>
 80008f0:	1105c83a 	sub	r2,r2,r4
 80008f4:	f800283a 	ret
