
PasswordCheckerV2.elf:     file format elf32-littlenios2
PasswordCheckerV2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00001570 memsz 0x00001570 flags r-x
    LOAD off    0x00002590 vaddr 0x08001590 paddr 0x08001744 align 2**12
         filesz 0x000001b4 memsz 0x000001b4 flags rw-
    LOAD off    0x000028f8 vaddr 0x080018f8 paddr 0x080018f8 align 2**12
         filesz 0x00000000 memsz 0x00000030 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08000020  08000020  00002744  2**0
                  CONTENTS
  2 .text         000013f8  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  08001418  08001418  00002418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001b4  08001590  08001744  00002590  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000030  080018f8  080018f8  000028f8  2**2
                  ALLOC, SMALL_DATA
  6 .TCM          00000000  00000000  00000000  00002744  2**0
                  CONTENTS
  7 .SDRAM        00000000  08001928  08001928  00002744  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000003b8  00000000  00000000  00002768  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000597c  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e74  00000000  00000000  0000849c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002160  00000000  00000000  0000a310  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000658  00000000  00000000  0000c470  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000014fe  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001c84  00000000  00000000  0000dfc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000fc4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002c0  00000000  00000000  0000fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001169e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000116a1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000116a6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000116a7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000116a8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000116ac  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000116b0  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000116b4  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000116bf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000116ca  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  000116d5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  000116dc  2**0
                  CONTENTS, READONLY
 30 .jdi          00003fec  00000000  00000000  000116fe  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a1e6c  00000000  00000000  000156ea  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000020 l    d  .text	00000000 .text
08001418 l    d  .rodata	00000000 .rodata
08001590 l    d  .rwdata	00000000 .rwdata
080018f8 l    d  .bss	00000000 .bss
00000000 l    d  .TCM	00000000 .TCM
08001928 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PasswordCheckerV2_bsp//obj/HAL/src/crt0.o
08000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080004b8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08001590 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800169c l     O .rwdata	0000002c character_lcd_0
08001670 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080012b4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
08000e08 g     F .text	0000002c alt_main
08000408 g     F .text	00000080 _puts_r
08001744 g       *ABS*	00000000 __flash_rwdata_start
08001104 g     F .text	0000000c alt_up_character_lcd_send_cmd
00000000 g       *ABS*	00000000 __alt_mem_TCM
080003bc g     F .text	0000004c printf
0800006c g     F .text	00000004 keyInput
080013a8 g     F .text	00000008 altera_nios2_gen2_irq_init
080010f0 g     F .text	00000014 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001908 g     O .bss	00000004 errno
08001910 g     O .bss	00000004 alt_argv
08009720 g       *ABS*	00000000 _gp
080016c8 g     O .rwdata	00000030 alt_fd_list
08001328 g     F .text	00000074 alt_find_dev
08000358 g     F .text	00000028 memcpy
08001170 g     F .text	00000020 alt_up_character_lcd_write_fd
08000488 g     F .text	00000014 puts
08001900 g     O .bss	00000001 numChars
08000380 g     F .text	0000003c _printf_r
08000c6c g     F .text	00000064 .hidden __udivsi3
080013b0 g     F .text	00000038 alt_icache_flush
080018f8 g     O .bss	00000004 k
0800172c g     O .rwdata	00000004 alt_max_fd
08001720 g     O .rwdata	00000004 _global_impure_ptr
08001928 g       *ABS*	00000000 __bss_end
080016f8 g     O .rwdata	00000028 alt_dev_null
0800128c g     F .text	00000010 alt_up_character_lcd_cursor_blink_on
0800129c g     F .text	00000018 alt_dcache_flush_all
08001744 g       *ABS*	00000000 __ram_rwdata_end
08001730 g     O .rwdata	00000008 alt_dev_list
08000fec g     F .text	00000060 write
08001590 g       *ABS*	00000000 __ram_rodata_end
08001728 g     O .rwdata	00000004 jtag_uart_0
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
08000cd0 g     F .text	00000058 .hidden __umodsi3
08001928 g       *ABS*	00000000 end
080018fc g     O .bss	00000004 i
0ffffc00 g       *ABS*	00000000 __alt_stack_pointer
080010bc g     F .text	00000034 altera_avalon_jtag_uart_write
08001128 g     F .text	00000020 alt_up_character_lcd_write
08000524 g     F .text	00000524 ___vfprintf_internal_r
08000e34 g     F .text	00000170 alt_printf
08000020 g     F .text	0000004c _start
08000124 g     F .text	000000fc scheduler
0800106c g     F .text	00000050 alt_sys_init
08001200 g     F .text	00000038 alt_up_character_lcd_shift_display
08001918 g     O .bss	00000010 buffer
08001238 g     F .text	00000044 alt_up_character_lcd_erase_pos
08001590 g       *ABS*	00000000 __ram_rwdata_start
08001418 g       *ABS*	00000000 __ram_rodata_start
080013e8 g     F .text	00000030 memcmp
08001928 g       *ABS*	00000000 __alt_stack_base
080012bc g     F .text	0000006c alt_dev_llist_insert
08000070 g     F .text	00000040 timerSetup
08000a64 g     F .text	000000b8 __sfvwrite_small_dev
080018f8 g       *ABS*	00000000 __bss_start
08000220 g     F .text	00000138 main
0800190c g     O .bss	00000004 alt_envp
080011c8 g     F .text	00000038 alt_up_character_lcd_shift_cursor
08001740 g     O .rwdata	00000004 alt_errno
08000b74 g     F .text	00000084 .hidden __divsi3
08001120 g     F .text	00000008 alt_up_character_lcd_open_dev
08001110 g     F .text	00000010 alt_up_character_lcd_init
08001418 g       *ABS*	00000000 __flash_rodata_start
0800104c g     F .text	00000020 alt_irq_init
0800127c g     F .text	00000010 alt_up_character_lcd_cursor_off
08000b1c g     F .text	00000058 _write_r
08001724 g     O .rwdata	00000004 _impure_ptr
08001914 g     O .bss	00000004 alt_argc
08001738 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08001904 g     O .bss	00000004 bufferIndex
08001744 g       *ABS*	00000000 _edata
08001928 g       *ABS*	00000000 _end
080000dc g     F .text	00000048 initHexDisplays
08000020 g       *ABS*	00000000 __ram_exceptions_end
08000bf8 g     F .text	00000074 .hidden __modsi3
0ffffc00 g       *ABS*	00000000 __alt_data_end
08001148 g     F .text	00000028 alt_up_character_lcd_string
0800001c g       .entry	00000000 _exit
0800049c g     F .text	0000001c strlen
08000fa4 g     F .text	00000048 alt_putchar
0800139c g     F .text	0000000c alt_icache_flush_all
08001190 g     F .text	00000038 alt_up_character_lcd_set_cursor_pos
08000a48 g     F .text	0000001c __vfprintf_internal
080000b0 g     F .text	0000002c startDelay
08000d28 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000404>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08400814 	ori	at,at,32
    jmp r1
 8000018:	0800683a 	jmp	at

0800001c <_exit>:
 800001c:	00000000 	call	0 <__alt_mem_TCM>

Disassembly of section .text:

08000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800002c:	00bffd16 	blt	zero,r2,8000024 <__alt_data_end+0xf8000424>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000030:	06c3fff4 	movhi	sp,4095
    ori sp, sp, %lo(__alt_stack_pointer)
 8000034:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
 8000038:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800003c:	d6a5c814 	ori	gp,gp,38688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000044:	10863e14 	ori	r2,r2,6392

    movhi r3, %hi(__bss_end)
 8000048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800004c:	18c64a14 	ori	r3,r3,6440

    beq r2, r3, 1f
 8000050:	10c00326 	beq	r2,r3,8000060 <_start+0x40>

0:
    stw zero, (r2)
 8000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800005c:	10fffd36 	bltu	r2,r3,8000054 <__alt_data_end+0xf8000454>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000060:	8000d280 	call	8000d28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000064:	8000e080 	call	8000e08 <alt_main>

08000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000068:	003fff06 	br	8000068 <__alt_data_end+0xf8000468>

0800006c <keyInput>:
	}
	return 0;
}

void keyInput()
{
 800006c:	f800283a 	ret

08000070 <timerSetup>:

}
//------------------------------------------------------------------//
void timerSetup(alt_u32 period)
{
 8000070:	00800074 	movhi	r2,1
 8000074:	1093e044 	addi	r2,r2,20353
 8000078:	1100012e 	bgeu	r2,r4,8000080 <timerSetup+0x10>
 800007c:	1009883a 	mov	r4,r2
	if(period > 85889)
	{
		period = 85889;
	}
	period *= 50000;//Convert from ms to cc
 8000080:	00b0d414 	movui	r2,50000
 8000084:	2089383a 	mul	r4,r4,r2

	//HIGH_RES_TIMER_BASE
	IOWR(HIGH_RES_TIMER_BASE, 1, 8);//Set stop on control bit of timer
 8000088:	00c00204 	movi	r3,8
 800008c:	00860104 	movi	r2,6148
 8000090:	10c00035 	stwio	r3,0(r2)

	alt_u16 periodIn = period & 0x0FFFF;
	IOWR(HIGH_RES_TIMER_BASE, 2, periodIn);//Set period low
 8000094:	20ffffcc 	andi	r3,r4,65535
 8000098:	00860204 	movi	r2,6152
 800009c:	10c00035 	stwio	r3,0(r2)

	periodIn = period >> 16;
	IOWR(HIGH_RES_TIMER_BASE, 3, periodIn);//Set period high
 80000a0:	2008d43a 	srli	r4,r4,16
 80000a4:	00860304 	movi	r2,6156
 80000a8:	11000035 	stwio	r4,0(r2)
 80000ac:	f800283a 	ret

080000b0 <startDelay>:
	return;
}
//------------------------------------------------------------------//
void startDelay()
{
	IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Set Start on control register
 80000b0:	00860104 	movi	r2,6148
 80000b4:	00c00104 	movi	r3,4
 80000b8:	10c00035 	stwio	r3,0(r2)
	alt_u8 status;
	do{
		status = IORD(HIGH_RES_TIMER_BASE, 0) & 1;
 80000bc:	00c60004 	movi	r3,6144
 80000c0:	18800037 	ldwio	r2,0(r3)
	}while(!status);
 80000c4:	1080004c 	andi	r2,r2,1
 80000c8:	103ffd26 	beq	r2,zero,80000c0 <__alt_data_end+0xf80004c0>
	IOWR(HIGH_RES_TIMER_BASE, 0, 1);//Reset Time out bit
 80000cc:	00c00044 	movi	r3,1
 80000d0:	00860004 	movi	r2,6144
 80000d4:	10c00035 	stwio	r3,0(r2)
 80000d8:	f800283a 	ret

080000dc <initHexDisplays>:
}
//------------------------------------------------------------------//
void initHexDisplays()
{
	//Clear all the displays
	IOWR(HEX_0_BASE, 0, 0xFF);
 80000dc:	00803fc4 	movi	r2,255
 80000e0:	00c63404 	movi	r3,6352
 80000e4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_1_BASE, 0, 0xFF);
 80000e8:	00c63004 	movi	r3,6336
 80000ec:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_2_BASE, 0, 0xFF);
 80000f0:	00c62c04 	movi	r3,6320
 80000f4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_3_BASE, 0, 0xFF);
 80000f8:	00c62804 	movi	r3,6304
 80000fc:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_4_BASE, 0, 0xFF);
 8000100:	00c62404 	movi	r3,6288
 8000104:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_5_BASE, 0, 0xFF);
 8000108:	00c62004 	movi	r3,6272
 800010c:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_6_BASE, 0, 0xFF);
 8000110:	00c61c04 	movi	r3,6256
 8000114:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_7_BASE, 0, 0xFF);
 8000118:	00c61804 	movi	r3,6240
 800011c:	18800035 	stwio	r2,0(r3)
 8000120:	f800283a 	ret

08000124 <scheduler>:
}
//------------------------------------------------------------------//
void scheduler(alt_u8 *state)
{
	if(IORD(HIGH_RES_TIMER_BASE, 0) & 1)
 8000124:	01460004 	movi	r5,6144
 8000128:	28800037 	ldwio	r2,0(r5)
 800012c:	1080004c 	andi	r2,r2,1
 8000130:	10003826 	beq	r2,zero,8000214 <scheduler+0xf0>
	IOWR(HEX_6_BASE, 0, 0xFF);
	IOWR(HEX_7_BASE, 0, 0xFF);
}
//------------------------------------------------------------------//
void scheduler(alt_u8 *state)
{
 8000134:	defffd04 	addi	sp,sp,-12
 8000138:	dfc00215 	stw	ra,8(sp)
 800013c:	dc400115 	stw	r17,4(sp)
 8000140:	dc000015 	stw	r16,0(sp)
	if(IORD(HIGH_RES_TIMER_BASE, 0) & 1)
	{
		if(*state <= NUM_STATES)
 8000144:	20800003 	ldbu	r2,0(r4)
 8000148:	01c00104 	movi	r7,4
 800014c:	00c00044 	movi	r3,1
 8000150:	11803fcc 	andi	r6,r2,255
 8000154:	39800336 	bltu	r7,r6,8000164 <scheduler+0x40>
		{
			*state += 1;//Go to next state
 8000158:	10c5883a 	add	r2,r2,r3
 800015c:	20800005 	stb	r2,0(r4)
 8000160:	00000106 	br	8000168 <scheduler+0x44>
			IOWR(HIGH_RES_TIMER_BASE, 0, 1);//Reset Time out bit
		}
		else
		{
			*state = 0;//Reset the state machine
 8000164:	20000005 	stb	zero,0(r4)
			IOWR(HIGH_RES_TIMER_BASE, 0, 1);//Reset Time out bit
 8000168:	28c00035 	stwio	r3,0(r5)
		}

		switch(*state)
 800016c:	20800003 	ldbu	r2,0(r4)
 8000170:	04400104 	movi	r17,4
 8000174:	04060104 	movi	r16,6148
 8000178:	10c01026 	beq	r2,r3,80001bc <scheduler+0x98>
 800017c:	10000926 	beq	r2,zero,80001a4 <scheduler+0x80>
 8000180:	01000084 	movi	r4,2
 8000184:	11001326 	beq	r2,r4,80001d4 <scheduler+0xb0>
 8000188:	00c000c4 	movi	r3,3
 800018c:	10c0171e 	bne	r2,r3,80001ec <scheduler+0xc8>
					timerSetup(10);//Timer set to 10ms
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
					printf("Polling User Input\n");
					break;
				case 3://Check valid input from user
					timerSetup(2);//Timer set to 2ms
 8000190:	80000700 	call	8000070 <timerSetup>
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
 8000194:	84400035 	stwio	r17,0(r16)
					printf("Checking Input for edge cases\n");
 8000198:	01020034 	movhi	r4,2048
 800019c:	21051504 	addi	r4,r4,5204
 80001a0:	00001706 	br	8000200 <scheduler+0xdc>
		}

		switch(*state)
			{
				case 0://Check if SD card is still inserted
					timerSetup(1);//Timer set to 1ms
 80001a4:	01000044 	movi	r4,1
 80001a8:	80000700 	call	8000070 <timerSetup>
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
 80001ac:	84400035 	stwio	r17,0(r16)
					printf("Checking SDCARD\n");
 80001b0:	01020034 	movhi	r4,2048
 80001b4:	21050604 	addi	r4,r4,5144
 80001b8:	00001106 	br	8000200 <scheduler+0xdc>
					break;
				case 1://display current cursor position and contents on screen
					timerSetup(1);//Timer set to 1ms
 80001bc:	1809883a 	mov	r4,r3
 80001c0:	80000700 	call	8000070 <timerSetup>
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
 80001c4:	84400035 	stwio	r17,0(r16)
					printf("Display Contents on LCD\n");
 80001c8:	01020034 	movhi	r4,2048
 80001cc:	21050a04 	addi	r4,r4,5160
 80001d0:	00000b06 	br	8000200 <scheduler+0xdc>
					break;
				case 2://Poll User input
					timerSetup(10);//Timer set to 10ms
 80001d4:	01000284 	movi	r4,10
 80001d8:	80000700 	call	8000070 <timerSetup>
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
 80001dc:	84400035 	stwio	r17,0(r16)
					printf("Polling User Input\n");
 80001e0:	01020034 	movhi	r4,2048
 80001e4:	21051004 	addi	r4,r4,5184
 80001e8:	00000506 	br	8000200 <scheduler+0xdc>
					timerSetup(2);//Timer set to 2ms
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
					printf("Checking Input for edge cases\n");
					break;
				default:
					timerSetup(50);//Timer set to 1s
 80001ec:	01000c84 	movi	r4,50
 80001f0:	80000700 	call	8000070 <timerSetup>
					IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start the timer in control register
 80001f4:	84400035 	stwio	r17,0(r16)
					printf("In Default for scheduler\n");
 80001f8:	01020034 	movhi	r4,2048
 80001fc:	21051d04 	addi	r4,r4,5236
	}
	else
	{
		printf("Normal Operation: No context switch.\n");
	}
}
 8000200:	dfc00217 	ldw	ra,8(sp)
 8000204:	dc400117 	ldw	r17,4(sp)
 8000208:	dc000017 	ldw	r16,0(sp)
 800020c:	dec00304 	addi	sp,sp,12
 8000210:	00000206 	br	800021c <scheduler+0xf8>
					printf("In Default for scheduler\n");
			}
	}
	else
	{
		printf("Normal Operation: No context switch.\n");
 8000214:	01020034 	movhi	r4,2048
 8000218:	21052404 	addi	r4,r4,5264
 800021c:	80004881 	jmpi	8000488 <puts>

08000220 <main>:

int main()
{
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 8000220:	01020034 	movhi	r4,2048

int i = 0;//For testing scheduler during development LEDR
int k = 0;//For testing scheduler during development LEDG

int main()
{
 8000224:	defffa04 	addi	sp,sp,-24
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 8000228:	21052e04 	addi	r4,r4,5304

int i = 0;//For testing scheduler during development LEDR
int k = 0;//For testing scheduler during development LEDG

int main()
{
 800022c:	dc000415 	stw	r16,16(sp)
 8000230:	dfc00515 	stw	ra,20(sp)
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 8000234:	80011200 	call	8001120 <alt_up_character_lcd_open_dev>
 8000238:	1021883a 	mov	r16,r2

	if ( char_lcd_dev == NULL)
 800023c:	1000031e 	bne	r2,zero,800024c <main+0x2c>
		alt_printf ("Error: could not open character LCD device\n");
 8000240:	01020034 	movhi	r4,2048
 8000244:	21053404 	addi	r4,r4,5328
 8000248:	00000206 	br	8000254 <main+0x34>
	else
		alt_printf ("Opened character LCD device\n");
 800024c:	01020034 	movhi	r4,2048
 8000250:	21053f04 	addi	r4,r4,5372
 8000254:	8000e340 	call	8000e34 <alt_printf>

	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
 8000258:	8009883a 	mov	r4,r16
 800025c:	80011100 	call	8001110 <alt_up_character_lcd_init>

	initHexDisplays();
 8000260:	80000dc0 	call	80000dc <initHexDisplays>
	timerSetup(2);//2ms
 8000264:	01000084 	movi	r4,2
 8000268:	80000700 	call	8000070 <timerSetup>
	IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Start timer
 800026c:	00860104 	movi	r2,6148
 8000270:	00c00104 	movi	r3,4
 8000274:	10c00035 	stwio	r3,0(r2)

	alt_u8 state = 0;
 8000278:	d80003c5 	stb	zero,15(sp)

	//main event loop
	while (1)
	{
		  printf("State: %i\n", state);
 800027c:	d94003c3 	ldbu	r5,15(sp)
 8000280:	01020034 	movhi	r4,2048
 8000284:	21054704 	addi	r4,r4,5404
 8000288:	80003bc0 	call	80003bc <printf>
		  scheduler(&state);
 800028c:	d90003c4 	addi	r4,sp,15
 8000290:	80001240 	call	8000124 <scheduler>

		  switch(state)
 8000294:	d88003c3 	ldbu	r2,15(sp)
 8000298:	10000326 	beq	r2,zero,80002a8 <main+0x88>
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c01e26 	beq	r2,r3,800031c <main+0xfc>
 80002a4:	00002806 	br	8000348 <main+0x128>
		  {
			  case(0):
					// Write "Welcome to" in the first row
					alt_up_character_lcd_init (char_lcd_dev);
 80002a8:	8009883a 	mov	r4,r16
 80002ac:	80011100 	call	8001110 <alt_up_character_lcd_init>
					alt_up_character_lcd_string(char_lcd_dev, "Welcome to");
 80002b0:	01420034 	movhi	r5,2048
 80002b4:	29454a04 	addi	r5,r5,5416
 80002b8:	8009883a 	mov	r4,r16
 80002bc:	80011480 	call	8001148 <alt_up_character_lcd_string>

			  	  	// Write "the DE2 board" in the second row
					char second_row[] = "the DE2 board\0";
 80002c0:	01420034 	movhi	r5,2048
 80002c4:	018003c4 	movi	r6,15
 80002c8:	29455104 	addi	r5,r5,5444
 80002cc:	d809883a 	mov	r4,sp
 80002d0:	80003580 	call	8000358 <memcpy>
					alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 80002d4:	01800044 	movi	r6,1
 80002d8:	000b883a 	mov	r5,zero
 80002dc:	8009883a 	mov	r4,r16
 80002e0:	80011900 	call	8001190 <alt_up_character_lcd_set_cursor_pos>
					alt_up_character_lcd_string(char_lcd_dev, second_row);
 80002e4:	d80b883a 	mov	r5,sp
 80002e8:	8009883a 	mov	r4,r16
 80002ec:	80011480 	call	8001148 <alt_up_character_lcd_string>

			  	  	if(i < 256)
 80002f0:	d0a07717 	ldw	r2,-32292(gp)
 80002f4:	00c03fc4 	movi	r3,255
 80002f8:	18800316 	blt	r3,r2,8000308 <main+0xe8>
					  IOWR(LEDG_BASE, 0, i);
 80002fc:	00c61404 	movi	r3,6224
 8000300:	18800035 	stwio	r2,0(r3)
 8000304:	00000106 	br	800030c <main+0xec>
					else
					  i = 0;
 8000308:	d0207715 	stw	zero,-32292(gp)
					++i;
 800030c:	d0a07717 	ldw	r2,-32292(gp)
 8000310:	10800044 	addi	r2,r2,1
 8000314:	d0a07715 	stw	r2,-32292(gp)
					break;
 8000318:	003fd806 	br	800027c <__alt_data_end+0xf800067c>
			  case(1):
					// Initialize the character display
					//alt_up_character_lcd_init (char_lcd_dev);
					if(k < 1024)
 800031c:	d0a07617 	ldw	r2,-32296(gp)
 8000320:	00c0ffc4 	movi	r3,1023
 8000324:	18800316 	blt	r3,r2,8000334 <main+0x114>
					  IOWR(LEDS_BASE, 0 , k);
 8000328:	00c63804 	movi	r3,6368
 800032c:	18800035 	stwio	r2,0(r3)
 8000330:	00000106 	br	8000338 <main+0x118>
					else
					  k = 0;
 8000334:	d0207615 	stw	zero,-32296(gp)
					++k;
 8000338:	d0a07617 	ldw	r2,-32296(gp)
 800033c:	10800044 	addi	r2,r2,1
 8000340:	d0a07615 	stw	r2,-32296(gp)
					break;
 8000344:	003fcd06 	br	800027c <__alt_data_end+0xf800067c>
			  default:
				  printf("In default case\n");
 8000348:	01020034 	movhi	r4,2048
 800034c:	21054d04 	addi	r4,r4,5428
 8000350:	80004880 	call	8000488 <puts>
 8000354:	003fc906 	br	800027c <__alt_data_end+0xf800067c>

08000358 <memcpy>:
 8000358:	2005883a 	mov	r2,r4
 800035c:	2007883a 	mov	r3,r4
 8000360:	218d883a 	add	r6,r4,r6
 8000364:	19800526 	beq	r3,r6,800037c <memcpy+0x24>
 8000368:	29000003 	ldbu	r4,0(r5)
 800036c:	18c00044 	addi	r3,r3,1
 8000370:	29400044 	addi	r5,r5,1
 8000374:	193fffc5 	stb	r4,-1(r3)
 8000378:	003ffa06 	br	8000364 <__alt_data_end+0xf8000764>
 800037c:	f800283a 	ret

08000380 <_printf_r>:
 8000380:	defffd04 	addi	sp,sp,-12
 8000384:	dfc00015 	stw	ra,0(sp)
 8000388:	d9800115 	stw	r6,4(sp)
 800038c:	d9c00215 	stw	r7,8(sp)
 8000390:	20c00217 	ldw	r3,8(r4)
 8000394:	01820034 	movhi	r6,2048
 8000398:	31829904 	addi	r6,r6,2660
 800039c:	19800115 	stw	r6,4(r3)
 80003a0:	280d883a 	mov	r6,r5
 80003a4:	21400217 	ldw	r5,8(r4)
 80003a8:	d9c00104 	addi	r7,sp,4
 80003ac:	80005240 	call	8000524 <___vfprintf_internal_r>
 80003b0:	dfc00017 	ldw	ra,0(sp)
 80003b4:	dec00304 	addi	sp,sp,12
 80003b8:	f800283a 	ret

080003bc <printf>:
 80003bc:	defffc04 	addi	sp,sp,-16
 80003c0:	dfc00015 	stw	ra,0(sp)
 80003c4:	d9400115 	stw	r5,4(sp)
 80003c8:	d9800215 	stw	r6,8(sp)
 80003cc:	d9c00315 	stw	r7,12(sp)
 80003d0:	00820034 	movhi	r2,2048
 80003d4:	1085c904 	addi	r2,r2,5924
 80003d8:	10800017 	ldw	r2,0(r2)
 80003dc:	01420034 	movhi	r5,2048
 80003e0:	29429904 	addi	r5,r5,2660
 80003e4:	10c00217 	ldw	r3,8(r2)
 80003e8:	d9800104 	addi	r6,sp,4
 80003ec:	19400115 	stw	r5,4(r3)
 80003f0:	200b883a 	mov	r5,r4
 80003f4:	11000217 	ldw	r4,8(r2)
 80003f8:	8000a480 	call	8000a48 <__vfprintf_internal>
 80003fc:	dfc00017 	ldw	ra,0(sp)
 8000400:	dec00404 	addi	sp,sp,16
 8000404:	f800283a 	ret

08000408 <_puts_r>:
 8000408:	defffd04 	addi	sp,sp,-12
 800040c:	dc000015 	stw	r16,0(sp)
 8000410:	2021883a 	mov	r16,r4
 8000414:	2809883a 	mov	r4,r5
 8000418:	dfc00215 	stw	ra,8(sp)
 800041c:	dc400115 	stw	r17,4(sp)
 8000420:	2823883a 	mov	r17,r5
 8000424:	800049c0 	call	800049c <strlen>
 8000428:	81400217 	ldw	r5,8(r16)
 800042c:	01020034 	movhi	r4,2048
 8000430:	21029904 	addi	r4,r4,2660
 8000434:	29000115 	stw	r4,4(r5)
 8000438:	100f883a 	mov	r7,r2
 800043c:	880d883a 	mov	r6,r17
 8000440:	8009883a 	mov	r4,r16
 8000444:	8000a640 	call	8000a64 <__sfvwrite_small_dev>
 8000448:	00ffffc4 	movi	r3,-1
 800044c:	10c00926 	beq	r2,r3,8000474 <_puts_r+0x6c>
 8000450:	81400217 	ldw	r5,8(r16)
 8000454:	01820034 	movhi	r6,2048
 8000458:	01c00044 	movi	r7,1
 800045c:	28800117 	ldw	r2,4(r5)
 8000460:	31855504 	addi	r6,r6,5460
 8000464:	8009883a 	mov	r4,r16
 8000468:	103ee83a 	callr	r2
 800046c:	10bfffe0 	cmpeqi	r2,r2,-1
 8000470:	0085c83a 	sub	r2,zero,r2
 8000474:	dfc00217 	ldw	ra,8(sp)
 8000478:	dc400117 	ldw	r17,4(sp)
 800047c:	dc000017 	ldw	r16,0(sp)
 8000480:	dec00304 	addi	sp,sp,12
 8000484:	f800283a 	ret

08000488 <puts>:
 8000488:	00820034 	movhi	r2,2048
 800048c:	1085c904 	addi	r2,r2,5924
 8000490:	200b883a 	mov	r5,r4
 8000494:	11000017 	ldw	r4,0(r2)
 8000498:	80004081 	jmpi	8000408 <_puts_r>

0800049c <strlen>:
 800049c:	2005883a 	mov	r2,r4
 80004a0:	10c00007 	ldb	r3,0(r2)
 80004a4:	18000226 	beq	r3,zero,80004b0 <strlen+0x14>
 80004a8:	10800044 	addi	r2,r2,1
 80004ac:	003ffc06 	br	80004a0 <__alt_data_end+0xf80008a0>
 80004b0:	1105c83a 	sub	r2,r2,r4
 80004b4:	f800283a 	ret

080004b8 <print_repeat>:
 80004b8:	defffb04 	addi	sp,sp,-20
 80004bc:	dc800315 	stw	r18,12(sp)
 80004c0:	dc400215 	stw	r17,8(sp)
 80004c4:	dc000115 	stw	r16,4(sp)
 80004c8:	dfc00415 	stw	ra,16(sp)
 80004cc:	2025883a 	mov	r18,r4
 80004d0:	2823883a 	mov	r17,r5
 80004d4:	d9800005 	stb	r6,0(sp)
 80004d8:	3821883a 	mov	r16,r7
 80004dc:	04000a0e 	bge	zero,r16,8000508 <print_repeat+0x50>
 80004e0:	88800117 	ldw	r2,4(r17)
 80004e4:	01c00044 	movi	r7,1
 80004e8:	d80d883a 	mov	r6,sp
 80004ec:	880b883a 	mov	r5,r17
 80004f0:	9009883a 	mov	r4,r18
 80004f4:	103ee83a 	callr	r2
 80004f8:	843fffc4 	addi	r16,r16,-1
 80004fc:	103ff726 	beq	r2,zero,80004dc <__alt_data_end+0xf80008dc>
 8000500:	00bfffc4 	movi	r2,-1
 8000504:	00000106 	br	800050c <print_repeat+0x54>
 8000508:	0005883a 	mov	r2,zero
 800050c:	dfc00417 	ldw	ra,16(sp)
 8000510:	dc800317 	ldw	r18,12(sp)
 8000514:	dc400217 	ldw	r17,8(sp)
 8000518:	dc000117 	ldw	r16,4(sp)
 800051c:	dec00504 	addi	sp,sp,20
 8000520:	f800283a 	ret

08000524 <___vfprintf_internal_r>:
 8000524:	deffe504 	addi	sp,sp,-108
 8000528:	d8c00804 	addi	r3,sp,32
 800052c:	df001915 	stw	fp,100(sp)
 8000530:	ddc01815 	stw	r23,96(sp)
 8000534:	dd801715 	stw	r22,92(sp)
 8000538:	dd401615 	stw	r21,88(sp)
 800053c:	dd001515 	stw	r20,84(sp)
 8000540:	dcc01415 	stw	r19,80(sp)
 8000544:	dc801315 	stw	r18,76(sp)
 8000548:	dc401215 	stw	r17,72(sp)
 800054c:	dc001115 	stw	r16,68(sp)
 8000550:	dfc01a15 	stw	ra,104(sp)
 8000554:	2027883a 	mov	r19,r4
 8000558:	2839883a 	mov	fp,r5
 800055c:	382d883a 	mov	r22,r7
 8000560:	d9800f15 	stw	r6,60(sp)
 8000564:	0021883a 	mov	r16,zero
 8000568:	d8000e15 	stw	zero,56(sp)
 800056c:	002f883a 	mov	r23,zero
 8000570:	002b883a 	mov	r21,zero
 8000574:	0025883a 	mov	r18,zero
 8000578:	0023883a 	mov	r17,zero
 800057c:	d8000c15 	stw	zero,48(sp)
 8000580:	d8000b15 	stw	zero,44(sp)
 8000584:	0029883a 	mov	r20,zero
 8000588:	d8c00915 	stw	r3,36(sp)
 800058c:	d8c00f17 	ldw	r3,60(sp)
 8000590:	19000003 	ldbu	r4,0(r3)
 8000594:	20803fcc 	andi	r2,r4,255
 8000598:	1080201c 	xori	r2,r2,128
 800059c:	10bfe004 	addi	r2,r2,-128
 80005a0:	10011c26 	beq	r2,zero,8000a14 <___vfprintf_internal_r+0x4f0>
 80005a4:	00c00044 	movi	r3,1
 80005a8:	a0c01426 	beq	r20,r3,80005fc <___vfprintf_internal_r+0xd8>
 80005ac:	1d000216 	blt	r3,r20,80005b8 <___vfprintf_internal_r+0x94>
 80005b0:	a0000626 	beq	r20,zero,80005cc <___vfprintf_internal_r+0xa8>
 80005b4:	00011306 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 80005b8:	01400084 	movi	r5,2
 80005bc:	a1401d26 	beq	r20,r5,8000634 <___vfprintf_internal_r+0x110>
 80005c0:	014000c4 	movi	r5,3
 80005c4:	a1402926 	beq	r20,r5,800066c <___vfprintf_internal_r+0x148>
 80005c8:	00010e06 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 80005cc:	01400944 	movi	r5,37
 80005d0:	1140fb26 	beq	r2,r5,80009c0 <___vfprintf_internal_r+0x49c>
 80005d4:	e0800117 	ldw	r2,4(fp)
 80005d8:	d9000005 	stb	r4,0(sp)
 80005dc:	01c00044 	movi	r7,1
 80005e0:	d80d883a 	mov	r6,sp
 80005e4:	e00b883a 	mov	r5,fp
 80005e8:	9809883a 	mov	r4,r19
 80005ec:	103ee83a 	callr	r2
 80005f0:	1000d61e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 80005f4:	84000044 	addi	r16,r16,1
 80005f8:	00010206 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 80005fc:	01400c04 	movi	r5,48
 8000600:	1140f826 	beq	r2,r5,80009e4 <___vfprintf_internal_r+0x4c0>
 8000604:	01400944 	movi	r5,37
 8000608:	11400a1e 	bne	r2,r5,8000634 <___vfprintf_internal_r+0x110>
 800060c:	d8800005 	stb	r2,0(sp)
 8000610:	e0800117 	ldw	r2,4(fp)
 8000614:	a00f883a 	mov	r7,r20
 8000618:	d80d883a 	mov	r6,sp
 800061c:	e00b883a 	mov	r5,fp
 8000620:	9809883a 	mov	r4,r19
 8000624:	103ee83a 	callr	r2
 8000628:	1000c81e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 800062c:	84000044 	addi	r16,r16,1
 8000630:	0000f306 	br	8000a00 <___vfprintf_internal_r+0x4dc>
 8000634:	217ff404 	addi	r5,r4,-48
 8000638:	29403fcc 	andi	r5,r5,255
 800063c:	00c00244 	movi	r3,9
 8000640:	19400736 	bltu	r3,r5,8000660 <___vfprintf_internal_r+0x13c>
 8000644:	00bfffc4 	movi	r2,-1
 8000648:	88800226 	beq	r17,r2,8000654 <___vfprintf_internal_r+0x130>
 800064c:	8c4002a4 	muli	r17,r17,10
 8000650:	00000106 	br	8000658 <___vfprintf_internal_r+0x134>
 8000654:	0023883a 	mov	r17,zero
 8000658:	2c63883a 	add	r17,r5,r17
 800065c:	0000e206 	br	80009e8 <___vfprintf_internal_r+0x4c4>
 8000660:	01400b84 	movi	r5,46
 8000664:	1140e426 	beq	r2,r5,80009f8 <___vfprintf_internal_r+0x4d4>
 8000668:	05000084 	movi	r20,2
 800066c:	213ff404 	addi	r4,r4,-48
 8000670:	21003fcc 	andi	r4,r4,255
 8000674:	00c00244 	movi	r3,9
 8000678:	19000736 	bltu	r3,r4,8000698 <___vfprintf_internal_r+0x174>
 800067c:	00bfffc4 	movi	r2,-1
 8000680:	90800226 	beq	r18,r2,800068c <___vfprintf_internal_r+0x168>
 8000684:	948002a4 	muli	r18,r18,10
 8000688:	00000106 	br	8000690 <___vfprintf_internal_r+0x16c>
 800068c:	0025883a 	mov	r18,zero
 8000690:	24a5883a 	add	r18,r4,r18
 8000694:	0000db06 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 8000698:	00c01b04 	movi	r3,108
 800069c:	10c0d426 	beq	r2,r3,80009f0 <___vfprintf_internal_r+0x4cc>
 80006a0:	013fffc4 	movi	r4,-1
 80006a4:	91000226 	beq	r18,r4,80006b0 <___vfprintf_internal_r+0x18c>
 80006a8:	d8000b15 	stw	zero,44(sp)
 80006ac:	00000106 	br	80006b4 <___vfprintf_internal_r+0x190>
 80006b0:	04800044 	movi	r18,1
 80006b4:	01001a44 	movi	r4,105
 80006b8:	11001626 	beq	r2,r4,8000714 <___vfprintf_internal_r+0x1f0>
 80006bc:	20800916 	blt	r4,r2,80006e4 <___vfprintf_internal_r+0x1c0>
 80006c0:	010018c4 	movi	r4,99
 80006c4:	11008a26 	beq	r2,r4,80008f0 <___vfprintf_internal_r+0x3cc>
 80006c8:	01001904 	movi	r4,100
 80006cc:	11001126 	beq	r2,r4,8000714 <___vfprintf_internal_r+0x1f0>
 80006d0:	01001604 	movi	r4,88
 80006d4:	1100ca1e 	bne	r2,r4,8000a00 <___vfprintf_internal_r+0x4dc>
 80006d8:	00c00044 	movi	r3,1
 80006dc:	d8c00e15 	stw	r3,56(sp)
 80006e0:	00001406 	br	8000734 <___vfprintf_internal_r+0x210>
 80006e4:	01001cc4 	movi	r4,115
 80006e8:	11009a26 	beq	r2,r4,8000954 <___vfprintf_internal_r+0x430>
 80006ec:	20800416 	blt	r4,r2,8000700 <___vfprintf_internal_r+0x1dc>
 80006f0:	01001bc4 	movi	r4,111
 80006f4:	1100c21e 	bne	r2,r4,8000a00 <___vfprintf_internal_r+0x4dc>
 80006f8:	05400204 	movi	r21,8
 80006fc:	00000e06 	br	8000738 <___vfprintf_internal_r+0x214>
 8000700:	01001d44 	movi	r4,117
 8000704:	11000c26 	beq	r2,r4,8000738 <___vfprintf_internal_r+0x214>
 8000708:	01001e04 	movi	r4,120
 800070c:	11000926 	beq	r2,r4,8000734 <___vfprintf_internal_r+0x210>
 8000710:	0000bb06 	br	8000a00 <___vfprintf_internal_r+0x4dc>
 8000714:	b5000104 	addi	r20,r22,4
 8000718:	b8000726 	beq	r23,zero,8000738 <___vfprintf_internal_r+0x214>
 800071c:	dd000d15 	stw	r20,52(sp)
 8000720:	b5800017 	ldw	r22,0(r22)
 8000724:	b000080e 	bge	r22,zero,8000748 <___vfprintf_internal_r+0x224>
 8000728:	05adc83a 	sub	r22,zero,r22
 800072c:	02800044 	movi	r10,1
 8000730:	00000606 	br	800074c <___vfprintf_internal_r+0x228>
 8000734:	05400404 	movi	r21,16
 8000738:	b0c00104 	addi	r3,r22,4
 800073c:	d8c00d15 	stw	r3,52(sp)
 8000740:	b5800017 	ldw	r22,0(r22)
 8000744:	002f883a 	mov	r23,zero
 8000748:	0015883a 	mov	r10,zero
 800074c:	d829883a 	mov	r20,sp
 8000750:	b0001426 	beq	r22,zero,80007a4 <___vfprintf_internal_r+0x280>
 8000754:	b009883a 	mov	r4,r22
 8000758:	a80b883a 	mov	r5,r21
 800075c:	da801015 	stw	r10,64(sp)
 8000760:	8000c6c0 	call	8000c6c <__udivsi3>
 8000764:	1549383a 	mul	r4,r2,r21
 8000768:	00c00244 	movi	r3,9
 800076c:	da801017 	ldw	r10,64(sp)
 8000770:	b12dc83a 	sub	r22,r22,r4
 8000774:	1d800216 	blt	r3,r22,8000780 <___vfprintf_internal_r+0x25c>
 8000778:	b5800c04 	addi	r22,r22,48
 800077c:	00000506 	br	8000794 <___vfprintf_internal_r+0x270>
 8000780:	d8c00e17 	ldw	r3,56(sp)
 8000784:	18000226 	beq	r3,zero,8000790 <___vfprintf_internal_r+0x26c>
 8000788:	b5800dc4 	addi	r22,r22,55
 800078c:	00000106 	br	8000794 <___vfprintf_internal_r+0x270>
 8000790:	b58015c4 	addi	r22,r22,87
 8000794:	a5800005 	stb	r22,0(r20)
 8000798:	a5000044 	addi	r20,r20,1
 800079c:	102d883a 	mov	r22,r2
 80007a0:	003feb06 	br	8000750 <__alt_data_end+0xf8000b50>
 80007a4:	a6c7c83a 	sub	r3,r20,sp
 80007a8:	d8c00a15 	stw	r3,40(sp)
 80007ac:	90c5c83a 	sub	r2,r18,r3
 80007b0:	00800a0e 	bge	zero,r2,80007dc <___vfprintf_internal_r+0x2b8>
 80007b4:	a085883a 	add	r2,r20,r2
 80007b8:	01400c04 	movi	r5,48
 80007bc:	d8c00917 	ldw	r3,36(sp)
 80007c0:	a009883a 	mov	r4,r20
 80007c4:	a0c0032e 	bgeu	r20,r3,80007d4 <___vfprintf_internal_r+0x2b0>
 80007c8:	a5000044 	addi	r20,r20,1
 80007cc:	21400005 	stb	r5,0(r4)
 80007d0:	a0bffa1e 	bne	r20,r2,80007bc <__alt_data_end+0xf8000bbc>
 80007d4:	a6c7c83a 	sub	r3,r20,sp
 80007d8:	d8c00a15 	stw	r3,40(sp)
 80007dc:	d8c00a17 	ldw	r3,40(sp)
 80007e0:	50d3883a 	add	r9,r10,r3
 80007e4:	d8c00b17 	ldw	r3,44(sp)
 80007e8:	8a6dc83a 	sub	r22,r17,r9
 80007ec:	18001726 	beq	r3,zero,800084c <___vfprintf_internal_r+0x328>
 80007f0:	50000a26 	beq	r10,zero,800081c <___vfprintf_internal_r+0x2f8>
 80007f4:	00800b44 	movi	r2,45
 80007f8:	d8800805 	stb	r2,32(sp)
 80007fc:	e0800117 	ldw	r2,4(fp)
 8000800:	01c00044 	movi	r7,1
 8000804:	d9800804 	addi	r6,sp,32
 8000808:	e00b883a 	mov	r5,fp
 800080c:	9809883a 	mov	r4,r19
 8000810:	103ee83a 	callr	r2
 8000814:	10004d1e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 8000818:	84000044 	addi	r16,r16,1
 800081c:	0580070e 	bge	zero,r22,800083c <___vfprintf_internal_r+0x318>
 8000820:	b00f883a 	mov	r7,r22
 8000824:	01800c04 	movi	r6,48
 8000828:	e00b883a 	mov	r5,fp
 800082c:	9809883a 	mov	r4,r19
 8000830:	80004b80 	call	80004b8 <print_repeat>
 8000834:	1000451e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 8000838:	85a1883a 	add	r16,r16,r22
 800083c:	d8c00a17 	ldw	r3,40(sp)
 8000840:	a013883a 	mov	r9,r20
 8000844:	1d2dc83a 	sub	r22,r3,r20
 8000848:	00002206 	br	80008d4 <___vfprintf_internal_r+0x3b0>
 800084c:	0580090e 	bge	zero,r22,8000874 <___vfprintf_internal_r+0x350>
 8000850:	b00f883a 	mov	r7,r22
 8000854:	01800804 	movi	r6,32
 8000858:	e00b883a 	mov	r5,fp
 800085c:	9809883a 	mov	r4,r19
 8000860:	da801015 	stw	r10,64(sp)
 8000864:	80004b80 	call	80004b8 <print_repeat>
 8000868:	da801017 	ldw	r10,64(sp)
 800086c:	1000371e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 8000870:	85a1883a 	add	r16,r16,r22
 8000874:	503ff126 	beq	r10,zero,800083c <__alt_data_end+0xf8000c3c>
 8000878:	00800b44 	movi	r2,45
 800087c:	d8800805 	stb	r2,32(sp)
 8000880:	e0800117 	ldw	r2,4(fp)
 8000884:	01c00044 	movi	r7,1
 8000888:	d9800804 	addi	r6,sp,32
 800088c:	e00b883a 	mov	r5,fp
 8000890:	9809883a 	mov	r4,r19
 8000894:	103ee83a 	callr	r2
 8000898:	10002c1e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 800089c:	84000044 	addi	r16,r16,1
 80008a0:	003fe606 	br	800083c <__alt_data_end+0xf8000c3c>
 80008a4:	4a7fffc4 	addi	r9,r9,-1
 80008a8:	48800003 	ldbu	r2,0(r9)
 80008ac:	01c00044 	movi	r7,1
 80008b0:	d9800804 	addi	r6,sp,32
 80008b4:	d8800805 	stb	r2,32(sp)
 80008b8:	e0800117 	ldw	r2,4(fp)
 80008bc:	e00b883a 	mov	r5,fp
 80008c0:	da401015 	stw	r9,64(sp)
 80008c4:	9809883a 	mov	r4,r19
 80008c8:	103ee83a 	callr	r2
 80008cc:	da401017 	ldw	r9,64(sp)
 80008d0:	10001e1e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 80008d4:	8245c83a 	sub	r2,r16,r9
 80008d8:	4d89883a 	add	r4,r9,r22
 80008dc:	a085883a 	add	r2,r20,r2
 80008e0:	013ff016 	blt	zero,r4,80008a4 <__alt_data_end+0xf8000ca4>
 80008e4:	1021883a 	mov	r16,r2
 80008e8:	dd800d17 	ldw	r22,52(sp)
 80008ec:	00004406 	br	8000a00 <___vfprintf_internal_r+0x4dc>
 80008f0:	00800044 	movi	r2,1
 80008f4:	1440080e 	bge	r2,r17,8000918 <___vfprintf_internal_r+0x3f4>
 80008f8:	8d3fffc4 	addi	r20,r17,-1
 80008fc:	a00f883a 	mov	r7,r20
 8000900:	01800804 	movi	r6,32
 8000904:	e00b883a 	mov	r5,fp
 8000908:	9809883a 	mov	r4,r19
 800090c:	80004b80 	call	80004b8 <print_repeat>
 8000910:	10000e1e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 8000914:	8521883a 	add	r16,r16,r20
 8000918:	b0800017 	ldw	r2,0(r22)
 800091c:	01c00044 	movi	r7,1
 8000920:	d80d883a 	mov	r6,sp
 8000924:	d8800005 	stb	r2,0(sp)
 8000928:	e0800117 	ldw	r2,4(fp)
 800092c:	e00b883a 	mov	r5,fp
 8000930:	9809883a 	mov	r4,r19
 8000934:	b5000104 	addi	r20,r22,4
 8000938:	103ee83a 	callr	r2
 800093c:	1000031e 	bne	r2,zero,800094c <___vfprintf_internal_r+0x428>
 8000940:	84000044 	addi	r16,r16,1
 8000944:	a02d883a 	mov	r22,r20
 8000948:	00002d06 	br	8000a00 <___vfprintf_internal_r+0x4dc>
 800094c:	00bfffc4 	movi	r2,-1
 8000950:	00003106 	br	8000a18 <___vfprintf_internal_r+0x4f4>
 8000954:	b5000017 	ldw	r20,0(r22)
 8000958:	b0c00104 	addi	r3,r22,4
 800095c:	d8c00a15 	stw	r3,40(sp)
 8000960:	a009883a 	mov	r4,r20
 8000964:	800049c0 	call	800049c <strlen>
 8000968:	8893c83a 	sub	r9,r17,r2
 800096c:	102d883a 	mov	r22,r2
 8000970:	0240090e 	bge	zero,r9,8000998 <___vfprintf_internal_r+0x474>
 8000974:	480f883a 	mov	r7,r9
 8000978:	01800804 	movi	r6,32
 800097c:	e00b883a 	mov	r5,fp
 8000980:	9809883a 	mov	r4,r19
 8000984:	da401015 	stw	r9,64(sp)
 8000988:	80004b80 	call	80004b8 <print_repeat>
 800098c:	da401017 	ldw	r9,64(sp)
 8000990:	103fee1e 	bne	r2,zero,800094c <__alt_data_end+0xf8000d4c>
 8000994:	8261883a 	add	r16,r16,r9
 8000998:	e0800117 	ldw	r2,4(fp)
 800099c:	b00f883a 	mov	r7,r22
 80009a0:	a00d883a 	mov	r6,r20
 80009a4:	e00b883a 	mov	r5,fp
 80009a8:	9809883a 	mov	r4,r19
 80009ac:	103ee83a 	callr	r2
 80009b0:	103fe61e 	bne	r2,zero,800094c <__alt_data_end+0xf8000d4c>
 80009b4:	85a1883a 	add	r16,r16,r22
 80009b8:	dd800a17 	ldw	r22,40(sp)
 80009bc:	00001006 	br	8000a00 <___vfprintf_internal_r+0x4dc>
 80009c0:	05c00044 	movi	r23,1
 80009c4:	04bfffc4 	movi	r18,-1
 80009c8:	d8000e15 	stw	zero,56(sp)
 80009cc:	05400284 	movi	r21,10
 80009d0:	9023883a 	mov	r17,r18
 80009d4:	d8000c15 	stw	zero,48(sp)
 80009d8:	d8000b15 	stw	zero,44(sp)
 80009dc:	b829883a 	mov	r20,r23
 80009e0:	00000806 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 80009e4:	dd000b15 	stw	r20,44(sp)
 80009e8:	05000084 	movi	r20,2
 80009ec:	00000506 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 80009f0:	00c00044 	movi	r3,1
 80009f4:	d8c00c15 	stw	r3,48(sp)
 80009f8:	050000c4 	movi	r20,3
 80009fc:	00000106 	br	8000a04 <___vfprintf_internal_r+0x4e0>
 8000a00:	0029883a 	mov	r20,zero
 8000a04:	d8c00f17 	ldw	r3,60(sp)
 8000a08:	18c00044 	addi	r3,r3,1
 8000a0c:	d8c00f15 	stw	r3,60(sp)
 8000a10:	003ede06 	br	800058c <__alt_data_end+0xf800098c>
 8000a14:	8005883a 	mov	r2,r16
 8000a18:	dfc01a17 	ldw	ra,104(sp)
 8000a1c:	df001917 	ldw	fp,100(sp)
 8000a20:	ddc01817 	ldw	r23,96(sp)
 8000a24:	dd801717 	ldw	r22,92(sp)
 8000a28:	dd401617 	ldw	r21,88(sp)
 8000a2c:	dd001517 	ldw	r20,84(sp)
 8000a30:	dcc01417 	ldw	r19,80(sp)
 8000a34:	dc801317 	ldw	r18,76(sp)
 8000a38:	dc401217 	ldw	r17,72(sp)
 8000a3c:	dc001117 	ldw	r16,68(sp)
 8000a40:	dec01b04 	addi	sp,sp,108
 8000a44:	f800283a 	ret

08000a48 <__vfprintf_internal>:
 8000a48:	00820034 	movhi	r2,2048
 8000a4c:	1085c904 	addi	r2,r2,5924
 8000a50:	300f883a 	mov	r7,r6
 8000a54:	280d883a 	mov	r6,r5
 8000a58:	200b883a 	mov	r5,r4
 8000a5c:	11000017 	ldw	r4,0(r2)
 8000a60:	80005241 	jmpi	8000524 <___vfprintf_internal_r>

08000a64 <__sfvwrite_small_dev>:
 8000a64:	2880000b 	ldhu	r2,0(r5)
 8000a68:	1080020c 	andi	r2,r2,8
 8000a6c:	10002126 	beq	r2,zero,8000af4 <__sfvwrite_small_dev+0x90>
 8000a70:	2880008f 	ldh	r2,2(r5)
 8000a74:	defffa04 	addi	sp,sp,-24
 8000a78:	dc000015 	stw	r16,0(sp)
 8000a7c:	dfc00515 	stw	ra,20(sp)
 8000a80:	dd000415 	stw	r20,16(sp)
 8000a84:	dcc00315 	stw	r19,12(sp)
 8000a88:	dc800215 	stw	r18,8(sp)
 8000a8c:	dc400115 	stw	r17,4(sp)
 8000a90:	2821883a 	mov	r16,r5
 8000a94:	10001216 	blt	r2,zero,8000ae0 <__sfvwrite_small_dev+0x7c>
 8000a98:	2027883a 	mov	r19,r4
 8000a9c:	3025883a 	mov	r18,r6
 8000aa0:	3823883a 	mov	r17,r7
 8000aa4:	05010004 	movi	r20,1024
 8000aa8:	04400b0e 	bge	zero,r17,8000ad8 <__sfvwrite_small_dev+0x74>
 8000aac:	880f883a 	mov	r7,r17
 8000ab0:	a440010e 	bge	r20,r17,8000ab8 <__sfvwrite_small_dev+0x54>
 8000ab4:	01c10004 	movi	r7,1024
 8000ab8:	8140008f 	ldh	r5,2(r16)
 8000abc:	900d883a 	mov	r6,r18
 8000ac0:	9809883a 	mov	r4,r19
 8000ac4:	8000b1c0 	call	8000b1c <_write_r>
 8000ac8:	0080050e 	bge	zero,r2,8000ae0 <__sfvwrite_small_dev+0x7c>
 8000acc:	88a3c83a 	sub	r17,r17,r2
 8000ad0:	90a5883a 	add	r18,r18,r2
 8000ad4:	003ff406 	br	8000aa8 <__alt_data_end+0xf8000ea8>
 8000ad8:	0005883a 	mov	r2,zero
 8000adc:	00000706 	br	8000afc <__sfvwrite_small_dev+0x98>
 8000ae0:	8080000b 	ldhu	r2,0(r16)
 8000ae4:	10801014 	ori	r2,r2,64
 8000ae8:	8080000d 	sth	r2,0(r16)
 8000aec:	00bfffc4 	movi	r2,-1
 8000af0:	00000206 	br	8000afc <__sfvwrite_small_dev+0x98>
 8000af4:	00bfffc4 	movi	r2,-1
 8000af8:	f800283a 	ret
 8000afc:	dfc00517 	ldw	ra,20(sp)
 8000b00:	dd000417 	ldw	r20,16(sp)
 8000b04:	dcc00317 	ldw	r19,12(sp)
 8000b08:	dc800217 	ldw	r18,8(sp)
 8000b0c:	dc400117 	ldw	r17,4(sp)
 8000b10:	dc000017 	ldw	r16,0(sp)
 8000b14:	dec00604 	addi	sp,sp,24
 8000b18:	f800283a 	ret

08000b1c <_write_r>:
 8000b1c:	defffd04 	addi	sp,sp,-12
 8000b20:	dc000015 	stw	r16,0(sp)
 8000b24:	04020034 	movhi	r16,2048
 8000b28:	dc400115 	stw	r17,4(sp)
 8000b2c:	84064204 	addi	r16,r16,6408
 8000b30:	2023883a 	mov	r17,r4
 8000b34:	2809883a 	mov	r4,r5
 8000b38:	300b883a 	mov	r5,r6
 8000b3c:	380d883a 	mov	r6,r7
 8000b40:	dfc00215 	stw	ra,8(sp)
 8000b44:	80000015 	stw	zero,0(r16)
 8000b48:	8000fec0 	call	8000fec <write>
 8000b4c:	00ffffc4 	movi	r3,-1
 8000b50:	10c0031e 	bne	r2,r3,8000b60 <_write_r+0x44>
 8000b54:	80c00017 	ldw	r3,0(r16)
 8000b58:	18000126 	beq	r3,zero,8000b60 <_write_r+0x44>
 8000b5c:	88c00015 	stw	r3,0(r17)
 8000b60:	dfc00217 	ldw	ra,8(sp)
 8000b64:	dc400117 	ldw	r17,4(sp)
 8000b68:	dc000017 	ldw	r16,0(sp)
 8000b6c:	dec00304 	addi	sp,sp,12
 8000b70:	f800283a 	ret

08000b74 <__divsi3>:
 8000b74:	20001b16 	blt	r4,zero,8000be4 <__divsi3+0x70>
 8000b78:	000f883a 	mov	r7,zero
 8000b7c:	28001616 	blt	r5,zero,8000bd8 <__divsi3+0x64>
 8000b80:	200d883a 	mov	r6,r4
 8000b84:	29001a2e 	bgeu	r5,r4,8000bf0 <__divsi3+0x7c>
 8000b88:	00800804 	movi	r2,32
 8000b8c:	00c00044 	movi	r3,1
 8000b90:	00000106 	br	8000b98 <__divsi3+0x24>
 8000b94:	10000d26 	beq	r2,zero,8000bcc <__divsi3+0x58>
 8000b98:	294b883a 	add	r5,r5,r5
 8000b9c:	10bfffc4 	addi	r2,r2,-1
 8000ba0:	18c7883a 	add	r3,r3,r3
 8000ba4:	293ffb36 	bltu	r5,r4,8000b94 <__alt_data_end+0xf8000f94>
 8000ba8:	0005883a 	mov	r2,zero
 8000bac:	18000726 	beq	r3,zero,8000bcc <__divsi3+0x58>
 8000bb0:	0005883a 	mov	r2,zero
 8000bb4:	31400236 	bltu	r6,r5,8000bc0 <__divsi3+0x4c>
 8000bb8:	314dc83a 	sub	r6,r6,r5
 8000bbc:	10c4b03a 	or	r2,r2,r3
 8000bc0:	1806d07a 	srli	r3,r3,1
 8000bc4:	280ad07a 	srli	r5,r5,1
 8000bc8:	183ffa1e 	bne	r3,zero,8000bb4 <__alt_data_end+0xf8000fb4>
 8000bcc:	38000126 	beq	r7,zero,8000bd4 <__divsi3+0x60>
 8000bd0:	0085c83a 	sub	r2,zero,r2
 8000bd4:	f800283a 	ret
 8000bd8:	014bc83a 	sub	r5,zero,r5
 8000bdc:	39c0005c 	xori	r7,r7,1
 8000be0:	003fe706 	br	8000b80 <__alt_data_end+0xf8000f80>
 8000be4:	0109c83a 	sub	r4,zero,r4
 8000be8:	01c00044 	movi	r7,1
 8000bec:	003fe306 	br	8000b7c <__alt_data_end+0xf8000f7c>
 8000bf0:	00c00044 	movi	r3,1
 8000bf4:	003fee06 	br	8000bb0 <__alt_data_end+0xf8000fb0>

08000bf8 <__modsi3>:
 8000bf8:	20001716 	blt	r4,zero,8000c58 <__modsi3+0x60>
 8000bfc:	000f883a 	mov	r7,zero
 8000c00:	2005883a 	mov	r2,r4
 8000c04:	28001216 	blt	r5,zero,8000c50 <__modsi3+0x58>
 8000c08:	2900162e 	bgeu	r5,r4,8000c64 <__modsi3+0x6c>
 8000c0c:	01800804 	movi	r6,32
 8000c10:	00c00044 	movi	r3,1
 8000c14:	00000106 	br	8000c1c <__modsi3+0x24>
 8000c18:	30000a26 	beq	r6,zero,8000c44 <__modsi3+0x4c>
 8000c1c:	294b883a 	add	r5,r5,r5
 8000c20:	31bfffc4 	addi	r6,r6,-1
 8000c24:	18c7883a 	add	r3,r3,r3
 8000c28:	293ffb36 	bltu	r5,r4,8000c18 <__alt_data_end+0xf8001018>
 8000c2c:	18000526 	beq	r3,zero,8000c44 <__modsi3+0x4c>
 8000c30:	1806d07a 	srli	r3,r3,1
 8000c34:	11400136 	bltu	r2,r5,8000c3c <__modsi3+0x44>
 8000c38:	1145c83a 	sub	r2,r2,r5
 8000c3c:	280ad07a 	srli	r5,r5,1
 8000c40:	183ffb1e 	bne	r3,zero,8000c30 <__alt_data_end+0xf8001030>
 8000c44:	38000126 	beq	r7,zero,8000c4c <__modsi3+0x54>
 8000c48:	0085c83a 	sub	r2,zero,r2
 8000c4c:	f800283a 	ret
 8000c50:	014bc83a 	sub	r5,zero,r5
 8000c54:	003fec06 	br	8000c08 <__alt_data_end+0xf8001008>
 8000c58:	0109c83a 	sub	r4,zero,r4
 8000c5c:	01c00044 	movi	r7,1
 8000c60:	003fe706 	br	8000c00 <__alt_data_end+0xf8001000>
 8000c64:	00c00044 	movi	r3,1
 8000c68:	003ff106 	br	8000c30 <__alt_data_end+0xf8001030>

08000c6c <__udivsi3>:
 8000c6c:	200d883a 	mov	r6,r4
 8000c70:	2900152e 	bgeu	r5,r4,8000cc8 <__udivsi3+0x5c>
 8000c74:	28001416 	blt	r5,zero,8000cc8 <__udivsi3+0x5c>
 8000c78:	00800804 	movi	r2,32
 8000c7c:	00c00044 	movi	r3,1
 8000c80:	00000206 	br	8000c8c <__udivsi3+0x20>
 8000c84:	10000e26 	beq	r2,zero,8000cc0 <__udivsi3+0x54>
 8000c88:	28000516 	blt	r5,zero,8000ca0 <__udivsi3+0x34>
 8000c8c:	294b883a 	add	r5,r5,r5
 8000c90:	10bfffc4 	addi	r2,r2,-1
 8000c94:	18c7883a 	add	r3,r3,r3
 8000c98:	293ffa36 	bltu	r5,r4,8000c84 <__alt_data_end+0xf8001084>
 8000c9c:	18000826 	beq	r3,zero,8000cc0 <__udivsi3+0x54>
 8000ca0:	0005883a 	mov	r2,zero
 8000ca4:	31400236 	bltu	r6,r5,8000cb0 <__udivsi3+0x44>
 8000ca8:	314dc83a 	sub	r6,r6,r5
 8000cac:	10c4b03a 	or	r2,r2,r3
 8000cb0:	1806d07a 	srli	r3,r3,1
 8000cb4:	280ad07a 	srli	r5,r5,1
 8000cb8:	183ffa1e 	bne	r3,zero,8000ca4 <__alt_data_end+0xf80010a4>
 8000cbc:	f800283a 	ret
 8000cc0:	0005883a 	mov	r2,zero
 8000cc4:	f800283a 	ret
 8000cc8:	00c00044 	movi	r3,1
 8000ccc:	003ff406 	br	8000ca0 <__alt_data_end+0xf80010a0>

08000cd0 <__umodsi3>:
 8000cd0:	2005883a 	mov	r2,r4
 8000cd4:	2900122e 	bgeu	r5,r4,8000d20 <__umodsi3+0x50>
 8000cd8:	28001116 	blt	r5,zero,8000d20 <__umodsi3+0x50>
 8000cdc:	01800804 	movi	r6,32
 8000ce0:	00c00044 	movi	r3,1
 8000ce4:	00000206 	br	8000cf0 <__umodsi3+0x20>
 8000ce8:	30000c26 	beq	r6,zero,8000d1c <__umodsi3+0x4c>
 8000cec:	28000516 	blt	r5,zero,8000d04 <__umodsi3+0x34>
 8000cf0:	294b883a 	add	r5,r5,r5
 8000cf4:	31bfffc4 	addi	r6,r6,-1
 8000cf8:	18c7883a 	add	r3,r3,r3
 8000cfc:	293ffa36 	bltu	r5,r4,8000ce8 <__alt_data_end+0xf80010e8>
 8000d00:	18000626 	beq	r3,zero,8000d1c <__umodsi3+0x4c>
 8000d04:	1806d07a 	srli	r3,r3,1
 8000d08:	11400136 	bltu	r2,r5,8000d10 <__umodsi3+0x40>
 8000d0c:	1145c83a 	sub	r2,r2,r5
 8000d10:	280ad07a 	srli	r5,r5,1
 8000d14:	183ffb1e 	bne	r3,zero,8000d04 <__alt_data_end+0xf8001104>
 8000d18:	f800283a 	ret
 8000d1c:	f800283a 	ret
 8000d20:	00c00044 	movi	r3,1
 8000d24:	003ff706 	br	8000d04 <__alt_data_end+0xf8001104>

08000d28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000d28:	deffff04 	addi	sp,sp,-4
 8000d2c:	01020034 	movhi	r4,2048
 8000d30:	01420034 	movhi	r5,2048
 8000d34:	dfc00015 	stw	ra,0(sp)
 8000d38:	21056404 	addi	r4,r4,5520
 8000d3c:	2945d104 	addi	r5,r5,5956

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000d40:	2140061e 	bne	r4,r5,8000d5c <alt_load+0x34>
 8000d44:	01020034 	movhi	r4,2048
 8000d48:	01420034 	movhi	r5,2048
 8000d4c:	21000804 	addi	r4,r4,32
 8000d50:	29400804 	addi	r5,r5,32
 8000d54:	2140121e 	bne	r4,r5,8000da0 <alt_load+0x78>
 8000d58:	00000b06 	br	8000d88 <alt_load+0x60>
 8000d5c:	00c20034 	movhi	r3,2048
 8000d60:	18c5d104 	addi	r3,r3,5956
 8000d64:	1907c83a 	sub	r3,r3,r4
 8000d68:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000d6c:	10fff526 	beq	r2,r3,8000d44 <__alt_data_end+0xf8001144>
    {
      *to++ = *from++;
 8000d70:	114f883a 	add	r7,r2,r5
 8000d74:	39c00017 	ldw	r7,0(r7)
 8000d78:	110d883a 	add	r6,r2,r4
 8000d7c:	10800104 	addi	r2,r2,4
 8000d80:	31c00015 	stw	r7,0(r6)
 8000d84:	003ff906 	br	8000d6c <__alt_data_end+0xf800116c>
 8000d88:	01020034 	movhi	r4,2048
 8000d8c:	01420034 	movhi	r5,2048
 8000d90:	21050604 	addi	r4,r4,5144
 8000d94:	29450604 	addi	r5,r5,5144

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000d98:	2140101e 	bne	r4,r5,8000ddc <alt_load+0xb4>
 8000d9c:	00000b06 	br	8000dcc <alt_load+0xa4>
 8000da0:	00c20034 	movhi	r3,2048
 8000da4:	18c00804 	addi	r3,r3,32
 8000da8:	1907c83a 	sub	r3,r3,r4
 8000dac:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000db0:	10fff526 	beq	r2,r3,8000d88 <__alt_data_end+0xf8001188>
    {
      *to++ = *from++;
 8000db4:	114f883a 	add	r7,r2,r5
 8000db8:	39c00017 	ldw	r7,0(r7)
 8000dbc:	110d883a 	add	r6,r2,r4
 8000dc0:	10800104 	addi	r2,r2,4
 8000dc4:	31c00015 	stw	r7,0(r6)
 8000dc8:	003ff906 	br	8000db0 <__alt_data_end+0xf80011b0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8000dcc:	800129c0 	call	800129c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8000dd0:	dfc00017 	ldw	ra,0(sp)
 8000dd4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 8000dd8:	800139c1 	jmpi	800139c <alt_icache_flush_all>
 8000ddc:	00c20034 	movhi	r3,2048
 8000de0:	18c56404 	addi	r3,r3,5520
 8000de4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000de8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000dec:	18bff726 	beq	r3,r2,8000dcc <__alt_data_end+0xf80011cc>
    {
      *to++ = *from++;
 8000df0:	114f883a 	add	r7,r2,r5
 8000df4:	39c00017 	ldw	r7,0(r7)
 8000df8:	110d883a 	add	r6,r2,r4
 8000dfc:	10800104 	addi	r2,r2,4
 8000e00:	31c00015 	stw	r7,0(r6)
 8000e04:	003ff906 	br	8000dec <__alt_data_end+0xf80011ec>

08000e08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000e08:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000e0c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000e10:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000e14:	800104c0 	call	800104c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000e18:	800106c0 	call	800106c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000e1c:	d1a07b17 	ldw	r6,-32276(gp)
 8000e20:	d1607c17 	ldw	r5,-32272(gp)
 8000e24:	d1207d17 	ldw	r4,-32268(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8000e28:	dfc00017 	ldw	ra,0(sp)
 8000e2c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000e30:	80002201 	jmpi	8000220 <main>

08000e34 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8000e34:	defff204 	addi	sp,sp,-56
 8000e38:	2005883a 	mov	r2,r4
 8000e3c:	dfc00a15 	stw	ra,40(sp)
 8000e40:	df000915 	stw	fp,36(sp)
 8000e44:	ddc00815 	stw	r23,32(sp)
 8000e48:	dd800715 	stw	r22,28(sp)
 8000e4c:	dd400615 	stw	r21,24(sp)
 8000e50:	dd000515 	stw	r20,20(sp)
 8000e54:	dcc00415 	stw	r19,16(sp)
 8000e58:	dc800315 	stw	r18,12(sp)
 8000e5c:	dc400215 	stw	r17,8(sp)
 8000e60:	dc000115 	stw	r16,4(sp)
 8000e64:	d9400b15 	stw	r5,44(sp)
 8000e68:	d9800c15 	stw	r6,48(sp)
 8000e6c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8000e70:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 8000e74:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 8000e78:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 8000e7c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8000e80:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8000e84:	11000007 	ldb	r4,0(r2)
 8000e88:	20003a26 	beq	r4,zero,8000f74 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8000e8c:	24000226 	beq	r4,r16,8000e98 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8000e90:	14400044 	addi	r17,r2,1
 8000e94:	00001406 	br	8000ee8 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8000e98:	14400084 	addi	r17,r2,2
 8000e9c:	10800047 	ldb	r2,1(r2)
 8000ea0:	10003426 	beq	r2,zero,8000f74 <alt_printf+0x140>
            {
                if (c == '%')
 8000ea4:	1400021e 	bne	r2,r16,8000eb0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8000ea8:	8009883a 	mov	r4,r16
 8000eac:	00000e06 	br	8000ee8 <alt_printf+0xb4>
                } 
                else if (c == 'c')
 8000eb0:	1480051e 	bne	r2,r18,8000ec8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 8000eb4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 8000eb8:	ad800104 	addi	r22,r21,4
 8000ebc:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 8000ec0:	8000fa40 	call	8000fa4 <alt_putchar>
 8000ec4:	00002906 	br	8000f6c <alt_printf+0x138>
                }
                else if (c == 'x')
 8000ec8:	14c0201e 	bne	r2,r19,8000f4c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8000ecc:	adc00017 	ldw	r23,0(r21)
 8000ed0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8000ed4:	b8000326 	beq	r23,zero,8000ee4 <alt_printf+0xb0>
 8000ed8:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8000edc:	00c003c4 	movi	r3,15
 8000ee0:	00000306 	br	8000ef0 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 8000ee4:	01000c04 	movi	r4,48
 8000ee8:	8000fa40 	call	8000fa4 <alt_putchar>
                        continue;
 8000eec:	00001f06 	br	8000f6c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8000ef0:	1d84983a 	sll	r2,r3,r22
 8000ef4:	15c4703a 	and	r2,r2,r23
 8000ef8:	1000021e 	bne	r2,zero,8000f04 <alt_printf+0xd0>
                        digit_shift -= 4;
 8000efc:	b5bfff04 	addi	r22,r22,-4
 8000f00:	003ffb06 	br	8000ef0 <__alt_data_end+0xf80012f0>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8000f04:	070003c4 	movi	fp,15
                        if (digit <= 9)
 8000f08:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8000f0c:	b0001716 	blt	r22,zero,8000f6c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8000f10:	e588983a 	sll	r4,fp,r22
 8000f14:	25c8703a 	and	r4,r4,r23
 8000f18:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 8000f1c:	19000236 	bltu	r3,r4,8000f28 <alt_printf+0xf4>
                            c = '0' + digit;
 8000f20:	21000c04 	addi	r4,r4,48
 8000f24:	00000106 	br	8000f2c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 8000f28:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 8000f2c:	21003fcc 	andi	r4,r4,255
 8000f30:	2100201c 	xori	r4,r4,128
 8000f34:	213fe004 	addi	r4,r4,-128
 8000f38:	d8c00015 	stw	r3,0(sp)
 8000f3c:	8000fa40 	call	8000fa4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8000f40:	b5bfff04 	addi	r22,r22,-4
 8000f44:	d8c00017 	ldw	r3,0(sp)
 8000f48:	003ff006 	br	8000f0c <__alt_data_end+0xf800130c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8000f4c:	1500071e 	bne	r2,r20,8000f6c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8000f50:	ad800017 	ldw	r22,0(r21)
 8000f54:	ad400104 	addi	r21,r21,4

                    while(*s)
 8000f58:	b1000007 	ldb	r4,0(r22)
 8000f5c:	20000326 	beq	r4,zero,8000f6c <alt_printf+0x138>
                      alt_putchar(*s++);
 8000f60:	b5800044 	addi	r22,r22,1
 8000f64:	8000fa40 	call	8000fa4 <alt_putchar>
 8000f68:	003ffb06 	br	8000f58 <__alt_data_end+0xf8001358>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 8000f6c:	8805883a 	mov	r2,r17
 8000f70:	003fc406 	br	8000e84 <__alt_data_end+0xf8001284>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8000f74:	dfc00a17 	ldw	ra,40(sp)
 8000f78:	df000917 	ldw	fp,36(sp)
 8000f7c:	ddc00817 	ldw	r23,32(sp)
 8000f80:	dd800717 	ldw	r22,28(sp)
 8000f84:	dd400617 	ldw	r21,24(sp)
 8000f88:	dd000517 	ldw	r20,20(sp)
 8000f8c:	dcc00417 	ldw	r19,16(sp)
 8000f90:	dc800317 	ldw	r18,12(sp)
 8000f94:	dc400217 	ldw	r17,8(sp)
 8000f98:	dc000117 	ldw	r16,4(sp)
 8000f9c:	dec00e04 	addi	sp,sp,56
 8000fa0:	f800283a 	ret

08000fa4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8000fa4:	defffd04 	addi	sp,sp,-12
 8000fa8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 8000fac:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8000fb0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 8000fb4:	01020034 	movhi	r4,2048
 8000fb8:	000f883a 	mov	r7,zero
 8000fbc:	01800044 	movi	r6,1
 8000fc0:	d80b883a 	mov	r5,sp
 8000fc4:	2105ca04 	addi	r4,r4,5928
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8000fc8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 8000fcc:	80010bc0 	call	80010bc <altera_avalon_jtag_uart_write>
 8000fd0:	00ffffc4 	movi	r3,-1
 8000fd4:	10c00126 	beq	r2,r3,8000fdc <alt_putchar+0x38>
        return -1;
    }
    return c;
 8000fd8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 8000fdc:	dfc00217 	ldw	ra,8(sp)
 8000fe0:	dc000117 	ldw	r16,4(sp)
 8000fe4:	dec00304 	addi	sp,sp,12
 8000fe8:	f800283a 	ret

08000fec <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 8000fec:	00800044 	movi	r2,1
 8000ff0:	20800226 	beq	r4,r2,8000ffc <write+0x10>
 8000ff4:	00800084 	movi	r2,2
 8000ff8:	2080041e 	bne	r4,r2,800100c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 8000ffc:	01020034 	movhi	r4,2048
 8001000:	000f883a 	mov	r7,zero
 8001004:	2105ca04 	addi	r4,r4,5928
 8001008:	80010bc1 	jmpi	80010bc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 800100c:	d0a00817 	ldw	r2,-32736(gp)
 8001010:	10000926 	beq	r2,zero,8001038 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8001014:	deffff04 	addi	sp,sp,-4
 8001018:	dfc00015 	stw	ra,0(sp)
 800101c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8001020:	00c01444 	movi	r3,81
 8001024:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8001028:	00bfffc4 	movi	r2,-1
 800102c:	dfc00017 	ldw	ra,0(sp)
 8001030:	dec00104 	addi	sp,sp,4
 8001034:	f800283a 	ret
 8001038:	d0a07a04 	addi	r2,gp,-32280
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 800103c:	00c01444 	movi	r3,81
 8001040:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8001044:	00bfffc4 	movi	r2,-1
 8001048:	f800283a 	ret

0800104c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800104c:	deffff04 	addi	sp,sp,-4
 8001050:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MYCPU, myCPU);
 8001054:	80013a80 	call	80013a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8001058:	00800044 	movi	r2,1
 800105c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8001060:	dfc00017 	ldw	ra,0(sp)
 8001064:	dec00104 	addi	sp,sp,4
 8001068:	f800283a 	ret

0800106c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800106c:	defffd04 	addi	sp,sp,-12
 8001070:	dc400115 	stw	r17,4(sp)
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, High_Res_Timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_CLOCK_TIMER, System_Clock_Timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysID);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8001074:	04420034 	movhi	r17,2048
 8001078:	8c45a704 	addi	r17,r17,5788
 800107c:	8809883a 	mov	r4,r17
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8001080:	dfc00215 	stw	ra,8(sp)
 8001084:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, High_Res_Timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_CLOCK_TIMER, System_Clock_Timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysID);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8001088:	80011100 	call	8001110 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800108c:	d4200404 	addi	r16,gp,-32752
 8001090:	800b883a 	mov	r5,r16
 8001094:	8809883a 	mov	r4,r17
 8001098:	80012bc0 	call	80012bc <alt_dev_llist_insert>
 800109c:	01020034 	movhi	r4,2048
 80010a0:	800b883a 	mov	r5,r16
 80010a4:	21059c04 	addi	r4,r4,5744
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
 80010a8:	dfc00217 	ldw	ra,8(sp)
 80010ac:	dc400117 	ldw	r17,4(sp)
 80010b0:	dc000017 	ldw	r16,0(sp)
 80010b4:	dec00304 	addi	sp,sp,12
 80010b8:	80012bc1 	jmpi	80012bc <alt_dev_llist_insert>

080010bc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 80010bc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80010c0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 80010c4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80010c8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 80010cc:	2980072e 	bgeu	r5,r6,80010ec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80010d0:	38c00037 	ldwio	r3,0(r7)
 80010d4:	18ffffec 	andhi	r3,r3,65535
 80010d8:	183ffc26 	beq	r3,zero,80010cc <__alt_data_end+0xf80014cc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80010dc:	28c00007 	ldb	r3,0(r5)
 80010e0:	20c00035 	stwio	r3,0(r4)
 80010e4:	29400044 	addi	r5,r5,1
 80010e8:	003ff806 	br	80010cc <__alt_data_end+0xf80014cc>

  return count;
}
 80010ec:	f800283a 	ret

080010f0 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 80010f0:	28000126 	beq	r5,zero,80010f8 <get_DDRAM_addr+0x8>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 80010f4:	21001014 	ori	r4,r4,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
 80010f8:	00bfe004 	movi	r2,-128
 80010fc:	1104b03a 	or	r2,r2,r4
 8001100:	f800283a 	ret

08001104 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8001104:	20800a17 	ldw	r2,40(r4)
 8001108:	11400025 	stbio	r5,0(r2)
 800110c:	f800283a 	ret

08001110 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8001110:	20800a17 	ldw	r2,40(r4)
 8001114:	00c00044 	movi	r3,1
 8001118:	10c00025 	stbio	r3,0(r2)
 800111c:	f800283a 	ret

08001120 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8001120:	d1600404 	addi	r5,gp,-32752
 8001124:	80013281 	jmpi	8001328 <alt_find_dev>

08001128 <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8001128:	298d883a 	add	r6,r5,r6
	unsigned int i;
	for (i = 0; i < len; i++)
 800112c:	29800526 	beq	r5,r6,8001144 <alt_up_character_lcd_write+0x1c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8001130:	20800a17 	ldw	r2,40(r4)
 8001134:	28c00007 	ldb	r3,0(r5)
 8001138:	10c00065 	stbio	r3,1(r2)
 800113c:	29400044 	addi	r5,r5,1
 8001140:	003ffa06 	br	800112c <__alt_data_end+0xf800152c>
	}
}
 8001144:	f800283a 	ret

08001148 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8001148:	28800003 	ldbu	r2,0(r5)
 800114c:	10c03fcc 	andi	r3,r2,255
 8001150:	18c0201c 	xori	r3,r3,128
 8001154:	18ffe004 	addi	r3,r3,-128
 8001158:	18000426 	beq	r3,zero,800116c <alt_up_character_lcd_string+0x24>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800115c:	20c00a17 	ldw	r3,40(r4)
 8001160:	18800065 	stbio	r2,1(r3)
		++ptr;
 8001164:	29400044 	addi	r5,r5,1
 8001168:	003ff706 	br	8001148 <__alt_data_end+0xf8001548>
	}
}
 800116c:	f800283a 	ret

08001170 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8001170:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8001174:	deffff04 	addi	sp,sp,-4
 8001178:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800117c:	80011280 	call	8001128 <alt_up_character_lcd_write>
	return 0;
}
 8001180:	0005883a 	mov	r2,zero
 8001184:	dfc00017 	ldw	ra,0(sp)
 8001188:	dec00104 	addi	sp,sp,4
 800118c:	f800283a 	ret

08001190 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8001190:	008009c4 	movi	r2,39
 8001194:	11400a36 	bltu	r2,r5,80011c0 <alt_up_character_lcd_set_cursor_pos+0x30>
 8001198:	00800044 	movi	r2,1
 800119c:	11800836 	bltu	r2,r6,80011c0 <alt_up_character_lcd_set_cursor_pos+0x30>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 80011a0:	30000126 	beq	r6,zero,80011a8 <alt_up_character_lcd_set_cursor_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 80011a4:	29401014 	ori	r5,r5,64
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80011a8:	00bfe004 	movi	r2,-128
 80011ac:	288ab03a 	or	r5,r5,r2
 80011b0:	20800a17 	ldw	r2,40(r4)
 80011b4:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
 80011b8:	0005883a 	mov	r2,zero
 80011bc:	f800283a 	ret
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
		// invalid argument
		return -1;
 80011c0:	00bfffc4 	movi	r2,-1
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}
 80011c4:	f800283a 	ret

080011c8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
 80011c8:	28000c26 	beq	r5,zero,80011fc <alt_up_character_lcd_shift_cursor+0x34>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80011cc:	01400216 	blt	zero,r5,80011d8 <alt_up_character_lcd_shift_cursor+0x10>
 80011d0:	00800404 	movi	r2,16
 80011d4:	00000106 	br	80011dc <alt_up_character_lcd_shift_cursor+0x14>
 80011d8:	00800504 	movi	r2,20
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80011dc:	2800010e 	bge	r5,zero,80011e4 <alt_up_character_lcd_shift_cursor+0x1c>
 80011e0:	014bc83a 	sub	r5,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80011e4:	28c03fcc 	andi	r3,r5,255
 80011e8:	18000426 	beq	r3,zero,80011fc <alt_up_character_lcd_shift_cursor+0x34>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80011ec:	20c00a17 	ldw	r3,40(r4)
 80011f0:	18800025 	stbio	r2,0(r3)
 80011f4:	297fffc4 	addi	r5,r5,-1
 80011f8:	003ffa06 	br	80011e4 <__alt_data_end+0xf80015e4>
 80011fc:	f800283a 	ret

08001200 <alt_up_character_lcd_shift_display>:
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
 8001200:	28000c26 	beq	r5,zero,8001234 <alt_up_character_lcd_shift_display+0x34>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8001204:	01400216 	blt	zero,r5,8001210 <alt_up_character_lcd_shift_display+0x10>
 8001208:	00800604 	movi	r2,24
 800120c:	00000106 	br	8001214 <alt_up_character_lcd_shift_display+0x14>
 8001210:	00800704 	movi	r2,28
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8001214:	2800010e 	bge	r5,zero,800121c <alt_up_character_lcd_shift_display+0x1c>
 8001218:	014bc83a 	sub	r5,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800121c:	28c03fcc 	andi	r3,r5,255
 8001220:	18000426 	beq	r3,zero,8001234 <alt_up_character_lcd_shift_display+0x34>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8001224:	20c00a17 	ldw	r3,40(r4)
 8001228:	18800025 	stbio	r2,0(r3)
 800122c:	297fffc4 	addi	r5,r5,-1
 8001230:	003ffa06 	br	800121c <__alt_data_end+0xf800161c>
 8001234:	f800283a 	ret

08001238 <alt_up_character_lcd_erase_pos>:
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8001238:	008009c4 	movi	r2,39
 800123c:	11400d36 	bltu	r2,r5,8001274 <alt_up_character_lcd_erase_pos+0x3c>
 8001240:	00800044 	movi	r2,1
 8001244:	11800b36 	bltu	r2,r6,8001274 <alt_up_character_lcd_erase_pos+0x3c>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 8001248:	30000126 	beq	r6,zero,8001250 <alt_up_character_lcd_erase_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 800124c:	29401014 	ori	r5,r5,64
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8001250:	00bfe004 	movi	r2,-128
 8001254:	288ab03a 	or	r5,r5,r2
 8001258:	20800a17 	ldw	r2,40(r4)
 800125c:	11400025 	stbio	r5,0(r2)
	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8001260:	20800a17 	ldw	r2,40(r4)
 8001264:	00c00084 	movi	r3,2
 8001268:	10c00065 	stbio	r3,1(r2)
	return 0;
 800126c:	0005883a 	mov	r2,zero
 8001270:	f800283a 	ret

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
		return -1;
 8001274:	00bfffc4 	movi	r2,-1
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}
 8001278:	f800283a 	ret

0800127c <alt_up_character_lcd_cursor_off>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800127c:	20800a17 	ldw	r2,40(r4)
 8001280:	00c00304 	movi	r3,12
 8001284:	10c00025 	stbio	r3,0(r2)
 8001288:	f800283a 	ret

0800128c <alt_up_character_lcd_cursor_blink_on>:
 800128c:	20800a17 	ldw	r2,40(r4)
 8001290:	00c003c4 	movi	r3,15
 8001294:	10c00025 	stbio	r3,0(r2)
 8001298:	f800283a 	ret

0800129c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800129c:	0005883a 	mov	r2,zero
 80012a0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80012a4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80012a8:	10800804 	addi	r2,r2,32
 80012ac:	10fffd1e 	bne	r2,r3,80012a4 <__alt_data_end+0xf80016a4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80012b0:	f800283a 	ret

080012b4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 80012b4:	3005883a 	mov	r2,r6
 80012b8:	f800283a 	ret

080012bc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80012bc:	20000226 	beq	r4,zero,80012c8 <alt_dev_llist_insert+0xc>
 80012c0:	20800217 	ldw	r2,8(r4)
 80012c4:	1000101e 	bne	r2,zero,8001308 <alt_dev_llist_insert+0x4c>
 80012c8:	d0a00817 	ldw	r2,-32736(gp)
 80012cc:	10000926 	beq	r2,zero,80012f4 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80012d0:	deffff04 	addi	sp,sp,-4
 80012d4:	dfc00015 	stw	ra,0(sp)
 80012d8:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 80012dc:	00c00584 	movi	r3,22
 80012e0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 80012e4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 80012e8:	dfc00017 	ldw	ra,0(sp)
 80012ec:	dec00104 	addi	sp,sp,4
 80012f0:	f800283a 	ret
 80012f4:	d0a07a04 	addi	r2,gp,-32280
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 80012f8:	00c00584 	movi	r3,22
 80012fc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 8001300:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 8001304:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 8001308:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800130c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 8001310:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 8001314:	28800017 	ldw	r2,0(r5)
 8001318:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 800131c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 8001320:	0005883a 	mov	r2,zero
 8001324:	f800283a 	ret

08001328 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8001328:	defffb04 	addi	sp,sp,-20
 800132c:	dcc00315 	stw	r19,12(sp)
 8001330:	dc800215 	stw	r18,8(sp)
 8001334:	dc400115 	stw	r17,4(sp)
 8001338:	dc000015 	stw	r16,0(sp)
 800133c:	dfc00415 	stw	ra,16(sp)
 8001340:	2027883a 	mov	r19,r4
 8001344:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 8001348:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 800134c:	800049c0 	call	800049c <strlen>
 8001350:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001354:	84400726 	beq	r16,r17,8001374 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8001358:	81000217 	ldw	r4,8(r16)
 800135c:	900d883a 	mov	r6,r18
 8001360:	980b883a 	mov	r5,r19
 8001364:	80013e80 	call	80013e8 <memcmp>
 8001368:	10000426 	beq	r2,zero,800137c <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 800136c:	84000017 	ldw	r16,0(r16)
 8001370:	003ff806 	br	8001354 <__alt_data_end+0xf8001754>
  }
  
  /* No match found */
  
  return NULL;
 8001374:	0005883a 	mov	r2,zero
 8001378:	00000106 	br	8001380 <alt_find_dev+0x58>
 800137c:	8005883a 	mov	r2,r16
}
 8001380:	dfc00417 	ldw	ra,16(sp)
 8001384:	dcc00317 	ldw	r19,12(sp)
 8001388:	dc800217 	ldw	r18,8(sp)
 800138c:	dc400117 	ldw	r17,4(sp)
 8001390:	dc000017 	ldw	r16,0(sp)
 8001394:	dec00504 	addi	sp,sp,20
 8001398:	f800283a 	ret

0800139c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800139c:	01440004 	movi	r5,4096
 80013a0:	0009883a 	mov	r4,zero
 80013a4:	80013b01 	jmpi	80013b0 <alt_icache_flush>

080013a8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 80013a8:	000170fa 	wrctl	ienable,zero
 80013ac:	f800283a 	ret

080013b0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 80013b0:	00840004 	movi	r2,4096
 80013b4:	1140012e 	bgeu	r2,r5,80013bc <alt_icache_flush+0xc>
 80013b8:	100b883a 	mov	r5,r2
 80013bc:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80013c0:	2005883a 	mov	r2,r4
 80013c4:	1140032e 	bgeu	r2,r5,80013d4 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80013c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80013cc:	10800804 	addi	r2,r2,32
 80013d0:	003ffc06 	br	80013c4 <__alt_data_end+0xf80017c4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80013d4:	210007cc 	andi	r4,r4,31
 80013d8:	20000126 	beq	r4,zero,80013e0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80013dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80013e0:	0000203a 	flushp
 80013e4:	f800283a 	ret

080013e8 <memcmp>:
 80013e8:	218d883a 	add	r6,r4,r6
 80013ec:	21800826 	beq	r4,r6,8001410 <memcmp+0x28>
 80013f0:	20800003 	ldbu	r2,0(r4)
 80013f4:	28c00003 	ldbu	r3,0(r5)
 80013f8:	10c00226 	beq	r2,r3,8001404 <memcmp+0x1c>
 80013fc:	10c5c83a 	sub	r2,r2,r3
 8001400:	f800283a 	ret
 8001404:	21000044 	addi	r4,r4,1
 8001408:	29400044 	addi	r5,r5,1
 800140c:	003ff706 	br	80013ec <__alt_data_end+0xf80017ec>
 8001410:	0005883a 	mov	r2,zero
 8001414:	f800283a 	ret
