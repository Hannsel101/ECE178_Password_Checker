
PasswordChecker.elf:     file format elf32-littlenios2
PasswordChecker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00000320 memsz 0x00000320 flags r-x
    LOAD off    0x00001340 vaddr 0x08000340 paddr 0x08000344 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001348 vaddr 0x08000348 paddr 0x08000348 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08000020  08000020  00001344  2**0
                  CONTENTS
  2 .text         00000320  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  08000340  08000348  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  08000340  08000344  00001340  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000024  08000348  08000348  00001348  2**2
                  ALLOC, SMALL_DATA
  6 .TCM          00000000  00000000  00000000  00001344  2**0
                  CONTENTS
  7 .SDRAM        00000000  0800036c  0800036c  00001344  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000130  00000000  00000000  00001368  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000009d5  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000005a5  00000000  00000000  00001e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000053c  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000018c  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004b1  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000169  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000030f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000090  00000000  00000000  00003128  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000404e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00004056  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00004057  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0000406f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0000407a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000018  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 30 .jdi          00003fec  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009775a  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000020 l    d  .text	00000000 .text
08000340 l    d  .rodata	00000000 .rodata
08000340 l    d  .rwdata	00000000 .rwdata
08000348 l    d  .bss	00000000 .bss
00000000 l    d  .TCM	00000000 .TCM
0800036c l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PasswordChecker_bsp//obj/HAL/src/crt0.o
08000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
0800028c g     F .text	0000002c alt_main
08000344 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_TCM
0800006c g     F .text	00000004 keyInput
08000300 g     F .text	00000008 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08000354 g     O .bss	00000004 alt_argv
08008340 g       *ABS*	00000000 _gp
08000348 g     O .bss	00000001 numChars
08000308 g     F .text	00000038 alt_icache_flush
0800036c g       *ABS*	00000000 __bss_end
080002dc g     F .text	00000018 alt_dcache_flush_all
08000344 g       *ABS*	00000000 __ram_rwdata_end
08000340 g       *ABS*	00000000 __ram_rodata_end
08000340 g     O .rwdata	00000004 jtag_uart_0
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
0800036c g       *ABS*	00000000 end
0ffff800 g       *ABS*	00000000 __alt_stack_pointer
08000020 g     F .text	0000004c _start
080002d8 g     F .text	00000004 alt_sys_init
0800035c g     O .bss	00000010 buffer
08000340 g       *ABS*	00000000 __ram_rwdata_start
08000340 g       *ABS*	00000000 __ram_rodata_start
0800036c g       *ABS*	00000000 __alt_stack_base
08000070 g     F .text	00000040 timerSetup
08000348 g       *ABS*	00000000 __bss_start
08000124 g     F .text	00000088 main
08000350 g     O .bss	00000004 alt_envp
08000340 g       *ABS*	00000000 __flash_rodata_start
080002b8 g     F .text	00000020 alt_irq_init
08000358 g     O .bss	00000004 alt_argc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800034c g     O .bss	00000004 bufferIndex
08000344 g       *ABS*	00000000 _edata
0800036c g       *ABS*	00000000 _end
080000dc g     F .text	00000048 initHexDisplays
08000020 g       *ABS*	00000000 __ram_exceptions_end
0ffff800 g       *ABS*	00000000 __alt_data_end
0800001c g       .entry	00000000 _exit
080002f4 g     F .text	0000000c alt_icache_flush_all
080000b0 g     F .text	0000002c startDelay
080001ac g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000804>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08400814 	ori	at,at,32
    jmp r1
 8000018:	0800683a 	jmp	at

0800001c <_exit>:
 800001c:	00000000 	call	0 <__alt_mem_TCM>

Disassembly of section .text:

08000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800002c:	00bffd16 	blt	zero,r2,8000024 <__alt_data_end+0xf8000824>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000030:	06c3fff4 	movhi	sp,4095
    ori sp, sp, %lo(__alt_stack_pointer)
 8000034:	defe0014 	ori	sp,sp,63488
    movhi gp, %hi(_gp)
 8000038:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800003c:	d6a0d014 	ori	gp,gp,33600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000044:	1080d214 	ori	r2,r2,840

    movhi r3, %hi(__bss_end)
 8000048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800004c:	18c0db14 	ori	r3,r3,876

    beq r2, r3, 1f
 8000050:	10c00326 	beq	r2,r3,8000060 <_start+0x40>

0:
    stw zero, (r2)
 8000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800005c:	10fffd36 	bltu	r2,r3,8000054 <__alt_data_end+0xf8000854>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000060:	80001ac0 	call	80001ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000064:	800028c0 	call	800028c <alt_main>

08000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000068:	003fff06 	br	8000068 <__alt_data_end+0xf8000868>

0800006c <keyInput>:
  }
  return 0;
}

void keyInput()
{
 800006c:	f800283a 	ret

08000070 <timerSetup>:

}
//------------------------------------------------------------------//
void timerSetup(alt_u32 period)
{
 8000070:	00800074 	movhi	r2,1
 8000074:	1093e044 	addi	r2,r2,20353
 8000078:	1100012e 	bgeu	r2,r4,8000080 <timerSetup+0x10>
 800007c:	1009883a 	mov	r4,r2
	if(period > 85889)
	{
		period = 85889;
	}
	period *= 50000;//Convert from ms to cc
 8000080:	00b0d414 	movui	r2,50000
 8000084:	2089383a 	mul	r4,r4,r2

	//HIGH_RES_TIMER_BASE
	IOWR(HIGH_RES_TIMER_BASE, 1, 8);//Set stop on control bit of timer
 8000088:	00c00204 	movi	r3,8
 800008c:	00860104 	movi	r2,6148
 8000090:	10c00035 	stwio	r3,0(r2)

	alt_u16 periodIn = period & 0x0FFFF;
	IOWR(HIGH_RES_TIMER_BASE, 2, periodIn);//Set period low
 8000094:	20ffffcc 	andi	r3,r4,65535
 8000098:	00860204 	movi	r2,6152
 800009c:	10c00035 	stwio	r3,0(r2)

	periodIn = period >> 16;
	IOWR(HIGH_RES_TIMER_BASE, 3, periodIn);//Set period high
 80000a0:	2008d43a 	srli	r4,r4,16
 80000a4:	00860304 	movi	r2,6156
 80000a8:	11000035 	stwio	r4,0(r2)
 80000ac:	f800283a 	ret

080000b0 <startDelay>:
	return;
}
//------------------------------------------------------------------//
void startDelay()
{
	IOWR(HIGH_RES_TIMER_BASE, 1, 4);//Set Start on control register
 80000b0:	00860104 	movi	r2,6148
 80000b4:	00c00104 	movi	r3,4
 80000b8:	10c00035 	stwio	r3,0(r2)
	alt_u8 status;
	do{
		status = IORD(HIGH_RES_TIMER_BASE, 0) & 1;
 80000bc:	00c60004 	movi	r3,6144
 80000c0:	18800037 	ldwio	r2,0(r3)
	}while(!status);
 80000c4:	1080004c 	andi	r2,r2,1
 80000c8:	103ffd26 	beq	r2,zero,80000c0 <__alt_data_end+0xf80008c0>
	IOWR(HIGH_RES_TIMER_BASE, 0, 1);//Reset Time out bit
 80000cc:	00c00044 	movi	r3,1
 80000d0:	00860004 	movi	r2,6144
 80000d4:	10c00035 	stwio	r3,0(r2)
 80000d8:	f800283a 	ret

080000dc <initHexDisplays>:
}
//------------------------------------------------------------------//
void initHexDisplays()
{
	//Clear all the displays
	IOWR(HEX_0_BASE, 0, 0xFF);
 80000dc:	00803fc4 	movi	r2,255
 80000e0:	00c63404 	movi	r3,6352
 80000e4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_1_BASE, 0, 0xFF);
 80000e8:	00c63004 	movi	r3,6336
 80000ec:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_2_BASE, 0, 0xFF);
 80000f0:	00c62c04 	movi	r3,6320
 80000f4:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_3_BASE, 0, 0xFF);
 80000f8:	00c62804 	movi	r3,6304
 80000fc:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_4_BASE, 0, 0xFF);
 8000100:	00c62404 	movi	r3,6288
 8000104:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_5_BASE, 0, 0xFF);
 8000108:	00c62004 	movi	r3,6272
 800010c:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_6_BASE, 0, 0xFF);
 8000110:	00c61c04 	movi	r3,6256
 8000114:	18800035 	stwio	r2,0(r3)
	IOWR(HEX_7_BASE, 0, 0xFF);
 8000118:	00c61804 	movi	r3,6240
 800011c:	18800035 	stwio	r2,0(r3)
 8000120:	f800283a 	ret

08000124 <main>:

void keyInput();
void printBuffer();

int main()
{ 
 8000124:	defff904 	addi	sp,sp,-28
 8000128:	dfc00615 	stw	ra,24(sp)
 800012c:	dd400515 	stw	r21,20(sp)
 8000130:	dd000415 	stw	r20,16(sp)
 8000134:	dcc00315 	stw	r19,12(sp)
 8000138:	dc800215 	stw	r18,8(sp)
 800013c:	dc400115 	stw	r17,4(sp)
 8000140:	dc000015 	stw	r16,0(sp)
	initHexDisplays();
 8000144:	80000dc0 	call	80000dc <initHexDisplays>
	timerSetup(10);//testing 1 second
 8000148:	01000284 	movi	r4,10
 800014c:	80000700 	call	8000070 <timerSetup>
	int i = 0;
	int k = 0;
	int state = 0;
 8000150:	0025883a 	mov	r18,zero
int main()
{ 
	initHexDisplays();
	timerSetup(10);//testing 1 second
	int i = 0;
	int k = 0;
 8000154:	0021883a 	mov	r16,zero

int main()
{ 
	initHexDisplays();
	timerSetup(10);//testing 1 second
	int i = 0;
 8000158:	0023883a 	mov	r17,zero
	  	  else
	  		  i = 0;
	  	  ++i;
	  	  break;
	  case(1):
		  if(k < 1024)
 800015c:	04c0ffc4 	movi	r19,1023
			  IOWR(LEDS_BASE, 0 , k);
 8000160:	05063804 	movi	r20,6368
	  else state = 1;

	  switch(state)
	  {
	  case(0):
	  	  if(i < 256)
 8000164:	05403fc4 	movi	r21,255
	int i = 0;
	int k = 0;
	int state = 0;
  while (1)
  {
	  startDelay();
 8000168:	80000b00 	call	80000b0 <startDelay>

	  if(state) state = 0;
 800016c:	90000826 	beq	r18,zero,8000190 <main+0x6c>
	  else state = 1;

	  switch(state)
	  {
	  case(0):
	  	  if(i < 256)
 8000170:	ac400516 	blt	r21,r17,8000188 <main+0x64>
	  		  IOWR(LEDG_BASE, 0, i);
 8000174:	00861404 	movi	r2,6224
 8000178:	14400035 	stwio	r17,0(r2)
	  	  else
	  		  i = 0;
	  	  ++i;
 800017c:	8c400044 	addi	r17,r17,1
	  	  break;
 8000180:	0025883a 	mov	r18,zero
 8000184:	003ff806 	br	8000168 <__alt_data_end+0xf8000968>
	  {
	  case(0):
	  	  if(i < 256)
	  		  IOWR(LEDG_BASE, 0, i);
	  	  else
	  		  i = 0;
 8000188:	0023883a 	mov	r17,zero
 800018c:	003ffb06 	br	800017c <__alt_data_end+0xf800097c>
	  	  ++i;
	  	  break;
	  case(1):
		  if(k < 1024)
 8000190:	9c000416 	blt	r19,r16,80001a4 <main+0x80>
			  IOWR(LEDS_BASE, 0 , k);
 8000194:	a4000035 	stwio	r16,0(r20)
		  else
			  k = 0;
	  	  ++k;
 8000198:	84000044 	addi	r16,r16,1
	  	  break;
 800019c:	04800044 	movi	r18,1
 80001a0:	003ff106 	br	8000168 <__alt_data_end+0xf8000968>
	  	  break;
	  case(1):
		  if(k < 1024)
			  IOWR(LEDS_BASE, 0 , k);
		  else
			  k = 0;
 80001a4:	0021883a 	mov	r16,zero
 80001a8:	003ffb06 	br	8000198 <__alt_data_end+0xf8000998>

080001ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80001ac:	deffff04 	addi	sp,sp,-4
 80001b0:	01020034 	movhi	r4,2048
 80001b4:	01420034 	movhi	r5,2048
 80001b8:	dfc00015 	stw	ra,0(sp)
 80001bc:	2100d004 	addi	r4,r4,832
 80001c0:	2940d104 	addi	r5,r5,836

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80001c4:	2140061e 	bne	r4,r5,80001e0 <alt_load+0x34>
 80001c8:	01020034 	movhi	r4,2048
 80001cc:	01420034 	movhi	r5,2048
 80001d0:	21000804 	addi	r4,r4,32
 80001d4:	29400804 	addi	r5,r5,32
 80001d8:	2140121e 	bne	r4,r5,8000224 <alt_load+0x78>
 80001dc:	00000b06 	br	800020c <alt_load+0x60>
 80001e0:	00c20034 	movhi	r3,2048
 80001e4:	18c0d104 	addi	r3,r3,836
 80001e8:	1907c83a 	sub	r3,r3,r4
 80001ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80001f0:	10fff526 	beq	r2,r3,80001c8 <__alt_data_end+0xf80009c8>
    {
      *to++ = *from++;
 80001f4:	114f883a 	add	r7,r2,r5
 80001f8:	39c00017 	ldw	r7,0(r7)
 80001fc:	110d883a 	add	r6,r2,r4
 8000200:	10800104 	addi	r2,r2,4
 8000204:	31c00015 	stw	r7,0(r6)
 8000208:	003ff906 	br	80001f0 <__alt_data_end+0xf80009f0>
 800020c:	01020034 	movhi	r4,2048
 8000210:	01420034 	movhi	r5,2048
 8000214:	2100d004 	addi	r4,r4,832
 8000218:	2940d004 	addi	r5,r5,832

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800021c:	2140101e 	bne	r4,r5,8000260 <alt_load+0xb4>
 8000220:	00000b06 	br	8000250 <alt_load+0xa4>
 8000224:	00c20034 	movhi	r3,2048
 8000228:	18c00804 	addi	r3,r3,32
 800022c:	1907c83a 	sub	r3,r3,r4
 8000230:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000234:	10fff526 	beq	r2,r3,800020c <__alt_data_end+0xf8000a0c>
    {
      *to++ = *from++;
 8000238:	114f883a 	add	r7,r2,r5
 800023c:	39c00017 	ldw	r7,0(r7)
 8000240:	110d883a 	add	r6,r2,r4
 8000244:	10800104 	addi	r2,r2,4
 8000248:	31c00015 	stw	r7,0(r6)
 800024c:	003ff906 	br	8000234 <__alt_data_end+0xf8000a34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8000250:	80002dc0 	call	80002dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8000254:	dfc00017 	ldw	ra,0(sp)
 8000258:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 800025c:	80002f41 	jmpi	80002f4 <alt_icache_flush_all>
 8000260:	00c20034 	movhi	r3,2048
 8000264:	18c0d004 	addi	r3,r3,832
 8000268:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800026c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000270:	18bff726 	beq	r3,r2,8000250 <__alt_data_end+0xf8000a50>
    {
      *to++ = *from++;
 8000274:	114f883a 	add	r7,r2,r5
 8000278:	39c00017 	ldw	r7,0(r7)
 800027c:	110d883a 	add	r6,r2,r4
 8000280:	10800104 	addi	r2,r2,4
 8000284:	31c00015 	stw	r7,0(r6)
 8000288:	003ff906 	br	8000270 <__alt_data_end+0xf8000a70>

0800028c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800028c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000290:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000294:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000298:	80002b80 	call	80002b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800029c:	80002d80 	call	80002d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80002a0:	d1a00417 	ldw	r6,-32752(gp)
 80002a4:	d1600517 	ldw	r5,-32748(gp)
 80002a8:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 80002ac:	dfc00017 	ldw	ra,0(sp)
 80002b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80002b4:	80001241 	jmpi	8000124 <main>

080002b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80002b8:	deffff04 	addi	sp,sp,-4
 80002bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MYCPU, myCPU);
 80002c0:	80003000 	call	8000300 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80002c4:	00800044 	movi	r2,1
 80002c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80002cc:	dfc00017 	ldw	ra,0(sp)
 80002d0:	dec00104 	addi	sp,sp,4
 80002d4:	f800283a 	ret

080002d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80002d8:	f800283a 	ret

080002dc <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80002dc:	0005883a 	mov	r2,zero
 80002e0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80002e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80002e8:	10800804 	addi	r2,r2,32
 80002ec:	10fffd1e 	bne	r2,r3,80002e4 <__alt_data_end+0xf8000ae4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80002f0:	f800283a 	ret

080002f4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80002f4:	01440004 	movi	r5,4096
 80002f8:	0009883a 	mov	r4,zero
 80002fc:	80003081 	jmpi	8000308 <alt_icache_flush>

08000300 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8000300:	000170fa 	wrctl	ienable,zero
 8000304:	f800283a 	ret

08000308 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 8000308:	00840004 	movi	r2,4096
 800030c:	1140012e 	bgeu	r2,r5,8000314 <alt_icache_flush+0xc>
 8000310:	100b883a 	mov	r5,r2
 8000314:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8000318:	2005883a 	mov	r2,r4
 800031c:	1140032e 	bgeu	r2,r5,800032c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8000320:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8000324:	10800804 	addi	r2,r2,32
 8000328:	003ffc06 	br	800031c <__alt_data_end+0xf8000b1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800032c:	210007cc 	andi	r4,r4,31
 8000330:	20000126 	beq	r4,zero,8000338 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8000334:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8000338:	0000203a 	flushp
 800033c:	f800283a 	ret
