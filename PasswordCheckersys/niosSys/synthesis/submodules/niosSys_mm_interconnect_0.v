// niosSys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module niosSys_mm_interconnect_0 (
		input  wire        MAIN_CLK_sys_clk_clk,                                                 //                                         MAIN_CLK_sys_clk.clk
		input  wire        myCPU_reset_reset_bridge_in_reset_reset,                              //                        myCPU_reset_reset_bridge_in_reset.reset
		input  wire [27:0] myCPU_data_master_address,                                            //                                        myCPU_data_master.address
		output wire        myCPU_data_master_waitrequest,                                        //                                                         .waitrequest
		input  wire [3:0]  myCPU_data_master_byteenable,                                         //                                                         .byteenable
		input  wire        myCPU_data_master_read,                                               //                                                         .read
		output wire [31:0] myCPU_data_master_readdata,                                           //                                                         .readdata
		output wire        myCPU_data_master_readdatavalid,                                      //                                                         .readdatavalid
		input  wire        myCPU_data_master_write,                                              //                                                         .write
		input  wire [31:0] myCPU_data_master_writedata,                                          //                                                         .writedata
		input  wire        myCPU_data_master_debugaccess,                                        //                                                         .debugaccess
		input  wire [27:0] myCPU_instruction_master_address,                                     //                                 myCPU_instruction_master.address
		output wire        myCPU_instruction_master_waitrequest,                                 //                                                         .waitrequest
		input  wire        myCPU_instruction_master_read,                                        //                                                         .read
		output wire [31:0] myCPU_instruction_master_readdata,                                    //                                                         .readdata
		output wire        myCPU_instruction_master_readdatavalid,                               //                                                         .readdatavalid
		output wire [7:0]  Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_address,     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave.address
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_write,       //                                                         .write
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_read,        //                                                         .read
		input  wire [31:0] Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_readdata,    //                                                         .readdata
		output wire [31:0] Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_writedata,   //                                                         .writedata
		output wire [3:0]  Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_byteenable,  //                                                         .byteenable
		input  wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_waitrequest, //                                                         .waitrequest
		output wire        Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_chipselect,  //                                                         .chipselect
		output wire [0:0]  character_lcd_0_avalon_lcd_slave_address,                             //                         character_lcd_0_avalon_lcd_slave.address
		output wire        character_lcd_0_avalon_lcd_slave_write,                               //                                                         .write
		output wire        character_lcd_0_avalon_lcd_slave_read,                                //                                                         .read
		input  wire [7:0]  character_lcd_0_avalon_lcd_slave_readdata,                            //                                                         .readdata
		output wire [7:0]  character_lcd_0_avalon_lcd_slave_writedata,                           //                                                         .writedata
		input  wire        character_lcd_0_avalon_lcd_slave_waitrequest,                         //                                                         .waitrequest
		output wire        character_lcd_0_avalon_lcd_slave_chipselect,                          //                                                         .chipselect
		output wire [1:0]  HEX_0_s1_address,                                                     //                                                 HEX_0_s1.address
		output wire        HEX_0_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_0_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_0_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_0_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_1_s1_address,                                                     //                                                 HEX_1_s1.address
		output wire        HEX_1_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_1_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_1_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_1_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_2_s1_address,                                                     //                                                 HEX_2_s1.address
		output wire        HEX_2_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_2_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_2_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_2_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_3_s1_address,                                                     //                                                 HEX_3_s1.address
		output wire        HEX_3_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_3_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_3_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_3_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_4_s1_address,                                                     //                                                 HEX_4_s1.address
		output wire        HEX_4_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_4_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_4_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_4_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_5_s1_address,                                                     //                                                 HEX_5_s1.address
		output wire        HEX_5_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_5_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_5_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_5_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_6_s1_address,                                                     //                                                 HEX_6_s1.address
		output wire        HEX_6_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_6_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_6_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_6_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  HEX_7_s1_address,                                                     //                                                 HEX_7_s1.address
		output wire        HEX_7_s1_write,                                                       //                                                         .write
		input  wire [31:0] HEX_7_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] HEX_7_s1_writedata,                                                   //                                                         .writedata
		output wire        HEX_7_s1_chipselect,                                                  //                                                         .chipselect
		output wire [2:0]  High_Res_Timer_s1_address,                                            //                                        High_Res_Timer_s1.address
		output wire        High_Res_Timer_s1_write,                                              //                                                         .write
		input  wire [15:0] High_Res_Timer_s1_readdata,                                           //                                                         .readdata
		output wire [15:0] High_Res_Timer_s1_writedata,                                          //                                                         .writedata
		output wire        High_Res_Timer_s1_chipselect,                                         //                                                         .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                                //                            jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                  //                                                         .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                   //                                                         .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                               //                                                         .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                              //                                                         .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                            //                                                         .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                             //                                                         .chipselect
		output wire [1:0]  KEY_0_s1_address,                                                     //                                                 KEY_0_s1.address
		output wire        KEY_0_s1_write,                                                       //                                                         .write
		input  wire [31:0] KEY_0_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] KEY_0_s1_writedata,                                                   //                                                         .writedata
		output wire        KEY_0_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  LEDG_s1_address,                                                      //                                                  LEDG_s1.address
		output wire        LEDG_s1_write,                                                        //                                                         .write
		input  wire [31:0] LEDG_s1_readdata,                                                     //                                                         .readdata
		output wire [31:0] LEDG_s1_writedata,                                                    //                                                         .writedata
		output wire        LEDG_s1_chipselect,                                                   //                                                         .chipselect
		output wire [1:0]  LEDs_s1_address,                                                      //                                                  LEDs_s1.address
		output wire        LEDs_s1_write,                                                        //                                                         .write
		input  wire [31:0] LEDs_s1_readdata,                                                     //                                                         .readdata
		output wire [31:0] LEDs_s1_writedata,                                                    //                                                         .writedata
		output wire        LEDs_s1_chipselect,                                                   //                                                         .chipselect
		output wire [8:0]  myCPU_debug_mem_slave_address,                                        //                                    myCPU_debug_mem_slave.address
		output wire        myCPU_debug_mem_slave_write,                                          //                                                         .write
		output wire        myCPU_debug_mem_slave_read,                                           //                                                         .read
		input  wire [31:0] myCPU_debug_mem_slave_readdata,                                       //                                                         .readdata
		output wire [31:0] myCPU_debug_mem_slave_writedata,                                      //                                                         .writedata
		output wire [3:0]  myCPU_debug_mem_slave_byteenable,                                     //                                                         .byteenable
		input  wire        myCPU_debug_mem_slave_waitrequest,                                    //                                                         .waitrequest
		output wire        myCPU_debug_mem_slave_debugaccess,                                    //                                                         .debugaccess
		output wire [24:0] SDRAM_s1_address,                                                     //                                                 SDRAM_s1.address
		output wire        SDRAM_s1_write,                                                       //                                                         .write
		output wire        SDRAM_s1_read,                                                        //                                                         .read
		input  wire [31:0] SDRAM_s1_readdata,                                                    //                                                         .readdata
		output wire [31:0] SDRAM_s1_writedata,                                                   //                                                         .writedata
		output wire [3:0]  SDRAM_s1_byteenable,                                                  //                                                         .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                               //                                                         .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                                 //                                                         .waitrequest
		output wire        SDRAM_s1_chipselect,                                                  //                                                         .chipselect
		output wire [1:0]  Switches_s1_address,                                                  //                                              Switches_s1.address
		output wire        Switches_s1_write,                                                    //                                                         .write
		input  wire [31:0] Switches_s1_readdata,                                                 //                                                         .readdata
		output wire [31:0] Switches_s1_writedata,                                                //                                                         .writedata
		output wire        Switches_s1_chipselect,                                               //                                                         .chipselect
		output wire [0:0]  sysID_control_slave_address,                                          //                                      sysID_control_slave.address
		input  wire [31:0] sysID_control_slave_readdata,                                         //                                                         .readdata
		output wire [2:0]  System_Clock_Timer_s1_address,                                        //                                    System_Clock_Timer_s1.address
		output wire        System_Clock_Timer_s1_write,                                          //                                                         .write
		input  wire [15:0] System_Clock_Timer_s1_readdata,                                       //                                                         .readdata
		output wire [15:0] System_Clock_Timer_s1_writedata,                                      //                                                         .writedata
		output wire        System_Clock_Timer_s1_chipselect,                                     //                                                         .chipselect
		output wire [8:0]  TCM_s2_address,                                                       //                                                   TCM_s2.address
		output wire        TCM_s2_write,                                                         //                                                         .write
		input  wire [31:0] TCM_s2_readdata,                                                      //                                                         .readdata
		output wire [31:0] TCM_s2_writedata,                                                     //                                                         .writedata
		output wire [3:0]  TCM_s2_byteenable,                                                    //                                                         .byteenable
		output wire        TCM_s2_chipselect,                                                    //                                                         .chipselect
		output wire        TCM_s2_clken                                                          //                                                         .clken
	);

	wire          mycpu_data_master_translator_avalon_universal_master_0_waitrequest;                        // myCPU_data_master_agent:av_waitrequest -> myCPU_data_master_translator:uav_waitrequest
	wire   [31:0] mycpu_data_master_translator_avalon_universal_master_0_readdata;                           // myCPU_data_master_agent:av_readdata -> myCPU_data_master_translator:uav_readdata
	wire          mycpu_data_master_translator_avalon_universal_master_0_debugaccess;                        // myCPU_data_master_translator:uav_debugaccess -> myCPU_data_master_agent:av_debugaccess
	wire   [27:0] mycpu_data_master_translator_avalon_universal_master_0_address;                            // myCPU_data_master_translator:uav_address -> myCPU_data_master_agent:av_address
	wire          mycpu_data_master_translator_avalon_universal_master_0_read;                               // myCPU_data_master_translator:uav_read -> myCPU_data_master_agent:av_read
	wire    [3:0] mycpu_data_master_translator_avalon_universal_master_0_byteenable;                         // myCPU_data_master_translator:uav_byteenable -> myCPU_data_master_agent:av_byteenable
	wire          mycpu_data_master_translator_avalon_universal_master_0_readdatavalid;                      // myCPU_data_master_agent:av_readdatavalid -> myCPU_data_master_translator:uav_readdatavalid
	wire          mycpu_data_master_translator_avalon_universal_master_0_lock;                               // myCPU_data_master_translator:uav_lock -> myCPU_data_master_agent:av_lock
	wire          mycpu_data_master_translator_avalon_universal_master_0_write;                              // myCPU_data_master_translator:uav_write -> myCPU_data_master_agent:av_write
	wire   [31:0] mycpu_data_master_translator_avalon_universal_master_0_writedata;                          // myCPU_data_master_translator:uav_writedata -> myCPU_data_master_agent:av_writedata
	wire    [2:0] mycpu_data_master_translator_avalon_universal_master_0_burstcount;                         // myCPU_data_master_translator:uav_burstcount -> myCPU_data_master_agent:av_burstcount
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                 // myCPU_instruction_master_agent:av_waitrequest -> myCPU_instruction_master_translator:uav_waitrequest
	wire   [31:0] mycpu_instruction_master_translator_avalon_universal_master_0_readdata;                    // myCPU_instruction_master_agent:av_readdata -> myCPU_instruction_master_translator:uav_readdata
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                 // myCPU_instruction_master_translator:uav_debugaccess -> myCPU_instruction_master_agent:av_debugaccess
	wire   [27:0] mycpu_instruction_master_translator_avalon_universal_master_0_address;                     // myCPU_instruction_master_translator:uav_address -> myCPU_instruction_master_agent:av_address
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_read;                        // myCPU_instruction_master_translator:uav_read -> myCPU_instruction_master_agent:av_read
	wire    [3:0] mycpu_instruction_master_translator_avalon_universal_master_0_byteenable;                  // myCPU_instruction_master_translator:uav_byteenable -> myCPU_instruction_master_agent:av_byteenable
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;               // myCPU_instruction_master_agent:av_readdatavalid -> myCPU_instruction_master_translator:uav_readdatavalid
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_lock;                        // myCPU_instruction_master_translator:uav_lock -> myCPU_instruction_master_agent:av_lock
	wire          mycpu_instruction_master_translator_avalon_universal_master_0_write;                       // myCPU_instruction_master_translator:uav_write -> myCPU_instruction_master_agent:av_write
	wire   [31:0] mycpu_instruction_master_translator_avalon_universal_master_0_writedata;                   // myCPU_instruction_master_translator:uav_writedata -> myCPU_instruction_master_agent:av_writedata
	wire    [2:0] mycpu_instruction_master_translator_avalon_universal_master_0_burstcount;                  // myCPU_instruction_master_translator:uav_burstcount -> myCPU_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                        // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                            // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                              // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                         // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [20:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire    [7:0] character_lcd_0_avalon_lcd_slave_agent_m0_readdata;                                        // character_lcd_0_avalon_lcd_slave_translator:uav_readdata -> character_lcd_0_avalon_lcd_slave_agent:m0_readdata
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_waitrequest;                                     // character_lcd_0_avalon_lcd_slave_translator:uav_waitrequest -> character_lcd_0_avalon_lcd_slave_agent:m0_waitrequest
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_debugaccess;                                     // character_lcd_0_avalon_lcd_slave_agent:m0_debugaccess -> character_lcd_0_avalon_lcd_slave_translator:uav_debugaccess
	wire   [27:0] character_lcd_0_avalon_lcd_slave_agent_m0_address;                                         // character_lcd_0_avalon_lcd_slave_agent:m0_address -> character_lcd_0_avalon_lcd_slave_translator:uav_address
	wire    [0:0] character_lcd_0_avalon_lcd_slave_agent_m0_byteenable;                                      // character_lcd_0_avalon_lcd_slave_agent:m0_byteenable -> character_lcd_0_avalon_lcd_slave_translator:uav_byteenable
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_read;                                            // character_lcd_0_avalon_lcd_slave_agent:m0_read -> character_lcd_0_avalon_lcd_slave_translator:uav_read
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_readdatavalid;                                   // character_lcd_0_avalon_lcd_slave_translator:uav_readdatavalid -> character_lcd_0_avalon_lcd_slave_agent:m0_readdatavalid
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_lock;                                            // character_lcd_0_avalon_lcd_slave_agent:m0_lock -> character_lcd_0_avalon_lcd_slave_translator:uav_lock
	wire    [7:0] character_lcd_0_avalon_lcd_slave_agent_m0_writedata;                                       // character_lcd_0_avalon_lcd_slave_agent:m0_writedata -> character_lcd_0_avalon_lcd_slave_translator:uav_writedata
	wire          character_lcd_0_avalon_lcd_slave_agent_m0_write;                                           // character_lcd_0_avalon_lcd_slave_agent:m0_write -> character_lcd_0_avalon_lcd_slave_translator:uav_write
	wire    [0:0] character_lcd_0_avalon_lcd_slave_agent_m0_burstcount;                                      // character_lcd_0_avalon_lcd_slave_agent:m0_burstcount -> character_lcd_0_avalon_lcd_slave_translator:uav_burstcount
	wire          character_lcd_0_avalon_lcd_slave_agent_rf_source_valid;                                    // character_lcd_0_avalon_lcd_slave_agent:rf_source_valid -> character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:in_valid
	wire   [81:0] character_lcd_0_avalon_lcd_slave_agent_rf_source_data;                                     // character_lcd_0_avalon_lcd_slave_agent:rf_source_data -> character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:in_data
	wire          character_lcd_0_avalon_lcd_slave_agent_rf_source_ready;                                    // character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:in_ready -> character_lcd_0_avalon_lcd_slave_agent:rf_source_ready
	wire          character_lcd_0_avalon_lcd_slave_agent_rf_source_startofpacket;                            // character_lcd_0_avalon_lcd_slave_agent:rf_source_startofpacket -> character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:in_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_agent_rf_source_endofpacket;                              // character_lcd_0_avalon_lcd_slave_agent:rf_source_endofpacket -> character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:in_endofpacket
	wire          character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_valid;                                 // character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:out_valid -> character_lcd_0_avalon_lcd_slave_agent:rf_sink_valid
	wire   [81:0] character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_data;                                  // character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:out_data -> character_lcd_0_avalon_lcd_slave_agent:rf_sink_data
	wire          character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_ready;                                 // character_lcd_0_avalon_lcd_slave_agent:rf_sink_ready -> character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:out_ready
	wire          character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket;                         // character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:out_startofpacket -> character_lcd_0_avalon_lcd_slave_agent:rf_sink_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket;                           // character_lcd_0_avalon_lcd_slave_agent_rsp_fifo:out_endofpacket -> character_lcd_0_avalon_lcd_slave_agent:rf_sink_endofpacket
	wire   [31:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata;                // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_readdata -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_readdata
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest;             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_waitrequest -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_waitrequest
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess;             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_debugaccess -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_debugaccess
	wire   [27:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address;                 // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_address -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_address
	wire    [3:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable;              // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_byteenable -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_byteenable
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read;                    // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_read -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_read
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid;           // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_readdatavalid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_readdatavalid
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock;                    // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_lock -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_lock
	wire   [31:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata;               // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_writedata -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_writedata
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write;                   // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_write -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_write
	wire    [2:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount;              // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:m0_burstcount -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_translator:uav_burstcount
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid;            // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_valid
	wire  [108:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data;             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready;            // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket;    // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket;      // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_source_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:in_endofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid;         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_valid
	wire  [108:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data;          // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready;         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket; // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket;   // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent_rsp_fifo:out_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                     // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [20:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                     // sysID_control_slave_translator:uav_readdata -> sysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                  // sysID_control_slave_translator:uav_waitrequest -> sysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                  // sysID_control_slave_agent:m0_debugaccess -> sysID_control_slave_translator:uav_debugaccess
	wire   [27:0] sysid_control_slave_agent_m0_address;                                                      // sysID_control_slave_agent:m0_address -> sysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                   // sysID_control_slave_agent:m0_byteenable -> sysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                         // sysID_control_slave_agent:m0_read -> sysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                // sysID_control_slave_translator:uav_readdatavalid -> sysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                         // sysID_control_slave_agent:m0_lock -> sysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                    // sysID_control_slave_agent:m0_writedata -> sysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                        // sysID_control_slave_agent:m0_write -> sysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                   // sysID_control_slave_agent:m0_burstcount -> sysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                 // sysID_control_slave_agent:rf_source_valid -> sysID_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] sysid_control_slave_agent_rf_source_data;                                                  // sysID_control_slave_agent:rf_source_data -> sysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                 // sysID_control_slave_agent_rsp_fifo:in_ready -> sysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                         // sysID_control_slave_agent:rf_source_startofpacket -> sysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                           // sysID_control_slave_agent:rf_source_endofpacket -> sysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                              // sysID_control_slave_agent_rsp_fifo:out_valid -> sysID_control_slave_agent:rf_sink_valid
	wire  [108:0] sysid_control_slave_agent_rsp_fifo_out_data;                                               // sysID_control_slave_agent_rsp_fifo:out_data -> sysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                              // sysID_control_slave_agent:rf_sink_ready -> sysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                      // sysID_control_slave_agent_rsp_fifo:out_startofpacket -> sysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                        // sysID_control_slave_agent_rsp_fifo:out_endofpacket -> sysID_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> sysID_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> sysID_control_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                     // sysID_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [20:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> sysID_control_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> sysID_control_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> sysID_control_slave_agent:cp_endofpacket
	wire   [31:0] mycpu_debug_mem_slave_agent_m0_readdata;                                                   // myCPU_debug_mem_slave_translator:uav_readdata -> myCPU_debug_mem_slave_agent:m0_readdata
	wire          mycpu_debug_mem_slave_agent_m0_waitrequest;                                                // myCPU_debug_mem_slave_translator:uav_waitrequest -> myCPU_debug_mem_slave_agent:m0_waitrequest
	wire          mycpu_debug_mem_slave_agent_m0_debugaccess;                                                // myCPU_debug_mem_slave_agent:m0_debugaccess -> myCPU_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] mycpu_debug_mem_slave_agent_m0_address;                                                    // myCPU_debug_mem_slave_agent:m0_address -> myCPU_debug_mem_slave_translator:uav_address
	wire    [3:0] mycpu_debug_mem_slave_agent_m0_byteenable;                                                 // myCPU_debug_mem_slave_agent:m0_byteenable -> myCPU_debug_mem_slave_translator:uav_byteenable
	wire          mycpu_debug_mem_slave_agent_m0_read;                                                       // myCPU_debug_mem_slave_agent:m0_read -> myCPU_debug_mem_slave_translator:uav_read
	wire          mycpu_debug_mem_slave_agent_m0_readdatavalid;                                              // myCPU_debug_mem_slave_translator:uav_readdatavalid -> myCPU_debug_mem_slave_agent:m0_readdatavalid
	wire          mycpu_debug_mem_slave_agent_m0_lock;                                                       // myCPU_debug_mem_slave_agent:m0_lock -> myCPU_debug_mem_slave_translator:uav_lock
	wire   [31:0] mycpu_debug_mem_slave_agent_m0_writedata;                                                  // myCPU_debug_mem_slave_agent:m0_writedata -> myCPU_debug_mem_slave_translator:uav_writedata
	wire          mycpu_debug_mem_slave_agent_m0_write;                                                      // myCPU_debug_mem_slave_agent:m0_write -> myCPU_debug_mem_slave_translator:uav_write
	wire    [2:0] mycpu_debug_mem_slave_agent_m0_burstcount;                                                 // myCPU_debug_mem_slave_agent:m0_burstcount -> myCPU_debug_mem_slave_translator:uav_burstcount
	wire          mycpu_debug_mem_slave_agent_rf_source_valid;                                               // myCPU_debug_mem_slave_agent:rf_source_valid -> myCPU_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] mycpu_debug_mem_slave_agent_rf_source_data;                                                // myCPU_debug_mem_slave_agent:rf_source_data -> myCPU_debug_mem_slave_agent_rsp_fifo:in_data
	wire          mycpu_debug_mem_slave_agent_rf_source_ready;                                               // myCPU_debug_mem_slave_agent_rsp_fifo:in_ready -> myCPU_debug_mem_slave_agent:rf_source_ready
	wire          mycpu_debug_mem_slave_agent_rf_source_startofpacket;                                       // myCPU_debug_mem_slave_agent:rf_source_startofpacket -> myCPU_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          mycpu_debug_mem_slave_agent_rf_source_endofpacket;                                         // myCPU_debug_mem_slave_agent:rf_source_endofpacket -> myCPU_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          mycpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                            // myCPU_debug_mem_slave_agent_rsp_fifo:out_valid -> myCPU_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] mycpu_debug_mem_slave_agent_rsp_fifo_out_data;                                             // myCPU_debug_mem_slave_agent_rsp_fifo:out_data -> myCPU_debug_mem_slave_agent:rf_sink_data
	wire          mycpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                            // myCPU_debug_mem_slave_agent:rf_sink_ready -> myCPU_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          mycpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                    // myCPU_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> myCPU_debug_mem_slave_agent:rf_sink_startofpacket
	wire          mycpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                      // myCPU_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> myCPU_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> myCPU_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> myCPU_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                     // myCPU_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [20:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> myCPU_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> myCPU_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> myCPU_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] system_clock_timer_s1_agent_m0_readdata;                                                   // System_Clock_Timer_s1_translator:uav_readdata -> System_Clock_Timer_s1_agent:m0_readdata
	wire          system_clock_timer_s1_agent_m0_waitrequest;                                                // System_Clock_Timer_s1_translator:uav_waitrequest -> System_Clock_Timer_s1_agent:m0_waitrequest
	wire          system_clock_timer_s1_agent_m0_debugaccess;                                                // System_Clock_Timer_s1_agent:m0_debugaccess -> System_Clock_Timer_s1_translator:uav_debugaccess
	wire   [27:0] system_clock_timer_s1_agent_m0_address;                                                    // System_Clock_Timer_s1_agent:m0_address -> System_Clock_Timer_s1_translator:uav_address
	wire    [3:0] system_clock_timer_s1_agent_m0_byteenable;                                                 // System_Clock_Timer_s1_agent:m0_byteenable -> System_Clock_Timer_s1_translator:uav_byteenable
	wire          system_clock_timer_s1_agent_m0_read;                                                       // System_Clock_Timer_s1_agent:m0_read -> System_Clock_Timer_s1_translator:uav_read
	wire          system_clock_timer_s1_agent_m0_readdatavalid;                                              // System_Clock_Timer_s1_translator:uav_readdatavalid -> System_Clock_Timer_s1_agent:m0_readdatavalid
	wire          system_clock_timer_s1_agent_m0_lock;                                                       // System_Clock_Timer_s1_agent:m0_lock -> System_Clock_Timer_s1_translator:uav_lock
	wire   [31:0] system_clock_timer_s1_agent_m0_writedata;                                                  // System_Clock_Timer_s1_agent:m0_writedata -> System_Clock_Timer_s1_translator:uav_writedata
	wire          system_clock_timer_s1_agent_m0_write;                                                      // System_Clock_Timer_s1_agent:m0_write -> System_Clock_Timer_s1_translator:uav_write
	wire    [2:0] system_clock_timer_s1_agent_m0_burstcount;                                                 // System_Clock_Timer_s1_agent:m0_burstcount -> System_Clock_Timer_s1_translator:uav_burstcount
	wire          system_clock_timer_s1_agent_rf_source_valid;                                               // System_Clock_Timer_s1_agent:rf_source_valid -> System_Clock_Timer_s1_agent_rsp_fifo:in_valid
	wire  [108:0] system_clock_timer_s1_agent_rf_source_data;                                                // System_Clock_Timer_s1_agent:rf_source_data -> System_Clock_Timer_s1_agent_rsp_fifo:in_data
	wire          system_clock_timer_s1_agent_rf_source_ready;                                               // System_Clock_Timer_s1_agent_rsp_fifo:in_ready -> System_Clock_Timer_s1_agent:rf_source_ready
	wire          system_clock_timer_s1_agent_rf_source_startofpacket;                                       // System_Clock_Timer_s1_agent:rf_source_startofpacket -> System_Clock_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          system_clock_timer_s1_agent_rf_source_endofpacket;                                         // System_Clock_Timer_s1_agent:rf_source_endofpacket -> System_Clock_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          system_clock_timer_s1_agent_rsp_fifo_out_valid;                                            // System_Clock_Timer_s1_agent_rsp_fifo:out_valid -> System_Clock_Timer_s1_agent:rf_sink_valid
	wire  [108:0] system_clock_timer_s1_agent_rsp_fifo_out_data;                                             // System_Clock_Timer_s1_agent_rsp_fifo:out_data -> System_Clock_Timer_s1_agent:rf_sink_data
	wire          system_clock_timer_s1_agent_rsp_fifo_out_ready;                                            // System_Clock_Timer_s1_agent:rf_sink_ready -> System_Clock_Timer_s1_agent_rsp_fifo:out_ready
	wire          system_clock_timer_s1_agent_rsp_fifo_out_startofpacket;                                    // System_Clock_Timer_s1_agent_rsp_fifo:out_startofpacket -> System_Clock_Timer_s1_agent:rf_sink_startofpacket
	wire          system_clock_timer_s1_agent_rsp_fifo_out_endofpacket;                                      // System_Clock_Timer_s1_agent_rsp_fifo:out_endofpacket -> System_Clock_Timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> System_Clock_Timer_s1_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> System_Clock_Timer_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                     // System_Clock_Timer_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [20:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> System_Clock_Timer_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> System_Clock_Timer_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> System_Clock_Timer_s1_agent:cp_endofpacket
	wire   [31:0] high_res_timer_s1_agent_m0_readdata;                                                       // High_Res_Timer_s1_translator:uav_readdata -> High_Res_Timer_s1_agent:m0_readdata
	wire          high_res_timer_s1_agent_m0_waitrequest;                                                    // High_Res_Timer_s1_translator:uav_waitrequest -> High_Res_Timer_s1_agent:m0_waitrequest
	wire          high_res_timer_s1_agent_m0_debugaccess;                                                    // High_Res_Timer_s1_agent:m0_debugaccess -> High_Res_Timer_s1_translator:uav_debugaccess
	wire   [27:0] high_res_timer_s1_agent_m0_address;                                                        // High_Res_Timer_s1_agent:m0_address -> High_Res_Timer_s1_translator:uav_address
	wire    [3:0] high_res_timer_s1_agent_m0_byteenable;                                                     // High_Res_Timer_s1_agent:m0_byteenable -> High_Res_Timer_s1_translator:uav_byteenable
	wire          high_res_timer_s1_agent_m0_read;                                                           // High_Res_Timer_s1_agent:m0_read -> High_Res_Timer_s1_translator:uav_read
	wire          high_res_timer_s1_agent_m0_readdatavalid;                                                  // High_Res_Timer_s1_translator:uav_readdatavalid -> High_Res_Timer_s1_agent:m0_readdatavalid
	wire          high_res_timer_s1_agent_m0_lock;                                                           // High_Res_Timer_s1_agent:m0_lock -> High_Res_Timer_s1_translator:uav_lock
	wire   [31:0] high_res_timer_s1_agent_m0_writedata;                                                      // High_Res_Timer_s1_agent:m0_writedata -> High_Res_Timer_s1_translator:uav_writedata
	wire          high_res_timer_s1_agent_m0_write;                                                          // High_Res_Timer_s1_agent:m0_write -> High_Res_Timer_s1_translator:uav_write
	wire    [2:0] high_res_timer_s1_agent_m0_burstcount;                                                     // High_Res_Timer_s1_agent:m0_burstcount -> High_Res_Timer_s1_translator:uav_burstcount
	wire          high_res_timer_s1_agent_rf_source_valid;                                                   // High_Res_Timer_s1_agent:rf_source_valid -> High_Res_Timer_s1_agent_rsp_fifo:in_valid
	wire  [108:0] high_res_timer_s1_agent_rf_source_data;                                                    // High_Res_Timer_s1_agent:rf_source_data -> High_Res_Timer_s1_agent_rsp_fifo:in_data
	wire          high_res_timer_s1_agent_rf_source_ready;                                                   // High_Res_Timer_s1_agent_rsp_fifo:in_ready -> High_Res_Timer_s1_agent:rf_source_ready
	wire          high_res_timer_s1_agent_rf_source_startofpacket;                                           // High_Res_Timer_s1_agent:rf_source_startofpacket -> High_Res_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          high_res_timer_s1_agent_rf_source_endofpacket;                                             // High_Res_Timer_s1_agent:rf_source_endofpacket -> High_Res_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          high_res_timer_s1_agent_rsp_fifo_out_valid;                                                // High_Res_Timer_s1_agent_rsp_fifo:out_valid -> High_Res_Timer_s1_agent:rf_sink_valid
	wire  [108:0] high_res_timer_s1_agent_rsp_fifo_out_data;                                                 // High_Res_Timer_s1_agent_rsp_fifo:out_data -> High_Res_Timer_s1_agent:rf_sink_data
	wire          high_res_timer_s1_agent_rsp_fifo_out_ready;                                                // High_Res_Timer_s1_agent:rf_sink_ready -> High_Res_Timer_s1_agent_rsp_fifo:out_ready
	wire          high_res_timer_s1_agent_rsp_fifo_out_startofpacket;                                        // High_Res_Timer_s1_agent_rsp_fifo:out_startofpacket -> High_Res_Timer_s1_agent:rf_sink_startofpacket
	wire          high_res_timer_s1_agent_rsp_fifo_out_endofpacket;                                          // High_Res_Timer_s1_agent_rsp_fifo:out_endofpacket -> High_Res_Timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> High_Res_Timer_s1_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> High_Res_Timer_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                     // High_Res_Timer_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [20:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> High_Res_Timer_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> High_Res_Timer_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> High_Res_Timer_s1_agent:cp_endofpacket
	wire   [31:0] switches_s1_agent_m0_readdata;                                                             // Switches_s1_translator:uav_readdata -> Switches_s1_agent:m0_readdata
	wire          switches_s1_agent_m0_waitrequest;                                                          // Switches_s1_translator:uav_waitrequest -> Switches_s1_agent:m0_waitrequest
	wire          switches_s1_agent_m0_debugaccess;                                                          // Switches_s1_agent:m0_debugaccess -> Switches_s1_translator:uav_debugaccess
	wire   [27:0] switches_s1_agent_m0_address;                                                              // Switches_s1_agent:m0_address -> Switches_s1_translator:uav_address
	wire    [3:0] switches_s1_agent_m0_byteenable;                                                           // Switches_s1_agent:m0_byteenable -> Switches_s1_translator:uav_byteenable
	wire          switches_s1_agent_m0_read;                                                                 // Switches_s1_agent:m0_read -> Switches_s1_translator:uav_read
	wire          switches_s1_agent_m0_readdatavalid;                                                        // Switches_s1_translator:uav_readdatavalid -> Switches_s1_agent:m0_readdatavalid
	wire          switches_s1_agent_m0_lock;                                                                 // Switches_s1_agent:m0_lock -> Switches_s1_translator:uav_lock
	wire   [31:0] switches_s1_agent_m0_writedata;                                                            // Switches_s1_agent:m0_writedata -> Switches_s1_translator:uav_writedata
	wire          switches_s1_agent_m0_write;                                                                // Switches_s1_agent:m0_write -> Switches_s1_translator:uav_write
	wire    [2:0] switches_s1_agent_m0_burstcount;                                                           // Switches_s1_agent:m0_burstcount -> Switches_s1_translator:uav_burstcount
	wire          switches_s1_agent_rf_source_valid;                                                         // Switches_s1_agent:rf_source_valid -> Switches_s1_agent_rsp_fifo:in_valid
	wire  [108:0] switches_s1_agent_rf_source_data;                                                          // Switches_s1_agent:rf_source_data -> Switches_s1_agent_rsp_fifo:in_data
	wire          switches_s1_agent_rf_source_ready;                                                         // Switches_s1_agent_rsp_fifo:in_ready -> Switches_s1_agent:rf_source_ready
	wire          switches_s1_agent_rf_source_startofpacket;                                                 // Switches_s1_agent:rf_source_startofpacket -> Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          switches_s1_agent_rf_source_endofpacket;                                                   // Switches_s1_agent:rf_source_endofpacket -> Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_agent_rsp_fifo_out_valid;                                                      // Switches_s1_agent_rsp_fifo:out_valid -> Switches_s1_agent:rf_sink_valid
	wire  [108:0] switches_s1_agent_rsp_fifo_out_data;                                                       // Switches_s1_agent_rsp_fifo:out_data -> Switches_s1_agent:rf_sink_data
	wire          switches_s1_agent_rsp_fifo_out_ready;                                                      // Switches_s1_agent:rf_sink_ready -> Switches_s1_agent_rsp_fifo:out_ready
	wire          switches_s1_agent_rsp_fifo_out_startofpacket;                                              // Switches_s1_agent_rsp_fifo:out_startofpacket -> Switches_s1_agent:rf_sink_startofpacket
	wire          switches_s1_agent_rsp_fifo_out_endofpacket;                                                // Switches_s1_agent_rsp_fifo:out_endofpacket -> Switches_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> Switches_s1_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> Switches_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                     // Switches_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [20:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> Switches_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> Switches_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> Switches_s1_agent:cp_endofpacket
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                 // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                              // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                              // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [27:0] leds_s1_agent_m0_address;                                                                  // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                               // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                     // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                            // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                     // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                                    // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                               // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                             // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [108:0] leds_s1_agent_rf_source_data;                                                              // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                             // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                     // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                       // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                          // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [108:0] leds_s1_agent_rsp_fifo_out_data;                                                           // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                          // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                  // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                    // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> LEDs_s1_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> LEDs_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                     // LEDs_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [20:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> LEDs_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire   [31:0] hex_0_s1_agent_m0_readdata;                                                                // HEX_0_s1_translator:uav_readdata -> HEX_0_s1_agent:m0_readdata
	wire          hex_0_s1_agent_m0_waitrequest;                                                             // HEX_0_s1_translator:uav_waitrequest -> HEX_0_s1_agent:m0_waitrequest
	wire          hex_0_s1_agent_m0_debugaccess;                                                             // HEX_0_s1_agent:m0_debugaccess -> HEX_0_s1_translator:uav_debugaccess
	wire   [27:0] hex_0_s1_agent_m0_address;                                                                 // HEX_0_s1_agent:m0_address -> HEX_0_s1_translator:uav_address
	wire    [3:0] hex_0_s1_agent_m0_byteenable;                                                              // HEX_0_s1_agent:m0_byteenable -> HEX_0_s1_translator:uav_byteenable
	wire          hex_0_s1_agent_m0_read;                                                                    // HEX_0_s1_agent:m0_read -> HEX_0_s1_translator:uav_read
	wire          hex_0_s1_agent_m0_readdatavalid;                                                           // HEX_0_s1_translator:uav_readdatavalid -> HEX_0_s1_agent:m0_readdatavalid
	wire          hex_0_s1_agent_m0_lock;                                                                    // HEX_0_s1_agent:m0_lock -> HEX_0_s1_translator:uav_lock
	wire   [31:0] hex_0_s1_agent_m0_writedata;                                                               // HEX_0_s1_agent:m0_writedata -> HEX_0_s1_translator:uav_writedata
	wire          hex_0_s1_agent_m0_write;                                                                   // HEX_0_s1_agent:m0_write -> HEX_0_s1_translator:uav_write
	wire    [2:0] hex_0_s1_agent_m0_burstcount;                                                              // HEX_0_s1_agent:m0_burstcount -> HEX_0_s1_translator:uav_burstcount
	wire          hex_0_s1_agent_rf_source_valid;                                                            // HEX_0_s1_agent:rf_source_valid -> HEX_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_0_s1_agent_rf_source_data;                                                             // HEX_0_s1_agent:rf_source_data -> HEX_0_s1_agent_rsp_fifo:in_data
	wire          hex_0_s1_agent_rf_source_ready;                                                            // HEX_0_s1_agent_rsp_fifo:in_ready -> HEX_0_s1_agent:rf_source_ready
	wire          hex_0_s1_agent_rf_source_startofpacket;                                                    // HEX_0_s1_agent:rf_source_startofpacket -> HEX_0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_0_s1_agent_rf_source_endofpacket;                                                      // HEX_0_s1_agent:rf_source_endofpacket -> HEX_0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_0_s1_agent_rsp_fifo_out_valid;                                                         // HEX_0_s1_agent_rsp_fifo:out_valid -> HEX_0_s1_agent:rf_sink_valid
	wire  [108:0] hex_0_s1_agent_rsp_fifo_out_data;                                                          // HEX_0_s1_agent_rsp_fifo:out_data -> HEX_0_s1_agent:rf_sink_data
	wire          hex_0_s1_agent_rsp_fifo_out_ready;                                                         // HEX_0_s1_agent:rf_sink_ready -> HEX_0_s1_agent_rsp_fifo:out_ready
	wire          hex_0_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_0_s1_agent_rsp_fifo:out_startofpacket -> HEX_0_s1_agent:rf_sink_startofpacket
	wire          hex_0_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_0_s1_agent_rsp_fifo:out_endofpacket -> HEX_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> HEX_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> HEX_0_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                     // HEX_0_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [20:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> HEX_0_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> HEX_0_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> HEX_0_s1_agent:cp_endofpacket
	wire   [31:0] hex_1_s1_agent_m0_readdata;                                                                // HEX_1_s1_translator:uav_readdata -> HEX_1_s1_agent:m0_readdata
	wire          hex_1_s1_agent_m0_waitrequest;                                                             // HEX_1_s1_translator:uav_waitrequest -> HEX_1_s1_agent:m0_waitrequest
	wire          hex_1_s1_agent_m0_debugaccess;                                                             // HEX_1_s1_agent:m0_debugaccess -> HEX_1_s1_translator:uav_debugaccess
	wire   [27:0] hex_1_s1_agent_m0_address;                                                                 // HEX_1_s1_agent:m0_address -> HEX_1_s1_translator:uav_address
	wire    [3:0] hex_1_s1_agent_m0_byteenable;                                                              // HEX_1_s1_agent:m0_byteenable -> HEX_1_s1_translator:uav_byteenable
	wire          hex_1_s1_agent_m0_read;                                                                    // HEX_1_s1_agent:m0_read -> HEX_1_s1_translator:uav_read
	wire          hex_1_s1_agent_m0_readdatavalid;                                                           // HEX_1_s1_translator:uav_readdatavalid -> HEX_1_s1_agent:m0_readdatavalid
	wire          hex_1_s1_agent_m0_lock;                                                                    // HEX_1_s1_agent:m0_lock -> HEX_1_s1_translator:uav_lock
	wire   [31:0] hex_1_s1_agent_m0_writedata;                                                               // HEX_1_s1_agent:m0_writedata -> HEX_1_s1_translator:uav_writedata
	wire          hex_1_s1_agent_m0_write;                                                                   // HEX_1_s1_agent:m0_write -> HEX_1_s1_translator:uav_write
	wire    [2:0] hex_1_s1_agent_m0_burstcount;                                                              // HEX_1_s1_agent:m0_burstcount -> HEX_1_s1_translator:uav_burstcount
	wire          hex_1_s1_agent_rf_source_valid;                                                            // HEX_1_s1_agent:rf_source_valid -> HEX_1_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_1_s1_agent_rf_source_data;                                                             // HEX_1_s1_agent:rf_source_data -> HEX_1_s1_agent_rsp_fifo:in_data
	wire          hex_1_s1_agent_rf_source_ready;                                                            // HEX_1_s1_agent_rsp_fifo:in_ready -> HEX_1_s1_agent:rf_source_ready
	wire          hex_1_s1_agent_rf_source_startofpacket;                                                    // HEX_1_s1_agent:rf_source_startofpacket -> HEX_1_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_1_s1_agent_rf_source_endofpacket;                                                      // HEX_1_s1_agent:rf_source_endofpacket -> HEX_1_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_1_s1_agent_rsp_fifo_out_valid;                                                         // HEX_1_s1_agent_rsp_fifo:out_valid -> HEX_1_s1_agent:rf_sink_valid
	wire  [108:0] hex_1_s1_agent_rsp_fifo_out_data;                                                          // HEX_1_s1_agent_rsp_fifo:out_data -> HEX_1_s1_agent:rf_sink_data
	wire          hex_1_s1_agent_rsp_fifo_out_ready;                                                         // HEX_1_s1_agent:rf_sink_ready -> HEX_1_s1_agent_rsp_fifo:out_ready
	wire          hex_1_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_1_s1_agent_rsp_fifo:out_startofpacket -> HEX_1_s1_agent:rf_sink_startofpacket
	wire          hex_1_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_1_s1_agent_rsp_fifo:out_endofpacket -> HEX_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                     // cmd_mux_010:src_valid -> HEX_1_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                                      // cmd_mux_010:src_data -> HEX_1_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                     // HEX_1_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [20:0] cmd_mux_010_src_channel;                                                                   // cmd_mux_010:src_channel -> HEX_1_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                             // cmd_mux_010:src_startofpacket -> HEX_1_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                               // cmd_mux_010:src_endofpacket -> HEX_1_s1_agent:cp_endofpacket
	wire   [31:0] hex_2_s1_agent_m0_readdata;                                                                // HEX_2_s1_translator:uav_readdata -> HEX_2_s1_agent:m0_readdata
	wire          hex_2_s1_agent_m0_waitrequest;                                                             // HEX_2_s1_translator:uav_waitrequest -> HEX_2_s1_agent:m0_waitrequest
	wire          hex_2_s1_agent_m0_debugaccess;                                                             // HEX_2_s1_agent:m0_debugaccess -> HEX_2_s1_translator:uav_debugaccess
	wire   [27:0] hex_2_s1_agent_m0_address;                                                                 // HEX_2_s1_agent:m0_address -> HEX_2_s1_translator:uav_address
	wire    [3:0] hex_2_s1_agent_m0_byteenable;                                                              // HEX_2_s1_agent:m0_byteenable -> HEX_2_s1_translator:uav_byteenable
	wire          hex_2_s1_agent_m0_read;                                                                    // HEX_2_s1_agent:m0_read -> HEX_2_s1_translator:uav_read
	wire          hex_2_s1_agent_m0_readdatavalid;                                                           // HEX_2_s1_translator:uav_readdatavalid -> HEX_2_s1_agent:m0_readdatavalid
	wire          hex_2_s1_agent_m0_lock;                                                                    // HEX_2_s1_agent:m0_lock -> HEX_2_s1_translator:uav_lock
	wire   [31:0] hex_2_s1_agent_m0_writedata;                                                               // HEX_2_s1_agent:m0_writedata -> HEX_2_s1_translator:uav_writedata
	wire          hex_2_s1_agent_m0_write;                                                                   // HEX_2_s1_agent:m0_write -> HEX_2_s1_translator:uav_write
	wire    [2:0] hex_2_s1_agent_m0_burstcount;                                                              // HEX_2_s1_agent:m0_burstcount -> HEX_2_s1_translator:uav_burstcount
	wire          hex_2_s1_agent_rf_source_valid;                                                            // HEX_2_s1_agent:rf_source_valid -> HEX_2_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_2_s1_agent_rf_source_data;                                                             // HEX_2_s1_agent:rf_source_data -> HEX_2_s1_agent_rsp_fifo:in_data
	wire          hex_2_s1_agent_rf_source_ready;                                                            // HEX_2_s1_agent_rsp_fifo:in_ready -> HEX_2_s1_agent:rf_source_ready
	wire          hex_2_s1_agent_rf_source_startofpacket;                                                    // HEX_2_s1_agent:rf_source_startofpacket -> HEX_2_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_2_s1_agent_rf_source_endofpacket;                                                      // HEX_2_s1_agent:rf_source_endofpacket -> HEX_2_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_2_s1_agent_rsp_fifo_out_valid;                                                         // HEX_2_s1_agent_rsp_fifo:out_valid -> HEX_2_s1_agent:rf_sink_valid
	wire  [108:0] hex_2_s1_agent_rsp_fifo_out_data;                                                          // HEX_2_s1_agent_rsp_fifo:out_data -> HEX_2_s1_agent:rf_sink_data
	wire          hex_2_s1_agent_rsp_fifo_out_ready;                                                         // HEX_2_s1_agent:rf_sink_ready -> HEX_2_s1_agent_rsp_fifo:out_ready
	wire          hex_2_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_2_s1_agent_rsp_fifo:out_startofpacket -> HEX_2_s1_agent:rf_sink_startofpacket
	wire          hex_2_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_2_s1_agent_rsp_fifo:out_endofpacket -> HEX_2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                     // cmd_mux_011:src_valid -> HEX_2_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                                      // cmd_mux_011:src_data -> HEX_2_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                     // HEX_2_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [20:0] cmd_mux_011_src_channel;                                                                   // cmd_mux_011:src_channel -> HEX_2_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                             // cmd_mux_011:src_startofpacket -> HEX_2_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                               // cmd_mux_011:src_endofpacket -> HEX_2_s1_agent:cp_endofpacket
	wire   [31:0] hex_3_s1_agent_m0_readdata;                                                                // HEX_3_s1_translator:uav_readdata -> HEX_3_s1_agent:m0_readdata
	wire          hex_3_s1_agent_m0_waitrequest;                                                             // HEX_3_s1_translator:uav_waitrequest -> HEX_3_s1_agent:m0_waitrequest
	wire          hex_3_s1_agent_m0_debugaccess;                                                             // HEX_3_s1_agent:m0_debugaccess -> HEX_3_s1_translator:uav_debugaccess
	wire   [27:0] hex_3_s1_agent_m0_address;                                                                 // HEX_3_s1_agent:m0_address -> HEX_3_s1_translator:uav_address
	wire    [3:0] hex_3_s1_agent_m0_byteenable;                                                              // HEX_3_s1_agent:m0_byteenable -> HEX_3_s1_translator:uav_byteenable
	wire          hex_3_s1_agent_m0_read;                                                                    // HEX_3_s1_agent:m0_read -> HEX_3_s1_translator:uav_read
	wire          hex_3_s1_agent_m0_readdatavalid;                                                           // HEX_3_s1_translator:uav_readdatavalid -> HEX_3_s1_agent:m0_readdatavalid
	wire          hex_3_s1_agent_m0_lock;                                                                    // HEX_3_s1_agent:m0_lock -> HEX_3_s1_translator:uav_lock
	wire   [31:0] hex_3_s1_agent_m0_writedata;                                                               // HEX_3_s1_agent:m0_writedata -> HEX_3_s1_translator:uav_writedata
	wire          hex_3_s1_agent_m0_write;                                                                   // HEX_3_s1_agent:m0_write -> HEX_3_s1_translator:uav_write
	wire    [2:0] hex_3_s1_agent_m0_burstcount;                                                              // HEX_3_s1_agent:m0_burstcount -> HEX_3_s1_translator:uav_burstcount
	wire          hex_3_s1_agent_rf_source_valid;                                                            // HEX_3_s1_agent:rf_source_valid -> HEX_3_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_3_s1_agent_rf_source_data;                                                             // HEX_3_s1_agent:rf_source_data -> HEX_3_s1_agent_rsp_fifo:in_data
	wire          hex_3_s1_agent_rf_source_ready;                                                            // HEX_3_s1_agent_rsp_fifo:in_ready -> HEX_3_s1_agent:rf_source_ready
	wire          hex_3_s1_agent_rf_source_startofpacket;                                                    // HEX_3_s1_agent:rf_source_startofpacket -> HEX_3_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_3_s1_agent_rf_source_endofpacket;                                                      // HEX_3_s1_agent:rf_source_endofpacket -> HEX_3_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_3_s1_agent_rsp_fifo_out_valid;                                                         // HEX_3_s1_agent_rsp_fifo:out_valid -> HEX_3_s1_agent:rf_sink_valid
	wire  [108:0] hex_3_s1_agent_rsp_fifo_out_data;                                                          // HEX_3_s1_agent_rsp_fifo:out_data -> HEX_3_s1_agent:rf_sink_data
	wire          hex_3_s1_agent_rsp_fifo_out_ready;                                                         // HEX_3_s1_agent:rf_sink_ready -> HEX_3_s1_agent_rsp_fifo:out_ready
	wire          hex_3_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_3_s1_agent_rsp_fifo:out_startofpacket -> HEX_3_s1_agent:rf_sink_startofpacket
	wire          hex_3_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_3_s1_agent_rsp_fifo:out_endofpacket -> HEX_3_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                     // cmd_mux_012:src_valid -> HEX_3_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                                      // cmd_mux_012:src_data -> HEX_3_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                     // HEX_3_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [20:0] cmd_mux_012_src_channel;                                                                   // cmd_mux_012:src_channel -> HEX_3_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                             // cmd_mux_012:src_startofpacket -> HEX_3_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                               // cmd_mux_012:src_endofpacket -> HEX_3_s1_agent:cp_endofpacket
	wire   [31:0] hex_4_s1_agent_m0_readdata;                                                                // HEX_4_s1_translator:uav_readdata -> HEX_4_s1_agent:m0_readdata
	wire          hex_4_s1_agent_m0_waitrequest;                                                             // HEX_4_s1_translator:uav_waitrequest -> HEX_4_s1_agent:m0_waitrequest
	wire          hex_4_s1_agent_m0_debugaccess;                                                             // HEX_4_s1_agent:m0_debugaccess -> HEX_4_s1_translator:uav_debugaccess
	wire   [27:0] hex_4_s1_agent_m0_address;                                                                 // HEX_4_s1_agent:m0_address -> HEX_4_s1_translator:uav_address
	wire    [3:0] hex_4_s1_agent_m0_byteenable;                                                              // HEX_4_s1_agent:m0_byteenable -> HEX_4_s1_translator:uav_byteenable
	wire          hex_4_s1_agent_m0_read;                                                                    // HEX_4_s1_agent:m0_read -> HEX_4_s1_translator:uav_read
	wire          hex_4_s1_agent_m0_readdatavalid;                                                           // HEX_4_s1_translator:uav_readdatavalid -> HEX_4_s1_agent:m0_readdatavalid
	wire          hex_4_s1_agent_m0_lock;                                                                    // HEX_4_s1_agent:m0_lock -> HEX_4_s1_translator:uav_lock
	wire   [31:0] hex_4_s1_agent_m0_writedata;                                                               // HEX_4_s1_agent:m0_writedata -> HEX_4_s1_translator:uav_writedata
	wire          hex_4_s1_agent_m0_write;                                                                   // HEX_4_s1_agent:m0_write -> HEX_4_s1_translator:uav_write
	wire    [2:0] hex_4_s1_agent_m0_burstcount;                                                              // HEX_4_s1_agent:m0_burstcount -> HEX_4_s1_translator:uav_burstcount
	wire          hex_4_s1_agent_rf_source_valid;                                                            // HEX_4_s1_agent:rf_source_valid -> HEX_4_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_4_s1_agent_rf_source_data;                                                             // HEX_4_s1_agent:rf_source_data -> HEX_4_s1_agent_rsp_fifo:in_data
	wire          hex_4_s1_agent_rf_source_ready;                                                            // HEX_4_s1_agent_rsp_fifo:in_ready -> HEX_4_s1_agent:rf_source_ready
	wire          hex_4_s1_agent_rf_source_startofpacket;                                                    // HEX_4_s1_agent:rf_source_startofpacket -> HEX_4_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_4_s1_agent_rf_source_endofpacket;                                                      // HEX_4_s1_agent:rf_source_endofpacket -> HEX_4_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_4_s1_agent_rsp_fifo_out_valid;                                                         // HEX_4_s1_agent_rsp_fifo:out_valid -> HEX_4_s1_agent:rf_sink_valid
	wire  [108:0] hex_4_s1_agent_rsp_fifo_out_data;                                                          // HEX_4_s1_agent_rsp_fifo:out_data -> HEX_4_s1_agent:rf_sink_data
	wire          hex_4_s1_agent_rsp_fifo_out_ready;                                                         // HEX_4_s1_agent:rf_sink_ready -> HEX_4_s1_agent_rsp_fifo:out_ready
	wire          hex_4_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_4_s1_agent_rsp_fifo:out_startofpacket -> HEX_4_s1_agent:rf_sink_startofpacket
	wire          hex_4_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_4_s1_agent_rsp_fifo:out_endofpacket -> HEX_4_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                     // cmd_mux_013:src_valid -> HEX_4_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                                      // cmd_mux_013:src_data -> HEX_4_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                     // HEX_4_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [20:0] cmd_mux_013_src_channel;                                                                   // cmd_mux_013:src_channel -> HEX_4_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                             // cmd_mux_013:src_startofpacket -> HEX_4_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                               // cmd_mux_013:src_endofpacket -> HEX_4_s1_agent:cp_endofpacket
	wire   [31:0] hex_5_s1_agent_m0_readdata;                                                                // HEX_5_s1_translator:uav_readdata -> HEX_5_s1_agent:m0_readdata
	wire          hex_5_s1_agent_m0_waitrequest;                                                             // HEX_5_s1_translator:uav_waitrequest -> HEX_5_s1_agent:m0_waitrequest
	wire          hex_5_s1_agent_m0_debugaccess;                                                             // HEX_5_s1_agent:m0_debugaccess -> HEX_5_s1_translator:uav_debugaccess
	wire   [27:0] hex_5_s1_agent_m0_address;                                                                 // HEX_5_s1_agent:m0_address -> HEX_5_s1_translator:uav_address
	wire    [3:0] hex_5_s1_agent_m0_byteenable;                                                              // HEX_5_s1_agent:m0_byteenable -> HEX_5_s1_translator:uav_byteenable
	wire          hex_5_s1_agent_m0_read;                                                                    // HEX_5_s1_agent:m0_read -> HEX_5_s1_translator:uav_read
	wire          hex_5_s1_agent_m0_readdatavalid;                                                           // HEX_5_s1_translator:uav_readdatavalid -> HEX_5_s1_agent:m0_readdatavalid
	wire          hex_5_s1_agent_m0_lock;                                                                    // HEX_5_s1_agent:m0_lock -> HEX_5_s1_translator:uav_lock
	wire   [31:0] hex_5_s1_agent_m0_writedata;                                                               // HEX_5_s1_agent:m0_writedata -> HEX_5_s1_translator:uav_writedata
	wire          hex_5_s1_agent_m0_write;                                                                   // HEX_5_s1_agent:m0_write -> HEX_5_s1_translator:uav_write
	wire    [2:0] hex_5_s1_agent_m0_burstcount;                                                              // HEX_5_s1_agent:m0_burstcount -> HEX_5_s1_translator:uav_burstcount
	wire          hex_5_s1_agent_rf_source_valid;                                                            // HEX_5_s1_agent:rf_source_valid -> HEX_5_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_5_s1_agent_rf_source_data;                                                             // HEX_5_s1_agent:rf_source_data -> HEX_5_s1_agent_rsp_fifo:in_data
	wire          hex_5_s1_agent_rf_source_ready;                                                            // HEX_5_s1_agent_rsp_fifo:in_ready -> HEX_5_s1_agent:rf_source_ready
	wire          hex_5_s1_agent_rf_source_startofpacket;                                                    // HEX_5_s1_agent:rf_source_startofpacket -> HEX_5_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_5_s1_agent_rf_source_endofpacket;                                                      // HEX_5_s1_agent:rf_source_endofpacket -> HEX_5_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_5_s1_agent_rsp_fifo_out_valid;                                                         // HEX_5_s1_agent_rsp_fifo:out_valid -> HEX_5_s1_agent:rf_sink_valid
	wire  [108:0] hex_5_s1_agent_rsp_fifo_out_data;                                                          // HEX_5_s1_agent_rsp_fifo:out_data -> HEX_5_s1_agent:rf_sink_data
	wire          hex_5_s1_agent_rsp_fifo_out_ready;                                                         // HEX_5_s1_agent:rf_sink_ready -> HEX_5_s1_agent_rsp_fifo:out_ready
	wire          hex_5_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_5_s1_agent_rsp_fifo:out_startofpacket -> HEX_5_s1_agent:rf_sink_startofpacket
	wire          hex_5_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_5_s1_agent_rsp_fifo:out_endofpacket -> HEX_5_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                     // cmd_mux_014:src_valid -> HEX_5_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                                      // cmd_mux_014:src_data -> HEX_5_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                     // HEX_5_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [20:0] cmd_mux_014_src_channel;                                                                   // cmd_mux_014:src_channel -> HEX_5_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                             // cmd_mux_014:src_startofpacket -> HEX_5_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                               // cmd_mux_014:src_endofpacket -> HEX_5_s1_agent:cp_endofpacket
	wire   [31:0] hex_6_s1_agent_m0_readdata;                                                                // HEX_6_s1_translator:uav_readdata -> HEX_6_s1_agent:m0_readdata
	wire          hex_6_s1_agent_m0_waitrequest;                                                             // HEX_6_s1_translator:uav_waitrequest -> HEX_6_s1_agent:m0_waitrequest
	wire          hex_6_s1_agent_m0_debugaccess;                                                             // HEX_6_s1_agent:m0_debugaccess -> HEX_6_s1_translator:uav_debugaccess
	wire   [27:0] hex_6_s1_agent_m0_address;                                                                 // HEX_6_s1_agent:m0_address -> HEX_6_s1_translator:uav_address
	wire    [3:0] hex_6_s1_agent_m0_byteenable;                                                              // HEX_6_s1_agent:m0_byteenable -> HEX_6_s1_translator:uav_byteenable
	wire          hex_6_s1_agent_m0_read;                                                                    // HEX_6_s1_agent:m0_read -> HEX_6_s1_translator:uav_read
	wire          hex_6_s1_agent_m0_readdatavalid;                                                           // HEX_6_s1_translator:uav_readdatavalid -> HEX_6_s1_agent:m0_readdatavalid
	wire          hex_6_s1_agent_m0_lock;                                                                    // HEX_6_s1_agent:m0_lock -> HEX_6_s1_translator:uav_lock
	wire   [31:0] hex_6_s1_agent_m0_writedata;                                                               // HEX_6_s1_agent:m0_writedata -> HEX_6_s1_translator:uav_writedata
	wire          hex_6_s1_agent_m0_write;                                                                   // HEX_6_s1_agent:m0_write -> HEX_6_s1_translator:uav_write
	wire    [2:0] hex_6_s1_agent_m0_burstcount;                                                              // HEX_6_s1_agent:m0_burstcount -> HEX_6_s1_translator:uav_burstcount
	wire          hex_6_s1_agent_rf_source_valid;                                                            // HEX_6_s1_agent:rf_source_valid -> HEX_6_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_6_s1_agent_rf_source_data;                                                             // HEX_6_s1_agent:rf_source_data -> HEX_6_s1_agent_rsp_fifo:in_data
	wire          hex_6_s1_agent_rf_source_ready;                                                            // HEX_6_s1_agent_rsp_fifo:in_ready -> HEX_6_s1_agent:rf_source_ready
	wire          hex_6_s1_agent_rf_source_startofpacket;                                                    // HEX_6_s1_agent:rf_source_startofpacket -> HEX_6_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_6_s1_agent_rf_source_endofpacket;                                                      // HEX_6_s1_agent:rf_source_endofpacket -> HEX_6_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_6_s1_agent_rsp_fifo_out_valid;                                                         // HEX_6_s1_agent_rsp_fifo:out_valid -> HEX_6_s1_agent:rf_sink_valid
	wire  [108:0] hex_6_s1_agent_rsp_fifo_out_data;                                                          // HEX_6_s1_agent_rsp_fifo:out_data -> HEX_6_s1_agent:rf_sink_data
	wire          hex_6_s1_agent_rsp_fifo_out_ready;                                                         // HEX_6_s1_agent:rf_sink_ready -> HEX_6_s1_agent_rsp_fifo:out_ready
	wire          hex_6_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_6_s1_agent_rsp_fifo:out_startofpacket -> HEX_6_s1_agent:rf_sink_startofpacket
	wire          hex_6_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_6_s1_agent_rsp_fifo:out_endofpacket -> HEX_6_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                     // cmd_mux_015:src_valid -> HEX_6_s1_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                                      // cmd_mux_015:src_data -> HEX_6_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                     // HEX_6_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [20:0] cmd_mux_015_src_channel;                                                                   // cmd_mux_015:src_channel -> HEX_6_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                             // cmd_mux_015:src_startofpacket -> HEX_6_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                               // cmd_mux_015:src_endofpacket -> HEX_6_s1_agent:cp_endofpacket
	wire   [31:0] hex_7_s1_agent_m0_readdata;                                                                // HEX_7_s1_translator:uav_readdata -> HEX_7_s1_agent:m0_readdata
	wire          hex_7_s1_agent_m0_waitrequest;                                                             // HEX_7_s1_translator:uav_waitrequest -> HEX_7_s1_agent:m0_waitrequest
	wire          hex_7_s1_agent_m0_debugaccess;                                                             // HEX_7_s1_agent:m0_debugaccess -> HEX_7_s1_translator:uav_debugaccess
	wire   [27:0] hex_7_s1_agent_m0_address;                                                                 // HEX_7_s1_agent:m0_address -> HEX_7_s1_translator:uav_address
	wire    [3:0] hex_7_s1_agent_m0_byteenable;                                                              // HEX_7_s1_agent:m0_byteenable -> HEX_7_s1_translator:uav_byteenable
	wire          hex_7_s1_agent_m0_read;                                                                    // HEX_7_s1_agent:m0_read -> HEX_7_s1_translator:uav_read
	wire          hex_7_s1_agent_m0_readdatavalid;                                                           // HEX_7_s1_translator:uav_readdatavalid -> HEX_7_s1_agent:m0_readdatavalid
	wire          hex_7_s1_agent_m0_lock;                                                                    // HEX_7_s1_agent:m0_lock -> HEX_7_s1_translator:uav_lock
	wire   [31:0] hex_7_s1_agent_m0_writedata;                                                               // HEX_7_s1_agent:m0_writedata -> HEX_7_s1_translator:uav_writedata
	wire          hex_7_s1_agent_m0_write;                                                                   // HEX_7_s1_agent:m0_write -> HEX_7_s1_translator:uav_write
	wire    [2:0] hex_7_s1_agent_m0_burstcount;                                                              // HEX_7_s1_agent:m0_burstcount -> HEX_7_s1_translator:uav_burstcount
	wire          hex_7_s1_agent_rf_source_valid;                                                            // HEX_7_s1_agent:rf_source_valid -> HEX_7_s1_agent_rsp_fifo:in_valid
	wire  [108:0] hex_7_s1_agent_rf_source_data;                                                             // HEX_7_s1_agent:rf_source_data -> HEX_7_s1_agent_rsp_fifo:in_data
	wire          hex_7_s1_agent_rf_source_ready;                                                            // HEX_7_s1_agent_rsp_fifo:in_ready -> HEX_7_s1_agent:rf_source_ready
	wire          hex_7_s1_agent_rf_source_startofpacket;                                                    // HEX_7_s1_agent:rf_source_startofpacket -> HEX_7_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_7_s1_agent_rf_source_endofpacket;                                                      // HEX_7_s1_agent:rf_source_endofpacket -> HEX_7_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_7_s1_agent_rsp_fifo_out_valid;                                                         // HEX_7_s1_agent_rsp_fifo:out_valid -> HEX_7_s1_agent:rf_sink_valid
	wire  [108:0] hex_7_s1_agent_rsp_fifo_out_data;                                                          // HEX_7_s1_agent_rsp_fifo:out_data -> HEX_7_s1_agent:rf_sink_data
	wire          hex_7_s1_agent_rsp_fifo_out_ready;                                                         // HEX_7_s1_agent:rf_sink_ready -> HEX_7_s1_agent_rsp_fifo:out_ready
	wire          hex_7_s1_agent_rsp_fifo_out_startofpacket;                                                 // HEX_7_s1_agent_rsp_fifo:out_startofpacket -> HEX_7_s1_agent:rf_sink_startofpacket
	wire          hex_7_s1_agent_rsp_fifo_out_endofpacket;                                                   // HEX_7_s1_agent_rsp_fifo:out_endofpacket -> HEX_7_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                     // cmd_mux_016:src_valid -> HEX_7_s1_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                                      // cmd_mux_016:src_data -> HEX_7_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                     // HEX_7_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [20:0] cmd_mux_016_src_channel;                                                                   // cmd_mux_016:src_channel -> HEX_7_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                             // cmd_mux_016:src_startofpacket -> HEX_7_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                               // cmd_mux_016:src_endofpacket -> HEX_7_s1_agent:cp_endofpacket
	wire   [31:0] ledg_s1_agent_m0_readdata;                                                                 // LEDG_s1_translator:uav_readdata -> LEDG_s1_agent:m0_readdata
	wire          ledg_s1_agent_m0_waitrequest;                                                              // LEDG_s1_translator:uav_waitrequest -> LEDG_s1_agent:m0_waitrequest
	wire          ledg_s1_agent_m0_debugaccess;                                                              // LEDG_s1_agent:m0_debugaccess -> LEDG_s1_translator:uav_debugaccess
	wire   [27:0] ledg_s1_agent_m0_address;                                                                  // LEDG_s1_agent:m0_address -> LEDG_s1_translator:uav_address
	wire    [3:0] ledg_s1_agent_m0_byteenable;                                                               // LEDG_s1_agent:m0_byteenable -> LEDG_s1_translator:uav_byteenable
	wire          ledg_s1_agent_m0_read;                                                                     // LEDG_s1_agent:m0_read -> LEDG_s1_translator:uav_read
	wire          ledg_s1_agent_m0_readdatavalid;                                                            // LEDG_s1_translator:uav_readdatavalid -> LEDG_s1_agent:m0_readdatavalid
	wire          ledg_s1_agent_m0_lock;                                                                     // LEDG_s1_agent:m0_lock -> LEDG_s1_translator:uav_lock
	wire   [31:0] ledg_s1_agent_m0_writedata;                                                                // LEDG_s1_agent:m0_writedata -> LEDG_s1_translator:uav_writedata
	wire          ledg_s1_agent_m0_write;                                                                    // LEDG_s1_agent:m0_write -> LEDG_s1_translator:uav_write
	wire    [2:0] ledg_s1_agent_m0_burstcount;                                                               // LEDG_s1_agent:m0_burstcount -> LEDG_s1_translator:uav_burstcount
	wire          ledg_s1_agent_rf_source_valid;                                                             // LEDG_s1_agent:rf_source_valid -> LEDG_s1_agent_rsp_fifo:in_valid
	wire  [108:0] ledg_s1_agent_rf_source_data;                                                              // LEDG_s1_agent:rf_source_data -> LEDG_s1_agent_rsp_fifo:in_data
	wire          ledg_s1_agent_rf_source_ready;                                                             // LEDG_s1_agent_rsp_fifo:in_ready -> LEDG_s1_agent:rf_source_ready
	wire          ledg_s1_agent_rf_source_startofpacket;                                                     // LEDG_s1_agent:rf_source_startofpacket -> LEDG_s1_agent_rsp_fifo:in_startofpacket
	wire          ledg_s1_agent_rf_source_endofpacket;                                                       // LEDG_s1_agent:rf_source_endofpacket -> LEDG_s1_agent_rsp_fifo:in_endofpacket
	wire          ledg_s1_agent_rsp_fifo_out_valid;                                                          // LEDG_s1_agent_rsp_fifo:out_valid -> LEDG_s1_agent:rf_sink_valid
	wire  [108:0] ledg_s1_agent_rsp_fifo_out_data;                                                           // LEDG_s1_agent_rsp_fifo:out_data -> LEDG_s1_agent:rf_sink_data
	wire          ledg_s1_agent_rsp_fifo_out_ready;                                                          // LEDG_s1_agent:rf_sink_ready -> LEDG_s1_agent_rsp_fifo:out_ready
	wire          ledg_s1_agent_rsp_fifo_out_startofpacket;                                                  // LEDG_s1_agent_rsp_fifo:out_startofpacket -> LEDG_s1_agent:rf_sink_startofpacket
	wire          ledg_s1_agent_rsp_fifo_out_endofpacket;                                                    // LEDG_s1_agent_rsp_fifo:out_endofpacket -> LEDG_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                     // cmd_mux_017:src_valid -> LEDG_s1_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                                      // cmd_mux_017:src_data -> LEDG_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                     // LEDG_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [20:0] cmd_mux_017_src_channel;                                                                   // cmd_mux_017:src_channel -> LEDG_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                             // cmd_mux_017:src_startofpacket -> LEDG_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                               // cmd_mux_017:src_endofpacket -> LEDG_s1_agent:cp_endofpacket
	wire   [31:0] key_0_s1_agent_m0_readdata;                                                                // KEY_0_s1_translator:uav_readdata -> KEY_0_s1_agent:m0_readdata
	wire          key_0_s1_agent_m0_waitrequest;                                                             // KEY_0_s1_translator:uav_waitrequest -> KEY_0_s1_agent:m0_waitrequest
	wire          key_0_s1_agent_m0_debugaccess;                                                             // KEY_0_s1_agent:m0_debugaccess -> KEY_0_s1_translator:uav_debugaccess
	wire   [27:0] key_0_s1_agent_m0_address;                                                                 // KEY_0_s1_agent:m0_address -> KEY_0_s1_translator:uav_address
	wire    [3:0] key_0_s1_agent_m0_byteenable;                                                              // KEY_0_s1_agent:m0_byteenable -> KEY_0_s1_translator:uav_byteenable
	wire          key_0_s1_agent_m0_read;                                                                    // KEY_0_s1_agent:m0_read -> KEY_0_s1_translator:uav_read
	wire          key_0_s1_agent_m0_readdatavalid;                                                           // KEY_0_s1_translator:uav_readdatavalid -> KEY_0_s1_agent:m0_readdatavalid
	wire          key_0_s1_agent_m0_lock;                                                                    // KEY_0_s1_agent:m0_lock -> KEY_0_s1_translator:uav_lock
	wire   [31:0] key_0_s1_agent_m0_writedata;                                                               // KEY_0_s1_agent:m0_writedata -> KEY_0_s1_translator:uav_writedata
	wire          key_0_s1_agent_m0_write;                                                                   // KEY_0_s1_agent:m0_write -> KEY_0_s1_translator:uav_write
	wire    [2:0] key_0_s1_agent_m0_burstcount;                                                              // KEY_0_s1_agent:m0_burstcount -> KEY_0_s1_translator:uav_burstcount
	wire          key_0_s1_agent_rf_source_valid;                                                            // KEY_0_s1_agent:rf_source_valid -> KEY_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] key_0_s1_agent_rf_source_data;                                                             // KEY_0_s1_agent:rf_source_data -> KEY_0_s1_agent_rsp_fifo:in_data
	wire          key_0_s1_agent_rf_source_ready;                                                            // KEY_0_s1_agent_rsp_fifo:in_ready -> KEY_0_s1_agent:rf_source_ready
	wire          key_0_s1_agent_rf_source_startofpacket;                                                    // KEY_0_s1_agent:rf_source_startofpacket -> KEY_0_s1_agent_rsp_fifo:in_startofpacket
	wire          key_0_s1_agent_rf_source_endofpacket;                                                      // KEY_0_s1_agent:rf_source_endofpacket -> KEY_0_s1_agent_rsp_fifo:in_endofpacket
	wire          key_0_s1_agent_rsp_fifo_out_valid;                                                         // KEY_0_s1_agent_rsp_fifo:out_valid -> KEY_0_s1_agent:rf_sink_valid
	wire  [108:0] key_0_s1_agent_rsp_fifo_out_data;                                                          // KEY_0_s1_agent_rsp_fifo:out_data -> KEY_0_s1_agent:rf_sink_data
	wire          key_0_s1_agent_rsp_fifo_out_ready;                                                         // KEY_0_s1_agent:rf_sink_ready -> KEY_0_s1_agent_rsp_fifo:out_ready
	wire          key_0_s1_agent_rsp_fifo_out_startofpacket;                                                 // KEY_0_s1_agent_rsp_fifo:out_startofpacket -> KEY_0_s1_agent:rf_sink_startofpacket
	wire          key_0_s1_agent_rsp_fifo_out_endofpacket;                                                   // KEY_0_s1_agent_rsp_fifo:out_endofpacket -> KEY_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                     // cmd_mux_018:src_valid -> KEY_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                                      // cmd_mux_018:src_data -> KEY_0_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                     // KEY_0_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [20:0] cmd_mux_018_src_channel;                                                                   // cmd_mux_018:src_channel -> KEY_0_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                             // cmd_mux_018:src_startofpacket -> KEY_0_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                               // cmd_mux_018:src_endofpacket -> KEY_0_s1_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                                // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                             // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                             // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [27:0] sdram_s1_agent_m0_address;                                                                 // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                              // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                    // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                           // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                    // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                               // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                   // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                              // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                            // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [108:0] sdram_s1_agent_rf_source_data;                                                             // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                            // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                    // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                      // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                         // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [108:0] sdram_s1_agent_rsp_fifo_out_data;                                                          // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                         // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                 // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                   // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                     // cmd_mux_019:src_valid -> SDRAM_s1_agent:cp_valid
	wire  [107:0] cmd_mux_019_src_data;                                                                      // cmd_mux_019:src_data -> SDRAM_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                     // SDRAM_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [20:0] cmd_mux_019_src_channel;                                                                   // cmd_mux_019:src_channel -> SDRAM_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                             // cmd_mux_019:src_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                               // cmd_mux_019:src_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire   [31:0] tcm_s2_agent_m0_readdata;                                                                  // TCM_s2_translator:uav_readdata -> TCM_s2_agent:m0_readdata
	wire          tcm_s2_agent_m0_waitrequest;                                                               // TCM_s2_translator:uav_waitrequest -> TCM_s2_agent:m0_waitrequest
	wire          tcm_s2_agent_m0_debugaccess;                                                               // TCM_s2_agent:m0_debugaccess -> TCM_s2_translator:uav_debugaccess
	wire   [27:0] tcm_s2_agent_m0_address;                                                                   // TCM_s2_agent:m0_address -> TCM_s2_translator:uav_address
	wire    [3:0] tcm_s2_agent_m0_byteenable;                                                                // TCM_s2_agent:m0_byteenable -> TCM_s2_translator:uav_byteenable
	wire          tcm_s2_agent_m0_read;                                                                      // TCM_s2_agent:m0_read -> TCM_s2_translator:uav_read
	wire          tcm_s2_agent_m0_readdatavalid;                                                             // TCM_s2_translator:uav_readdatavalid -> TCM_s2_agent:m0_readdatavalid
	wire          tcm_s2_agent_m0_lock;                                                                      // TCM_s2_agent:m0_lock -> TCM_s2_translator:uav_lock
	wire   [31:0] tcm_s2_agent_m0_writedata;                                                                 // TCM_s2_agent:m0_writedata -> TCM_s2_translator:uav_writedata
	wire          tcm_s2_agent_m0_write;                                                                     // TCM_s2_agent:m0_write -> TCM_s2_translator:uav_write
	wire    [2:0] tcm_s2_agent_m0_burstcount;                                                                // TCM_s2_agent:m0_burstcount -> TCM_s2_translator:uav_burstcount
	wire          tcm_s2_agent_rf_source_valid;                                                              // TCM_s2_agent:rf_source_valid -> TCM_s2_agent_rsp_fifo:in_valid
	wire  [108:0] tcm_s2_agent_rf_source_data;                                                               // TCM_s2_agent:rf_source_data -> TCM_s2_agent_rsp_fifo:in_data
	wire          tcm_s2_agent_rf_source_ready;                                                              // TCM_s2_agent_rsp_fifo:in_ready -> TCM_s2_agent:rf_source_ready
	wire          tcm_s2_agent_rf_source_startofpacket;                                                      // TCM_s2_agent:rf_source_startofpacket -> TCM_s2_agent_rsp_fifo:in_startofpacket
	wire          tcm_s2_agent_rf_source_endofpacket;                                                        // TCM_s2_agent:rf_source_endofpacket -> TCM_s2_agent_rsp_fifo:in_endofpacket
	wire          tcm_s2_agent_rsp_fifo_out_valid;                                                           // TCM_s2_agent_rsp_fifo:out_valid -> TCM_s2_agent:rf_sink_valid
	wire  [108:0] tcm_s2_agent_rsp_fifo_out_data;                                                            // TCM_s2_agent_rsp_fifo:out_data -> TCM_s2_agent:rf_sink_data
	wire          tcm_s2_agent_rsp_fifo_out_ready;                                                           // TCM_s2_agent:rf_sink_ready -> TCM_s2_agent_rsp_fifo:out_ready
	wire          tcm_s2_agent_rsp_fifo_out_startofpacket;                                                   // TCM_s2_agent_rsp_fifo:out_startofpacket -> TCM_s2_agent:rf_sink_startofpacket
	wire          tcm_s2_agent_rsp_fifo_out_endofpacket;                                                     // TCM_s2_agent_rsp_fifo:out_endofpacket -> TCM_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                     // cmd_mux_020:src_valid -> TCM_s2_agent:cp_valid
	wire  [107:0] cmd_mux_020_src_data;                                                                      // cmd_mux_020:src_data -> TCM_s2_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                     // TCM_s2_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [20:0] cmd_mux_020_src_channel;                                                                   // cmd_mux_020:src_channel -> TCM_s2_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                             // cmd_mux_020:src_startofpacket -> TCM_s2_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                               // cmd_mux_020:src_endofpacket -> TCM_s2_agent:cp_endofpacket
	wire          mycpu_data_master_agent_cp_valid;                                                          // myCPU_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] mycpu_data_master_agent_cp_data;                                                           // myCPU_data_master_agent:cp_data -> router:sink_data
	wire          mycpu_data_master_agent_cp_ready;                                                          // router:sink_ready -> myCPU_data_master_agent:cp_ready
	wire          mycpu_data_master_agent_cp_startofpacket;                                                  // myCPU_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mycpu_data_master_agent_cp_endofpacket;                                                    // myCPU_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mycpu_instruction_master_agent_cp_valid;                                                   // myCPU_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] mycpu_instruction_master_agent_cp_data;                                                    // myCPU_instruction_master_agent:cp_data -> router_001:sink_data
	wire          mycpu_instruction_master_agent_cp_ready;                                                   // router_001:sink_ready -> myCPU_instruction_master_agent:cp_ready
	wire          mycpu_instruction_master_agent_cp_startofpacket;                                           // myCPU_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          mycpu_instruction_master_agent_cp_endofpacket;                                             // myCPU_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                              // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                               // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                              // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                                      // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_002_src_data;                                                                       // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire   [20:0] router_002_src_channel;                                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          character_lcd_0_avalon_lcd_slave_agent_rp_valid;                                           // character_lcd_0_avalon_lcd_slave_agent:rp_valid -> router_003:sink_valid
	wire   [80:0] character_lcd_0_avalon_lcd_slave_agent_rp_data;                                            // character_lcd_0_avalon_lcd_slave_agent:rp_data -> router_003:sink_data
	wire          character_lcd_0_avalon_lcd_slave_agent_rp_ready;                                           // router_003:sink_ready -> character_lcd_0_avalon_lcd_slave_agent:rp_ready
	wire          character_lcd_0_avalon_lcd_slave_agent_rp_startofpacket;                                   // character_lcd_0_avalon_lcd_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_agent_rp_endofpacket;                                     // character_lcd_0_avalon_lcd_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid;                   // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data;                    // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_data -> router_004:sink_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready;                   // router_004:sink_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_ready
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket;           // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket;             // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_004_src_data;                                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [20:0] router_004_src_channel;                                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                        // sysID_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] sysid_control_slave_agent_rp_data;                                                         // sysID_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                        // router_005:sink_ready -> sysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                // sysID_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                  // sysID_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_005_src_data;                                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [20:0] router_005_src_channel;                                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          mycpu_debug_mem_slave_agent_rp_valid;                                                      // myCPU_debug_mem_slave_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] mycpu_debug_mem_slave_agent_rp_data;                                                       // myCPU_debug_mem_slave_agent:rp_data -> router_006:sink_data
	wire          mycpu_debug_mem_slave_agent_rp_ready;                                                      // router_006:sink_ready -> myCPU_debug_mem_slave_agent:rp_ready
	wire          mycpu_debug_mem_slave_agent_rp_startofpacket;                                              // myCPU_debug_mem_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          mycpu_debug_mem_slave_agent_rp_endofpacket;                                                // myCPU_debug_mem_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_006_src_data;                                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [20:0] router_006_src_channel;                                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          system_clock_timer_s1_agent_rp_valid;                                                      // System_Clock_Timer_s1_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] system_clock_timer_s1_agent_rp_data;                                                       // System_Clock_Timer_s1_agent:rp_data -> router_007:sink_data
	wire          system_clock_timer_s1_agent_rp_ready;                                                      // router_007:sink_ready -> System_Clock_Timer_s1_agent:rp_ready
	wire          system_clock_timer_s1_agent_rp_startofpacket;                                              // System_Clock_Timer_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          system_clock_timer_s1_agent_rp_endofpacket;                                                // System_Clock_Timer_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [20:0] router_007_src_channel;                                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          high_res_timer_s1_agent_rp_valid;                                                          // High_Res_Timer_s1_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] high_res_timer_s1_agent_rp_data;                                                           // High_Res_Timer_s1_agent:rp_data -> router_008:sink_data
	wire          high_res_timer_s1_agent_rp_ready;                                                          // router_008:sink_ready -> High_Res_Timer_s1_agent:rp_ready
	wire          high_res_timer_s1_agent_rp_startofpacket;                                                  // High_Res_Timer_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          high_res_timer_s1_agent_rp_endofpacket;                                                    // High_Res_Timer_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [20:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          switches_s1_agent_rp_valid;                                                                // Switches_s1_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] switches_s1_agent_rp_data;                                                                 // Switches_s1_agent:rp_data -> router_009:sink_data
	wire          switches_s1_agent_rp_ready;                                                                // router_009:sink_ready -> Switches_s1_agent:rp_ready
	wire          switches_s1_agent_rp_startofpacket;                                                        // Switches_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          switches_s1_agent_rp_endofpacket;                                                          // Switches_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [20:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                    // LEDs_s1_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] leds_s1_agent_rp_data;                                                                     // LEDs_s1_agent:rp_data -> router_010:sink_data
	wire          leds_s1_agent_rp_ready;                                                                    // router_010:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                            // LEDs_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                              // LEDs_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [20:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          hex_0_s1_agent_rp_valid;                                                                   // HEX_0_s1_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] hex_0_s1_agent_rp_data;                                                                    // HEX_0_s1_agent:rp_data -> router_011:sink_data
	wire          hex_0_s1_agent_rp_ready;                                                                   // router_011:sink_ready -> HEX_0_s1_agent:rp_ready
	wire          hex_0_s1_agent_rp_startofpacket;                                                           // HEX_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          hex_0_s1_agent_rp_endofpacket;                                                             // HEX_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [20:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          hex_1_s1_agent_rp_valid;                                                                   // HEX_1_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] hex_1_s1_agent_rp_data;                                                                    // HEX_1_s1_agent:rp_data -> router_012:sink_data
	wire          hex_1_s1_agent_rp_ready;                                                                   // router_012:sink_ready -> HEX_1_s1_agent:rp_ready
	wire          hex_1_s1_agent_rp_startofpacket;                                                           // HEX_1_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          hex_1_s1_agent_rp_endofpacket;                                                             // HEX_1_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                      // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_012_src_data;                                                                       // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                      // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [20:0] router_012_src_channel;                                                                    // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                              // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          hex_2_s1_agent_rp_valid;                                                                   // HEX_2_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] hex_2_s1_agent_rp_data;                                                                    // HEX_2_s1_agent:rp_data -> router_013:sink_data
	wire          hex_2_s1_agent_rp_ready;                                                                   // router_013:sink_ready -> HEX_2_s1_agent:rp_ready
	wire          hex_2_s1_agent_rp_startofpacket;                                                           // HEX_2_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          hex_2_s1_agent_rp_endofpacket;                                                             // HEX_2_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                      // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_013_src_data;                                                                       // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                                      // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [20:0] router_013_src_channel;                                                                    // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                              // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          hex_3_s1_agent_rp_valid;                                                                   // HEX_3_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] hex_3_s1_agent_rp_data;                                                                    // HEX_3_s1_agent:rp_data -> router_014:sink_data
	wire          hex_3_s1_agent_rp_ready;                                                                   // router_014:sink_ready -> HEX_3_s1_agent:rp_ready
	wire          hex_3_s1_agent_rp_startofpacket;                                                           // HEX_3_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          hex_3_s1_agent_rp_endofpacket;                                                             // HEX_3_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                      // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_014_src_data;                                                                       // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                                      // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [20:0] router_014_src_channel;                                                                    // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                              // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          hex_4_s1_agent_rp_valid;                                                                   // HEX_4_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] hex_4_s1_agent_rp_data;                                                                    // HEX_4_s1_agent:rp_data -> router_015:sink_data
	wire          hex_4_s1_agent_rp_ready;                                                                   // router_015:sink_ready -> HEX_4_s1_agent:rp_ready
	wire          hex_4_s1_agent_rp_startofpacket;                                                           // HEX_4_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          hex_4_s1_agent_rp_endofpacket;                                                             // HEX_4_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                      // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_015_src_data;                                                                       // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                                      // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [20:0] router_015_src_channel;                                                                    // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                              // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          hex_5_s1_agent_rp_valid;                                                                   // HEX_5_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] hex_5_s1_agent_rp_data;                                                                    // HEX_5_s1_agent:rp_data -> router_016:sink_data
	wire          hex_5_s1_agent_rp_ready;                                                                   // router_016:sink_ready -> HEX_5_s1_agent:rp_ready
	wire          hex_5_s1_agent_rp_startofpacket;                                                           // HEX_5_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          hex_5_s1_agent_rp_endofpacket;                                                             // HEX_5_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                      // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_016_src_data;                                                                       // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                                      // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [20:0] router_016_src_channel;                                                                    // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                              // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          hex_6_s1_agent_rp_valid;                                                                   // HEX_6_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] hex_6_s1_agent_rp_data;                                                                    // HEX_6_s1_agent:rp_data -> router_017:sink_data
	wire          hex_6_s1_agent_rp_ready;                                                                   // router_017:sink_ready -> HEX_6_s1_agent:rp_ready
	wire          hex_6_s1_agent_rp_startofpacket;                                                           // HEX_6_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          hex_6_s1_agent_rp_endofpacket;                                                             // HEX_6_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                      // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_017_src_data;                                                                       // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                                      // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [20:0] router_017_src_channel;                                                                    // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                              // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          hex_7_s1_agent_rp_valid;                                                                   // HEX_7_s1_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] hex_7_s1_agent_rp_data;                                                                    // HEX_7_s1_agent:rp_data -> router_018:sink_data
	wire          hex_7_s1_agent_rp_ready;                                                                   // router_018:sink_ready -> HEX_7_s1_agent:rp_ready
	wire          hex_7_s1_agent_rp_startofpacket;                                                           // HEX_7_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          hex_7_s1_agent_rp_endofpacket;                                                             // HEX_7_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                      // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_018_src_data;                                                                       // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                                      // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [20:0] router_018_src_channel;                                                                    // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                              // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          ledg_s1_agent_rp_valid;                                                                    // LEDG_s1_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] ledg_s1_agent_rp_data;                                                                     // LEDG_s1_agent:rp_data -> router_019:sink_data
	wire          ledg_s1_agent_rp_ready;                                                                    // router_019:sink_ready -> LEDG_s1_agent:rp_ready
	wire          ledg_s1_agent_rp_startofpacket;                                                            // LEDG_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          ledg_s1_agent_rp_endofpacket;                                                              // LEDG_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                      // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_019_src_data;                                                                       // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                                      // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [20:0] router_019_src_channel;                                                                    // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                              // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          key_0_s1_agent_rp_valid;                                                                   // KEY_0_s1_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] key_0_s1_agent_rp_data;                                                                    // KEY_0_s1_agent:rp_data -> router_020:sink_data
	wire          key_0_s1_agent_rp_ready;                                                                   // router_020:sink_ready -> KEY_0_s1_agent:rp_ready
	wire          key_0_s1_agent_rp_startofpacket;                                                           // KEY_0_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          key_0_s1_agent_rp_endofpacket;                                                             // KEY_0_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                      // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_020_src_data;                                                                       // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                                      // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [20:0] router_020_src_channel;                                                                    // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                              // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                   // SDRAM_s1_agent:rp_valid -> router_021:sink_valid
	wire  [107:0] sdram_s1_agent_rp_data;                                                                    // SDRAM_s1_agent:rp_data -> router_021:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                   // router_021:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                           // SDRAM_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                             // SDRAM_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                      // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [107:0] router_021_src_data;                                                                       // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                                      // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [20:0] router_021_src_channel;                                                                    // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                              // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          tcm_s2_agent_rp_valid;                                                                     // TCM_s2_agent:rp_valid -> router_022:sink_valid
	wire  [107:0] tcm_s2_agent_rp_data;                                                                      // TCM_s2_agent:rp_data -> router_022:sink_data
	wire          tcm_s2_agent_rp_ready;                                                                     // router_022:sink_ready -> TCM_s2_agent:rp_ready
	wire          tcm_s2_agent_rp_startofpacket;                                                             // TCM_s2_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          tcm_s2_agent_rp_endofpacket;                                                               // TCM_s2_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                      // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [107:0] router_022_src_data;                                                                       // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                                      // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [20:0] router_022_src_channel;                                                                    // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                              // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_src_valid;                                                                          // router:src_valid -> myCPU_data_master_limiter:cmd_sink_valid
	wire  [107:0] router_src_data;                                                                           // router:src_data -> myCPU_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                          // myCPU_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [20:0] router_src_channel;                                                                        // router:src_channel -> myCPU_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                  // router:src_startofpacket -> myCPU_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                    // router:src_endofpacket -> myCPU_data_master_limiter:cmd_sink_endofpacket
	wire  [107:0] mycpu_data_master_limiter_cmd_src_data;                                                    // myCPU_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mycpu_data_master_limiter_cmd_src_ready;                                                   // cmd_demux:sink_ready -> myCPU_data_master_limiter:cmd_src_ready
	wire   [20:0] mycpu_data_master_limiter_cmd_src_channel;                                                 // myCPU_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mycpu_data_master_limiter_cmd_src_startofpacket;                                           // myCPU_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mycpu_data_master_limiter_cmd_src_endofpacket;                                             // myCPU_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> myCPU_data_master_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> myCPU_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                         // myCPU_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [20:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> myCPU_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> myCPU_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> myCPU_data_master_limiter:rsp_sink_endofpacket
	wire          mycpu_data_master_limiter_rsp_src_valid;                                                   // myCPU_data_master_limiter:rsp_src_valid -> myCPU_data_master_agent:rp_valid
	wire  [107:0] mycpu_data_master_limiter_rsp_src_data;                                                    // myCPU_data_master_limiter:rsp_src_data -> myCPU_data_master_agent:rp_data
	wire          mycpu_data_master_limiter_rsp_src_ready;                                                   // myCPU_data_master_agent:rp_ready -> myCPU_data_master_limiter:rsp_src_ready
	wire   [20:0] mycpu_data_master_limiter_rsp_src_channel;                                                 // myCPU_data_master_limiter:rsp_src_channel -> myCPU_data_master_agent:rp_channel
	wire          mycpu_data_master_limiter_rsp_src_startofpacket;                                           // myCPU_data_master_limiter:rsp_src_startofpacket -> myCPU_data_master_agent:rp_startofpacket
	wire          mycpu_data_master_limiter_rsp_src_endofpacket;                                             // myCPU_data_master_limiter:rsp_src_endofpacket -> myCPU_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                      // router_001:src_valid -> myCPU_instruction_master_limiter:cmd_sink_valid
	wire  [107:0] router_001_src_data;                                                                       // router_001:src_data -> myCPU_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                      // myCPU_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [20:0] router_001_src_channel;                                                                    // router_001:src_channel -> myCPU_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> myCPU_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> myCPU_instruction_master_limiter:cmd_sink_endofpacket
	wire  [107:0] mycpu_instruction_master_limiter_cmd_src_data;                                             // myCPU_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          mycpu_instruction_master_limiter_cmd_src_ready;                                            // cmd_demux_001:sink_ready -> myCPU_instruction_master_limiter:cmd_src_ready
	wire   [20:0] mycpu_instruction_master_limiter_cmd_src_channel;                                          // myCPU_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          mycpu_instruction_master_limiter_cmd_src_startofpacket;                                    // myCPU_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          mycpu_instruction_master_limiter_cmd_src_endofpacket;                                      // myCPU_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> myCPU_instruction_master_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> myCPU_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                     // myCPU_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [20:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> myCPU_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> myCPU_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> myCPU_instruction_master_limiter:rsp_sink_endofpacket
	wire          mycpu_instruction_master_limiter_rsp_src_valid;                                            // myCPU_instruction_master_limiter:rsp_src_valid -> myCPU_instruction_master_agent:rp_valid
	wire  [107:0] mycpu_instruction_master_limiter_rsp_src_data;                                             // myCPU_instruction_master_limiter:rsp_src_data -> myCPU_instruction_master_agent:rp_data
	wire          mycpu_instruction_master_limiter_rsp_src_ready;                                            // myCPU_instruction_master_agent:rp_ready -> myCPU_instruction_master_limiter:rsp_src_ready
	wire   [20:0] mycpu_instruction_master_limiter_rsp_src_channel;                                          // myCPU_instruction_master_limiter:rsp_src_channel -> myCPU_instruction_master_agent:rp_channel
	wire          mycpu_instruction_master_limiter_rsp_src_startofpacket;                                    // myCPU_instruction_master_limiter:rsp_src_startofpacket -> myCPU_instruction_master_agent:rp_startofpacket
	wire          mycpu_instruction_master_limiter_rsp_src_endofpacket;                                      // myCPU_instruction_master_limiter:rsp_src_endofpacket -> myCPU_instruction_master_agent:rp_endofpacket
	wire          character_lcd_0_avalon_lcd_slave_burst_adapter_source0_valid;                              // character_lcd_0_avalon_lcd_slave_burst_adapter:source0_valid -> character_lcd_0_avalon_lcd_slave_agent:cp_valid
	wire   [80:0] character_lcd_0_avalon_lcd_slave_burst_adapter_source0_data;                               // character_lcd_0_avalon_lcd_slave_burst_adapter:source0_data -> character_lcd_0_avalon_lcd_slave_agent:cp_data
	wire          character_lcd_0_avalon_lcd_slave_burst_adapter_source0_ready;                              // character_lcd_0_avalon_lcd_slave_agent:cp_ready -> character_lcd_0_avalon_lcd_slave_burst_adapter:source0_ready
	wire   [20:0] character_lcd_0_avalon_lcd_slave_burst_adapter_source0_channel;                            // character_lcd_0_avalon_lcd_slave_burst_adapter:source0_channel -> character_lcd_0_avalon_lcd_slave_agent:cp_channel
	wire          character_lcd_0_avalon_lcd_slave_burst_adapter_source0_startofpacket;                      // character_lcd_0_avalon_lcd_slave_burst_adapter:source0_startofpacket -> character_lcd_0_avalon_lcd_slave_agent:cp_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_burst_adapter_source0_endofpacket;                        // character_lcd_0_avalon_lcd_slave_burst_adapter:source0_endofpacket -> character_lcd_0_avalon_lcd_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [20:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [20:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [20:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [20:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [20:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [20:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [20:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [20:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [20:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] cmd_demux_src9_data;                                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [20:0] cmd_demux_src9_channel;                                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                     // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                                      // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                     // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [20:0] cmd_demux_src10_channel;                                                                   // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                             // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                               // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [20:0] cmd_demux_src11_channel;                                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_src12_data;                                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [20:0] cmd_demux_src12_channel;                                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_src13_data;                                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [20:0] cmd_demux_src13_channel;                                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_src14_data;                                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [20:0] cmd_demux_src14_channel;                                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                     // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] cmd_demux_src15_data;                                                                      // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                     // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [20:0] cmd_demux_src15_channel;                                                                   // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                             // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                               // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                     // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] cmd_demux_src16_data;                                                                      // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                     // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [20:0] cmd_demux_src16_channel;                                                                   // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                             // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                               // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] cmd_demux_src17_data;                                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [20:0] cmd_demux_src17_channel;                                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] cmd_demux_src18_data;                                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [20:0] cmd_demux_src18_channel;                                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [107:0] cmd_demux_src19_data;                                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [20:0] cmd_demux_src19_channel;                                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [107:0] cmd_demux_src20_data;                                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [20:0] cmd_demux_src20_channel;                                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                  // cmd_mux_004:sink1_ready -> cmd_demux_001:src0_ready
	wire   [20:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> cmd_mux_019:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                  // cmd_mux_019:sink1_ready -> cmd_demux_001:src1_ready
	wire   [20:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [20:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [20:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [20:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [20:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [20:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                  // rsp_demux_004:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                                   // rsp_demux_004:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_004_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux_004:src1_ready
	wire   [20:0] rsp_demux_004_src1_channel;                                                                // rsp_demux_004:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_004_src1_startofpacket;                                                          // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                            // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [20:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [20:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [20:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [20:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [20:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                  // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                                   // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                  // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [20:0] rsp_demux_010_src0_channel;                                                                // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                          // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                            // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [20:0] rsp_demux_011_src0_channel;                                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [20:0] rsp_demux_012_src0_channel;                                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [20:0] rsp_demux_013_src0_channel;                                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [20:0] rsp_demux_014_src0_channel;                                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                  // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                                   // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                  // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [20:0] rsp_demux_015_src0_channel;                                                                // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                          // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                            // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                  // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                                   // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                  // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [20:0] rsp_demux_016_src0_channel;                                                                // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                          // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                            // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [20:0] rsp_demux_017_src0_channel;                                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [20:0] rsp_demux_018_src0_channel;                                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [107:0] rsp_demux_019_src0_data;                                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [20:0] rsp_demux_019_src0_channel;                                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                                  // rsp_demux_019:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_019_src1_data;                                                                   // rsp_demux_019:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_019_src1_ready;                                                                  // rsp_mux_001:sink1_ready -> rsp_demux_019:src1_ready
	wire   [20:0] rsp_demux_019_src1_channel;                                                                // rsp_demux_019:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_019_src1_startofpacket;                                                          // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                            // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [107:0] rsp_demux_020_src0_data;                                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [20:0] rsp_demux_020_src0_channel;                                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          router_003_src_valid;                                                                      // router_003:src_valid -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_valid
	wire   [80:0] router_003_src_data;                                                                       // router_003:src_data -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                                      // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [20:0] router_003_src_channel;                                                                    // router_003:src_channel -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:in_endofpacket
	wire          character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_valid;                              // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [107:0] character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_data;                               // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_ready;                              // rsp_demux_001:sink_ready -> character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_ready
	wire   [20:0] character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_channel;                            // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_startofpacket;                      // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_endofpacket;                        // character_lcd_0_avalon_lcd_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                                     // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [20:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:in_endofpacket
	wire          character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_valid;                              // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_valid -> character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_valid
	wire   [80:0] character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_data;                               // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_data -> character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_data
	wire          character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_ready;                              // character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_ready -> character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_ready
	wire   [20:0] character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_channel;                            // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_channel -> character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_channel
	wire          character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_startofpacket;                      // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_startofpacket -> character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_startofpacket
	wire          character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_endofpacket;                        // character_lcd_0_avalon_lcd_slave_cmd_width_adapter:out_endofpacket -> character_lcd_0_avalon_lcd_slave_burst_adapter:sink0_endofpacket
	wire   [20:0] mycpu_data_master_limiter_cmd_valid_data;                                                  // myCPU_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [20:0] mycpu_instruction_master_limiter_cmd_valid_data;                                           // myCPU_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                             // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                             // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_valid;                               // character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire    [9:0] character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_data;                                // character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_001:in_0_ready -> character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                         // avalon_st_adapter_001:out_0_valid -> character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_001_out_0_data;                                                          // avalon_st_adapter_001:out_0_data -> character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                         // character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                         // avalon_st_adapter_001:out_0_error -> character_lcd_0_avalon_lcd_slave_agent:rdata_fifo_sink_error
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid;       // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data;        // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready;       // avalon_st_adapter_002:in_0_ready -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                         // avalon_st_adapter_002:out_0_valid -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                          // avalon_st_adapter_002:out_0_data -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                         // Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                         // avalon_st_adapter_002:out_0_error -> Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                            // sysID_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                             // sysID_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_003:in_0_ready -> sysID_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                         // avalon_st_adapter_003:out_0_valid -> sysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                          // avalon_st_adapter_003:out_0_data -> sysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                         // sysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                         // avalon_st_adapter_003:out_0_error -> sysID_control_slave_agent:rdata_fifo_sink_error
	wire          mycpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                          // myCPU_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mycpu_debug_mem_slave_agent_rdata_fifo_src_data;                                           // myCPU_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          mycpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_004:in_0_ready -> myCPU_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                         // avalon_st_adapter_004:out_0_valid -> myCPU_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                          // avalon_st_adapter_004:out_0_data -> myCPU_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                         // myCPU_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                         // avalon_st_adapter_004:out_0_error -> myCPU_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          system_clock_timer_s1_agent_rdata_fifo_src_valid;                                          // System_Clock_Timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] system_clock_timer_s1_agent_rdata_fifo_src_data;                                           // System_Clock_Timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          system_clock_timer_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_005:in_0_ready -> System_Clock_Timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                         // avalon_st_adapter_005:out_0_valid -> System_Clock_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                          // avalon_st_adapter_005:out_0_data -> System_Clock_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                         // System_Clock_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                         // avalon_st_adapter_005:out_0_error -> System_Clock_Timer_s1_agent:rdata_fifo_sink_error
	wire          high_res_timer_s1_agent_rdata_fifo_src_valid;                                              // High_Res_Timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] high_res_timer_s1_agent_rdata_fifo_src_data;                                               // High_Res_Timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          high_res_timer_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_006:in_0_ready -> High_Res_Timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                         // avalon_st_adapter_006:out_0_valid -> High_Res_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                          // avalon_st_adapter_006:out_0_data -> High_Res_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                         // High_Res_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                         // avalon_st_adapter_006:out_0_error -> High_Res_Timer_s1_agent:rdata_fifo_sink_error
	wire          switches_s1_agent_rdata_fifo_src_valid;                                                    // Switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_src_data;                                                     // Switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          switches_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_007:in_0_ready -> Switches_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                         // avalon_st_adapter_007:out_0_valid -> Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                          // avalon_st_adapter_007:out_0_data -> Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                         // Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                         // avalon_st_adapter_007:out_0_error -> Switches_s1_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                        // LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                         // LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_008:in_0_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                         // avalon_st_adapter_008:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                          // avalon_st_adapter_008:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                         // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                         // avalon_st_adapter_008:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          hex_0_s1_agent_rdata_fifo_src_valid;                                                       // HEX_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] hex_0_s1_agent_rdata_fifo_src_data;                                                        // HEX_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          hex_0_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_009:in_0_ready -> HEX_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                         // avalon_st_adapter_009:out_0_valid -> HEX_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                          // avalon_st_adapter_009:out_0_data -> HEX_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                         // HEX_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                         // avalon_st_adapter_009:out_0_error -> HEX_0_s1_agent:rdata_fifo_sink_error
	wire          hex_1_s1_agent_rdata_fifo_src_valid;                                                       // HEX_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] hex_1_s1_agent_rdata_fifo_src_data;                                                        // HEX_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          hex_1_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_010:in_0_ready -> HEX_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                         // avalon_st_adapter_010:out_0_valid -> HEX_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                          // avalon_st_adapter_010:out_0_data -> HEX_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                         // HEX_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                         // avalon_st_adapter_010:out_0_error -> HEX_1_s1_agent:rdata_fifo_sink_error
	wire          hex_2_s1_agent_rdata_fifo_src_valid;                                                       // HEX_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] hex_2_s1_agent_rdata_fifo_src_data;                                                        // HEX_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          hex_2_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_011:in_0_ready -> HEX_2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                         // avalon_st_adapter_011:out_0_valid -> HEX_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                          // avalon_st_adapter_011:out_0_data -> HEX_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                         // HEX_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                         // avalon_st_adapter_011:out_0_error -> HEX_2_s1_agent:rdata_fifo_sink_error
	wire          hex_3_s1_agent_rdata_fifo_src_valid;                                                       // HEX_3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] hex_3_s1_agent_rdata_fifo_src_data;                                                        // HEX_3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          hex_3_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_012:in_0_ready -> HEX_3_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                         // avalon_st_adapter_012:out_0_valid -> HEX_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                          // avalon_st_adapter_012:out_0_data -> HEX_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                         // HEX_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                         // avalon_st_adapter_012:out_0_error -> HEX_3_s1_agent:rdata_fifo_sink_error
	wire          hex_4_s1_agent_rdata_fifo_src_valid;                                                       // HEX_4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] hex_4_s1_agent_rdata_fifo_src_data;                                                        // HEX_4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          hex_4_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_013:in_0_ready -> HEX_4_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                         // avalon_st_adapter_013:out_0_valid -> HEX_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                          // avalon_st_adapter_013:out_0_data -> HEX_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                         // HEX_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                         // avalon_st_adapter_013:out_0_error -> HEX_4_s1_agent:rdata_fifo_sink_error
	wire          hex_5_s1_agent_rdata_fifo_src_valid;                                                       // HEX_5_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] hex_5_s1_agent_rdata_fifo_src_data;                                                        // HEX_5_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          hex_5_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_014:in_0_ready -> HEX_5_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                         // avalon_st_adapter_014:out_0_valid -> HEX_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                          // avalon_st_adapter_014:out_0_data -> HEX_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                         // HEX_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                         // avalon_st_adapter_014:out_0_error -> HEX_5_s1_agent:rdata_fifo_sink_error
	wire          hex_6_s1_agent_rdata_fifo_src_valid;                                                       // HEX_6_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] hex_6_s1_agent_rdata_fifo_src_data;                                                        // HEX_6_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          hex_6_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_015:in_0_ready -> HEX_6_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                         // avalon_st_adapter_015:out_0_valid -> HEX_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                          // avalon_st_adapter_015:out_0_data -> HEX_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                         // HEX_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                         // avalon_st_adapter_015:out_0_error -> HEX_6_s1_agent:rdata_fifo_sink_error
	wire          hex_7_s1_agent_rdata_fifo_src_valid;                                                       // HEX_7_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] hex_7_s1_agent_rdata_fifo_src_data;                                                        // HEX_7_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          hex_7_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_016:in_0_ready -> HEX_7_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                         // avalon_st_adapter_016:out_0_valid -> HEX_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                          // avalon_st_adapter_016:out_0_data -> HEX_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                         // HEX_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                         // avalon_st_adapter_016:out_0_error -> HEX_7_s1_agent:rdata_fifo_sink_error
	wire          ledg_s1_agent_rdata_fifo_src_valid;                                                        // LEDG_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] ledg_s1_agent_rdata_fifo_src_data;                                                         // LEDG_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          ledg_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_017:in_0_ready -> LEDG_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                         // avalon_st_adapter_017:out_0_valid -> LEDG_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                          // avalon_st_adapter_017:out_0_data -> LEDG_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                         // LEDG_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                         // avalon_st_adapter_017:out_0_error -> LEDG_s1_agent:rdata_fifo_sink_error
	wire          key_0_s1_agent_rdata_fifo_src_valid;                                                       // KEY_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] key_0_s1_agent_rdata_fifo_src_data;                                                        // KEY_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          key_0_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_018:in_0_ready -> KEY_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                         // avalon_st_adapter_018:out_0_valid -> KEY_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                          // avalon_st_adapter_018:out_0_data -> KEY_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                         // KEY_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                         // avalon_st_adapter_018:out_0_error -> KEY_0_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                       // SDRAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                        // SDRAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_019:in_0_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                         // avalon_st_adapter_019:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                          // avalon_st_adapter_019:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                         // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                         // avalon_st_adapter_019:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          tcm_s2_agent_rdata_fifo_src_valid;                                                         // TCM_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] tcm_s2_agent_rdata_fifo_src_data;                                                          // TCM_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          tcm_s2_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_020:in_0_ready -> TCM_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                         // avalon_st_adapter_020:out_0_valid -> TCM_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                          // avalon_st_adapter_020:out_0_data -> TCM_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                         // TCM_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                         // avalon_st_adapter_020:out_0_error -> TCM_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mycpu_data_master_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                                                 //                       clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (mycpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mycpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mycpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mycpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mycpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mycpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mycpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mycpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mycpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mycpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mycpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (myCPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (myCPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (myCPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                (myCPU_data_master_read),                                               //                          .read
		.av_readdata            (myCPU_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (myCPU_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (myCPU_data_master_write),                                              //                          .write
		.av_writedata           (myCPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (myCPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mycpu_instruction_master_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (mycpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mycpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mycpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mycpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mycpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mycpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mycpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mycpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mycpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mycpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mycpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (myCPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (myCPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (myCPU_instruction_master_read),                                               //                          .read
		.av_readdata            (myCPU_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (myCPU_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                                 //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) character_lcd_0_avalon_lcd_slave_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address            (character_lcd_0_avalon_lcd_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (character_lcd_0_avalon_lcd_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (character_lcd_0_avalon_lcd_slave_agent_m0_read),          //                         .read
		.uav_write              (character_lcd_0_avalon_lcd_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (character_lcd_0_avalon_lcd_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (character_lcd_0_avalon_lcd_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (character_lcd_0_avalon_lcd_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (character_lcd_0_avalon_lcd_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (character_lcd_0_avalon_lcd_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (character_lcd_0_avalon_lcd_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (character_lcd_0_avalon_lcd_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (character_lcd_0_avalon_lcd_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (character_lcd_0_avalon_lcd_slave_write),                  //                         .write
		.av_read                (character_lcd_0_avalon_lcd_slave_read),                   //                         .read
		.av_readdata            (character_lcd_0_avalon_lcd_slave_readdata),               //                         .readdata
		.av_writedata           (character_lcd_0_avalon_lcd_slave_writedata),              //                         .writedata
		.av_waitrequest         (character_lcd_0_avalon_lcd_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (character_lcd_0_avalon_lcd_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                                                            //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),                                         //                    reset.reset
		.uav_address            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read),          //                         .read
		.uav_write              (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_write),                  //                         .write
		.av_read                (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_read),                   //                         .read
		.av_readdata            (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_readdata),               //                         .readdata
		.av_writedata           (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_writedata),              //                         .writedata
		.av_byteenable          (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (Altera_UP_SD_Card_Avalon_Interface_0_avalon_sdcard_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                                //              (terminated)
		.av_burstcount          (),                                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                                            //              (terminated)
		.av_writebyteenable     (),                                                                                //              (terminated)
		.av_lock                (),                                                                                //              (terminated)
		.av_clken               (),                                                                                //              (terminated)
		.uav_clken              (1'b0),                                                                            //              (terminated)
		.av_debugaccess         (),                                                                                //              (terminated)
		.av_outputenable        (),                                                                                //              (terminated)
		.uav_response           (),                                                                                //              (terminated)
		.av_response            (2'b00),                                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                       //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysID_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysID_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mycpu_debug_mem_slave_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                         //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (mycpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mycpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mycpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (mycpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (mycpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mycpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mycpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mycpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mycpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mycpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mycpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (myCPU_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (myCPU_debug_mem_slave_write),                  //                         .write
		.av_read                (myCPU_debug_mem_slave_read),                   //                         .read
		.av_readdata            (myCPU_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (myCPU_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (myCPU_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (myCPU_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (myCPU_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_clock_timer_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                         //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (system_clock_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (system_clock_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (system_clock_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (system_clock_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (system_clock_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (system_clock_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (system_clock_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (system_clock_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (system_clock_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (system_clock_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (system_clock_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (System_Clock_Timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (System_Clock_Timer_s1_write),                  //                         .write
		.av_readdata            (System_Clock_Timer_s1_readdata),               //                         .readdata
		.av_writedata           (System_Clock_Timer_s1_writedata),              //                         .writedata
		.av_chipselect          (System_Clock_Timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) high_res_timer_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                     //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (high_res_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (high_res_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (high_res_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (high_res_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (high_res_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (high_res_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (high_res_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (high_res_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (high_res_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (high_res_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (high_res_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (High_Res_Timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (High_Res_Timer_s1_write),                  //                         .write
		.av_readdata            (High_Res_Timer_s1_readdata),               //                         .readdata
		.av_writedata           (High_Res_Timer_s1_writedata),              //                         .writedata
		.av_chipselect          (High_Res_Timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),               //                         .read
		.uav_write              (switches_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (Switches_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (Switches_s1_write),                       //                         .write
		.av_readdata            (Switches_s1_readdata),                    //                         .readdata
		.av_writedata           (Switches_s1_writedata),                   //                         .writedata
		.av_chipselect          (Switches_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                   //                         .read
		.uav_write              (leds_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (LEDs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                           //                         .write
		.av_readdata            (LEDs_s1_readdata),                        //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                       //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_0_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_0_s1_write),                          //                         .write
		.av_readdata            (HEX_0_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_0_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_0_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_1_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_1_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_1_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_1_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_1_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_1_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_1_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_1_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_1_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_1_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_1_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_1_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_1_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_1_s1_write),                          //                         .write
		.av_readdata            (HEX_1_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_1_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_1_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_2_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_2_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_2_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_2_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_2_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_2_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_2_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_2_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_2_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_2_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_2_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_2_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_2_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_2_s1_write),                          //                         .write
		.av_readdata            (HEX_2_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_2_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_2_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_3_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_3_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_3_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_3_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_3_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_3_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_3_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_3_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_3_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_3_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_3_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_3_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_3_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_3_s1_write),                          //                         .write
		.av_readdata            (HEX_3_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_3_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_3_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_4_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_4_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_4_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_4_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_4_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_4_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_4_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_4_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_4_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_4_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_4_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_4_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_4_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_4_s1_write),                          //                         .write
		.av_readdata            (HEX_4_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_4_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_4_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_5_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_5_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_5_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_5_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_5_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_5_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_5_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_5_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_5_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_5_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_5_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_5_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_5_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_5_s1_write),                          //                         .write
		.av_readdata            (HEX_5_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_5_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_5_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_6_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_6_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_6_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_6_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_6_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_6_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_6_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_6_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_6_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_6_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_6_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_6_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_6_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_6_s1_write),                          //                         .write
		.av_readdata            (HEX_6_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_6_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_6_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_7_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_7_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex_7_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex_7_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex_7_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex_7_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex_7_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex_7_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex_7_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex_7_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex_7_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex_7_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX_7_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX_7_s1_write),                          //                         .write
		.av_readdata            (HEX_7_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX_7_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX_7_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledg_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ledg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ledg_s1_agent_m0_read),                   //                         .read
		.uav_write              (ledg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ledg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ledg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ledg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ledg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ledg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ledg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ledg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (LEDG_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (LEDG_s1_write),                           //                         .write
		.av_readdata            (LEDG_s1_readdata),                        //                         .readdata
		.av_writedata           (LEDG_s1_writedata),                       //                         .writedata
		.av_chipselect          (LEDG_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_0_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (key_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (key_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (key_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (key_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (key_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (key_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (key_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (key_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (key_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (key_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (KEY_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (KEY_0_s1_write),                          //                         .write
		.av_readdata            (KEY_0_s1_readdata),                       //                         .readdata
		.av_writedata           (KEY_0_s1_writedata),                      //                         .writedata
		.av_chipselect          (KEY_0_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (SDRAM_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                          //                         .write
		.av_read                (SDRAM_s1_read),                           //                         .read
		.av_readdata            (SDRAM_s1_readdata),                       //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                      //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tcm_s2_translator (
		.clk                    (MAIN_CLK_sys_clk_clk),                    //                      clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tcm_s2_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (tcm_s2_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (tcm_s2_agent_m0_read),                    //                         .read
		.uav_write              (tcm_s2_agent_m0_write),                   //                         .write
		.uav_waitrequest        (tcm_s2_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (tcm_s2_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (tcm_s2_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (tcm_s2_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (tcm_s2_agent_m0_writedata),               //                         .writedata
		.uav_lock               (tcm_s2_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (tcm_s2_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (TCM_s2_address),                          //      avalon_anti_slave_0.address
		.av_write               (TCM_s2_write),                            //                         .write
		.av_readdata            (TCM_s2_readdata),                         //                         .readdata
		.av_writedata           (TCM_s2_writedata),                        //                         .writedata
		.av_byteenable          (TCM_s2_byteenable),                       //                         .byteenable
		.av_chipselect          (TCM_s2_chipselect),                       //                         .chipselect
		.av_clken               (TCM_s2_clken),                            //                         .clken
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mycpu_data_master_agent (
		.clk                   (MAIN_CLK_sys_clk_clk),                                                 //       clk.clk
		.reset                 (myCPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (mycpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mycpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mycpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mycpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mycpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mycpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mycpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mycpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mycpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mycpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mycpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mycpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mycpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mycpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mycpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mycpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (mycpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mycpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mycpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mycpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mycpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mycpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mycpu_instruction_master_agent (
		.clk                   (MAIN_CLK_sys_clk_clk),                                                        //       clk.clk
		.reset                 (myCPU_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (mycpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mycpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mycpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mycpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mycpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mycpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mycpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mycpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mycpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mycpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mycpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mycpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mycpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mycpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mycpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mycpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (mycpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mycpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mycpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mycpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mycpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mycpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                           //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                           //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (51),
		.PKT_BURST_SIZE_L          (49),
		.PKT_TRANS_LOCK            (41),
		.PKT_BEGIN_BURST           (56),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (48),
		.PKT_BURSTWRAP_L           (46),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_POSTED          (38),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (62),
		.PKT_SRC_ID_L              (58),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (63),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) character_lcd_0_avalon_lcd_slave_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                                 //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (character_lcd_0_avalon_lcd_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (character_lcd_0_avalon_lcd_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (character_lcd_0_avalon_lcd_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (character_lcd_0_avalon_lcd_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (character_lcd_0_avalon_lcd_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (character_lcd_0_avalon_lcd_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (character_lcd_0_avalon_lcd_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (character_lcd_0_avalon_lcd_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (character_lcd_0_avalon_lcd_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (character_lcd_0_avalon_lcd_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (character_lcd_0_avalon_lcd_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (character_lcd_0_avalon_lcd_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (character_lcd_0_avalon_lcd_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (character_lcd_0_avalon_lcd_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (character_lcd_0_avalon_lcd_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (character_lcd_0_avalon_lcd_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (character_lcd_0_avalon_lcd_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (character_lcd_0_avalon_lcd_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (character_lcd_0_avalon_lcd_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (character_lcd_0_avalon_lcd_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (character_lcd_0_avalon_lcd_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) character_lcd_0_avalon_lcd_slave_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                              //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (character_lcd_0_avalon_lcd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (character_lcd_0_avalon_lcd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (character_lcd_0_avalon_lcd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (character_lcd_0_avalon_lcd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (character_lcd_0_avalon_lcd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (character_lcd_0_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                                                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),                                                   //       clk_reset.reset
		.m0_address              (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                                   //                .channel
		.rf_sink_ready           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                                         //                .error
		.rdata_fifo_src_ready    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                                                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_data           (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_data),             //        in.data
		.in_valid          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                     // (terminated)
		.csr_read          (1'b0),                                                                                      // (terminated)
		.csr_write         (1'b0),                                                                                      // (terminated)
		.csr_readdata      (),                                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                      // (terminated)
		.almost_full_data  (),                                                                                          // (terminated)
		.almost_empty_data (),                                                                                          // (terminated)
		.in_empty          (1'b0),                                                                                      // (terminated)
		.out_empty         (),                                                                                          // (terminated)
		.in_error          (1'b0),                                                                                      // (terminated)
		.out_error         (),                                                                                          // (terminated)
		.in_channel        (1'b0),                                                                                      // (terminated)
		.out_channel       ()                                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                 //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                 //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mycpu_debug_mem_slave_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                   //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (mycpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mycpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mycpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mycpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mycpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (mycpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mycpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mycpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (mycpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mycpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (mycpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (mycpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mycpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (mycpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (mycpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (mycpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                //                .channel
		.rf_sink_ready           (mycpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mycpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mycpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mycpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mycpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mycpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mycpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mycpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mycpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mycpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (mycpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mycpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mycpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mycpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                   //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (mycpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (mycpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (mycpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mycpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mycpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mycpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mycpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mycpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mycpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mycpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) system_clock_timer_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                                   //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (system_clock_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_clock_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_clock_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_clock_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_clock_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_clock_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_clock_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_clock_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_clock_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_clock_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (system_clock_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_clock_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_clock_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (system_clock_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (system_clock_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_clock_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                //                .channel
		.rf_sink_ready           (system_clock_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_clock_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_clock_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_clock_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_clock_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_clock_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_clock_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_clock_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_clock_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_clock_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (system_clock_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_clock_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_clock_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_clock_timer_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                                   //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (system_clock_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (system_clock_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (system_clock_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_clock_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_clock_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_clock_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_clock_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_clock_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_clock_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_clock_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) high_res_timer_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                               //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (high_res_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (high_res_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (high_res_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (high_res_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (high_res_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (high_res_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (high_res_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (high_res_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (high_res_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (high_res_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (high_res_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (high_res_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (high_res_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (high_res_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (high_res_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (high_res_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (high_res_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (high_res_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (high_res_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (high_res_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (high_res_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (high_res_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (high_res_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (high_res_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (high_res_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (high_res_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (high_res_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (high_res_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) high_res_timer_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                               //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (high_res_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (high_res_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (high_res_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (high_res_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (high_res_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (high_res_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (high_res_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (high_res_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (high_res_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                         //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_007_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                      //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),            //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                         //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                     //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_008_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                  //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),        //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                     //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_0_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_009_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                   //                .channel
		.rf_sink_ready           (hex_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_0_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_1_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_010_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                   //                .channel
		.rf_sink_ready           (hex_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_1_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_2_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_011_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                   //                .channel
		.rf_sink_ready           (hex_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_2_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_3_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_012_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                   //                .channel
		.rf_sink_ready           (hex_3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_3_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_4_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_013_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                   //                .channel
		.rf_sink_ready           (hex_4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_4_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_5_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_5_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_5_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_5_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_5_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_5_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_5_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_5_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_5_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_5_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_5_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_5_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_5_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_5_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_5_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_5_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_5_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_014_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                   //                .channel
		.rf_sink_ready           (hex_5_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_5_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_5_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_5_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_5_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_5_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_5_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_5_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_5_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_5_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_5_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_5_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_5_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_5_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_6_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_6_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_6_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_6_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_6_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_6_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_6_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_6_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_6_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_6_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_6_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_6_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_6_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_6_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_6_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_6_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_6_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_015_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                   //                .channel
		.rf_sink_ready           (hex_6_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_6_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_6_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_6_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_6_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_6_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_6_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_6_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_6_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_6_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_6_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_6_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_6_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_6_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_6_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_6_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_6_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_6_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_6_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_6_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_6_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_6_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_6_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_6_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_7_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (hex_7_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_7_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_7_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_7_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_7_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_7_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_7_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_7_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_7_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_7_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_7_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_7_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_7_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_7_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_7_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_7_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_016_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                   //                .channel
		.rf_sink_ready           (hex_7_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_7_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_7_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_7_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_7_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_7_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_7_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_7_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_7_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_7_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),         //                .error
		.rdata_fifo_src_ready    (hex_7_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_7_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_7_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_7_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex_7_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_7_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_7_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_7_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_7_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_7_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_7_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_7_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_7_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_7_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledg_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                     //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ledg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_017_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                  //                .channel
		.rf_sink_ready           (ledg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                     //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ledg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_0_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (key_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_018_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                   //                .channel
		.rf_sink_ready           (key_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),         //                .error
		.rdata_fifo_src_ready    (key_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_0_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (key_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                      //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_019_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                   //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                      //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tcm_s2_agent (
		.clk                     (MAIN_CLK_sys_clk_clk),                    //             clk.clk
		.reset                   (myCPU_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tcm_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tcm_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tcm_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tcm_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tcm_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (tcm_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tcm_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tcm_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (tcm_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tcm_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (tcm_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (tcm_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tcm_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (tcm_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (tcm_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (tcm_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_020_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                 //                .channel
		.rf_sink_ready           (tcm_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tcm_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tcm_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tcm_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tcm_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tcm_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tcm_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tcm_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tcm_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tcm_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),       //                .error
		.rdata_fifo_src_ready    (tcm_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tcm_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tcm_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tcm_s2_agent_rsp_fifo (
		.clk               (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset             (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tcm_s2_agent_rf_source_data),             //        in.data
		.in_valid          (tcm_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (tcm_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tcm_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tcm_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tcm_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tcm_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tcm_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tcm_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tcm_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	niosSys_mm_interconnect_0_router router (
		.sink_ready         (mycpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (mycpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (mycpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (mycpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mycpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                     //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                         //       src.ready
		.src_valid          (router_src_valid),                         //          .valid
		.src_data           (router_src_data),                          //          .data
		.src_channel        (router_src_channel),                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                    //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (mycpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (mycpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (mycpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (mycpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mycpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                            //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                            //       src.ready
		.src_valid          (router_001_src_valid),                            //          .valid
		.src_data           (router_001_src_data),                             //          .data
		.src_channel        (router_001_src_channel),                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                                 //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (character_lcd_0_avalon_lcd_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (character_lcd_0_avalon_lcd_slave_agent_rp_valid),         //          .valid
		.sink_data          (character_lcd_0_avalon_lcd_slave_agent_rp_data),          //          .data
		.sink_startofpacket (character_lcd_0_avalon_lcd_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (character_lcd_0_avalon_lcd_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_valid),         //          .valid
		.sink_data          (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_data),          //          .data
		.sink_startofpacket (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                                                            //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                            //       src.ready
		.src_valid          (router_004_src_valid),                                                            //          .valid
		.src_data           (router_004_src_data),                                                             //          .data
		.src_channel        (router_004_src_channel),                                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                       //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                       //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (mycpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (mycpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (mycpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (mycpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mycpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                         //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (system_clock_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (system_clock_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (system_clock_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (system_clock_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (system_clock_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                         //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (high_res_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (high_res_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (high_res_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (high_res_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (high_res_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                     //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (switches_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),              //          .valid
		.sink_data          (switches_s1_agent_rp_data),               //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (leds_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                  //          .valid
		.sink_data          (leds_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                    //       src.ready
		.src_valid          (router_010_src_valid),                    //          .valid
		.src_data           (router_010_src_data),                     //          .data
		.src_channel        (router_010_src_channel),                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (hex_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                    //       src.ready
		.src_valid          (router_011_src_valid),                    //          .valid
		.src_data           (router_011_src_data),                     //          .data
		.src_channel        (router_011_src_channel),                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (hex_1_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_1_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_1_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_1_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_1_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                    //       src.ready
		.src_valid          (router_012_src_valid),                    //          .valid
		.src_data           (router_012_src_data),                     //          .data
		.src_channel        (router_012_src_channel),                  //          .channel
		.src_startofpacket  (router_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (hex_2_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_2_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_2_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_2_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_2_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                    //       src.ready
		.src_valid          (router_013_src_valid),                    //          .valid
		.src_data           (router_013_src_data),                     //          .data
		.src_channel        (router_013_src_channel),                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (hex_3_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_3_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_3_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_3_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_3_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                    //       src.ready
		.src_valid          (router_014_src_valid),                    //          .valid
		.src_data           (router_014_src_data),                     //          .data
		.src_channel        (router_014_src_channel),                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (hex_4_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_4_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_4_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_4_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_4_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (hex_5_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_5_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_5_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_5_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_5_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (hex_6_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_6_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_6_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_6_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_6_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (hex_7_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex_7_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex_7_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex_7_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex_7_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                    //       src.ready
		.src_valid          (router_018_src_valid),                    //          .valid
		.src_data           (router_018_src_data),                     //          .data
		.src_channel        (router_018_src_channel),                  //          .channel
		.src_startofpacket  (router_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (ledg_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ledg_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ledg_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ledg_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ledg_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                    //       src.ready
		.src_valid          (router_019_src_valid),                    //          .valid
		.src_data           (router_019_src_data),                     //          .data
		.src_channel        (router_019_src_channel),                  //          .channel
		.src_startofpacket  (router_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (key_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (key_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (key_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (key_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (key_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                    //       src.ready
		.src_valid          (router_020_src_valid),                    //          .valid
		.src_data           (router_020_src_data),                     //          .data
		.src_channel        (router_020_src_channel),                  //          .channel
		.src_startofpacket  (router_020_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_006 router_021 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                    //       src.ready
		.src_valid          (router_021_src_valid),                    //          .valid
		.src_data           (router_021_src_data),                     //          .data
		.src_channel        (router_021_src_channel),                  //          .channel
		.src_startofpacket  (router_021_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (tcm_s2_agent_rp_ready),                   //      sink.ready
		.sink_valid         (tcm_s2_agent_rp_valid),                   //          .valid
		.sink_data          (tcm_s2_agent_rp_data),                    //          .data
		.sink_startofpacket (tcm_s2_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (tcm_s2_agent_rp_endofpacket),             //          .endofpacket
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                    //       src.ready
		.src_valid          (router_022_src_valid),                    //          .valid
		.src_data           (router_022_src_data),                     //          .data
		.src_channel        (router_022_src_channel),                  //          .channel
		.src_startofpacket  (router_022_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mycpu_data_master_limiter (
		.clk                    (MAIN_CLK_sys_clk_clk),                            //       clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (mycpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (mycpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (mycpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (mycpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (mycpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (mycpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (mycpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (mycpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (mycpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (mycpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (mycpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (mycpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mycpu_instruction_master_limiter (
		.clk                    (MAIN_CLK_sys_clk_clk),                                   //       clk.clk
		.reset                  (myCPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                   //          .valid
		.cmd_sink_data          (router_001_src_data),                                    //          .data
		.cmd_sink_channel       (router_001_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (mycpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (mycpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (mycpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (mycpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (mycpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (mycpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (mycpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (mycpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (mycpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (mycpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (mycpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (mycpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (56),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (51),
		.PKT_BURST_SIZE_L          (49),
		.PKT_BURST_TYPE_H          (53),
		.PKT_BURST_TYPE_L          (52),
		.PKT_BURSTWRAP_H           (48),
		.PKT_BURSTWRAP_L           (46),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (81),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (43),
		.OUT_BURSTWRAP_H           (48),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) character_lcd_0_avalon_lcd_slave_burst_adapter (
		.clk                   (MAIN_CLK_sys_clk_clk),                                                 //       cr0.clk
		.reset                 (myCPU_reset_reset_bridge_in_reset_reset),                              // cr0_reset.reset
		.sink0_valid           (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (character_lcd_0_avalon_lcd_slave_burst_adapter_source0_ready)          //          .ready
	);

	niosSys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (MAIN_CLK_sys_clk_clk),                            //        clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (mycpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (mycpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (mycpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (mycpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (mycpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (mycpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                            //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                            //           .valid
		.src0_data           (cmd_demux_src0_data),                             //           .data
		.src0_channel        (cmd_demux_src0_channel),                          //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                      //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                            //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                            //           .valid
		.src1_data           (cmd_demux_src1_data),                             //           .data
		.src1_channel        (cmd_demux_src1_channel),                          //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                      //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                            //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                            //           .valid
		.src2_data           (cmd_demux_src2_data),                             //           .data
		.src2_channel        (cmd_demux_src2_channel),                          //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                      //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                            //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                            //           .valid
		.src3_data           (cmd_demux_src3_data),                             //           .data
		.src3_channel        (cmd_demux_src3_channel),                          //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                      //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                            //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                            //           .valid
		.src4_data           (cmd_demux_src4_data),                             //           .data
		.src4_channel        (cmd_demux_src4_channel),                          //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                      //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                            //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                            //           .valid
		.src5_data           (cmd_demux_src5_data),                             //           .data
		.src5_channel        (cmd_demux_src5_channel),                          //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                      //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                            //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                            //           .valid
		.src6_data           (cmd_demux_src6_data),                             //           .data
		.src6_channel        (cmd_demux_src6_channel),                          //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                      //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                            //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                            //           .valid
		.src7_data           (cmd_demux_src7_data),                             //           .data
		.src7_channel        (cmd_demux_src7_channel),                          //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                      //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                            //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                            //           .valid
		.src8_data           (cmd_demux_src8_data),                             //           .data
		.src8_channel        (cmd_demux_src8_channel),                          //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                      //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                            //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                            //           .valid
		.src9_data           (cmd_demux_src9_data),                             //           .data
		.src9_channel        (cmd_demux_src9_channel),                          //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                      //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                           //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                           //           .valid
		.src10_data          (cmd_demux_src10_data),                            //           .data
		.src10_channel       (cmd_demux_src10_channel),                         //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                     //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                           //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                           //           .valid
		.src11_data          (cmd_demux_src11_data),                            //           .data
		.src11_channel       (cmd_demux_src11_channel),                         //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                     //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                           //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                           //           .valid
		.src12_data          (cmd_demux_src12_data),                            //           .data
		.src12_channel       (cmd_demux_src12_channel),                         //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                     //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                           //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                           //           .valid
		.src13_data          (cmd_demux_src13_data),                            //           .data
		.src13_channel       (cmd_demux_src13_channel),                         //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                     //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                           //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                           //           .valid
		.src14_data          (cmd_demux_src14_data),                            //           .data
		.src14_channel       (cmd_demux_src14_channel),                         //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                     //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                           //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                           //           .valid
		.src15_data          (cmd_demux_src15_data),                            //           .data
		.src15_channel       (cmd_demux_src15_channel),                         //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                     //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                           //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                           //           .valid
		.src16_data          (cmd_demux_src16_data),                            //           .data
		.src16_channel       (cmd_demux_src16_channel),                         //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                   //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                     //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                           //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                           //           .valid
		.src17_data          (cmd_demux_src17_data),                            //           .data
		.src17_channel       (cmd_demux_src17_channel),                         //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                   //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                     //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                           //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                           //           .valid
		.src18_data          (cmd_demux_src18_data),                            //           .data
		.src18_channel       (cmd_demux_src18_channel),                         //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                   //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                     //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                           //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                           //           .valid
		.src19_data          (cmd_demux_src19_data),                            //           .data
		.src19_channel       (cmd_demux_src19_channel),                         //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                   //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                     //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                           //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                           //           .valid
		.src20_data          (cmd_demux_src20_data),                            //           .data
		.src20_channel       (cmd_demux_src20_channel),                         //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                   //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket)                      //           .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (MAIN_CLK_sys_clk_clk),                                   //        clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (mycpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (mycpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (mycpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (mycpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (mycpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (mycpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                          //           .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                  //          .channel
		.sink0_data          (cmd_demux_src6_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                  //          .channel
		.sink0_data          (cmd_demux_src7_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                  //          .channel
		.sink0_data          (cmd_demux_src9_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                 //          .channel
		.sink0_data          (cmd_demux_src10_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                 //          .channel
		.sink0_data          (cmd_demux_src11_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                   //          .valid
		.src_data            (cmd_mux_012_src_data),                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                 //          .channel
		.sink0_data          (cmd_demux_src12_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                   //          .valid
		.src_data            (cmd_mux_013_src_data),                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                 //          .channel
		.sink0_data          (cmd_demux_src13_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                   //          .valid
		.src_data            (cmd_mux_014_src_data),                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                 //          .channel
		.sink0_data          (cmd_demux_src14_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                 //          .channel
		.sink0_data          (cmd_demux_src15_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                   //          .valid
		.src_data            (cmd_mux_016_src_data),                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                 //          .channel
		.sink0_data          (cmd_demux_src16_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                   //          .valid
		.src_data            (cmd_mux_017_src_data),                    //          .data
		.src_channel         (cmd_mux_017_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                 //          .channel
		.sink0_data          (cmd_demux_src17_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                   //          .valid
		.src_data            (cmd_mux_018_src_data),                    //          .data
		.src_channel         (cmd_mux_018_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                 //          .channel
		.sink0_data          (cmd_demux_src18_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux_004 cmd_mux_019 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                   //          .valid
		.src_data            (cmd_mux_019_src_data),                    //          .data
		.src_channel         (cmd_mux_019_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                 //          .channel
		.sink0_data          (cmd_demux_src19_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                   //          .valid
		.src_data            (cmd_mux_020_src_data),                    //          .data
		.src_channel         (cmd_mux_020_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                 //          .channel
		.sink0_data          (cmd_demux_src20_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)              //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)               //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (MAIN_CLK_sys_clk_clk),                                                 //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.sink_ready         (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                        //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                //          .valid
		.src0_data          (rsp_demux_017_src0_data),                 //          .data
		.src0_channel       (rsp_demux_017_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                    //      sink.ready
		.sink_channel       (router_020_src_channel),                  //          .channel
		.sink_data          (router_020_src_data),                     //          .data
		.sink_startofpacket (router_020_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_020_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                //          .valid
		.src0_data          (rsp_demux_018_src0_data),                 //          .data
		.src0_channel       (rsp_demux_018_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux_004 rsp_demux_019 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                    //      sink.ready
		.sink_channel       (router_021_src_channel),                  //          .channel
		.sink_data          (router_021_src_data),                     //          .data
		.sink_startofpacket (router_021_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_021_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                //          .valid
		.src0_data          (rsp_demux_019_src0_data),                 //          .data
		.src0_channel       (rsp_demux_019_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                //          .valid
		.src1_data          (rsp_demux_019_src1_data),                 //          .data
		.src1_channel       (rsp_demux_019_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset              (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                    //      sink.ready
		.sink_channel       (router_022_src_channel),                  //          .channel
		.sink_data          (router_022_src_data),                     //          .data
		.sink_startofpacket (router_022_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_022_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                //          .valid
		.src0_data          (rsp_demux_020_src0_data),                 //          .data
		.src0_channel       (rsp_demux_020_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset                (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                       //       src.ready
		.src_valid            (rsp_mux_src_valid),                       //          .valid
		.src_data             (rsp_mux_src_data),                        //          .data
		.src_channel          (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                  //          .channel
		.sink0_data           (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),              //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),              //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),              //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),              //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                 //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),              //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                 //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),              //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                 //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                 //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),              //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                 //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)           //          .endofpacket
	);

	niosSys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (MAIN_CLK_sys_clk_clk),                    //       clk.clk
		.reset               (myCPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_019_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_019_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_019_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_019_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_019_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_019_src1_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (36),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (45),
		.IN_PKT_BYTE_CNT_L             (43),
		.IN_PKT_TRANS_COMPRESSED_READ  (37),
		.IN_PKT_TRANS_WRITE            (39),
		.IN_PKT_BURSTWRAP_H            (48),
		.IN_PKT_BURSTWRAP_L            (46),
		.IN_PKT_BURST_SIZE_H           (51),
		.IN_PKT_BURST_SIZE_L           (49),
		.IN_PKT_RESPONSE_STATUS_H      (77),
		.IN_PKT_RESPONSE_STATUS_L      (76),
		.IN_PKT_TRANS_EXCLUSIVE        (42),
		.IN_PKT_BURST_TYPE_H           (53),
		.IN_PKT_BURST_TYPE_L           (52),
		.IN_PKT_ORI_BURST_SIZE_L       (78),
		.IN_PKT_ORI_BURST_SIZE_H       (80),
		.IN_ST_DATA_W                  (81),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (78),
		.OUT_PKT_BURST_SIZE_L          (76),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (80),
		.OUT_PKT_BURST_TYPE_L          (79),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) character_lcd_0_avalon_lcd_slave_rsp_width_adapter (
		.clk                  (MAIN_CLK_sys_clk_clk),                                                 //       clk.clk
		.reset                (myCPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (router_003_src_valid),                                                 //      sink.valid
		.in_channel           (router_003_src_channel),                                               //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_003_src_ready),                                                 //          .ready
		.in_data              (router_003_src_data),                                                  //          .data
		.out_endofpacket      (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (character_lcd_0_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (75),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (78),
		.IN_PKT_BURST_SIZE_L           (76),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (80),
		.IN_PKT_BURST_TYPE_L           (79),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (36),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (45),
		.OUT_PKT_BYTE_CNT_L            (43),
		.OUT_PKT_TRANS_COMPRESSED_READ (37),
		.OUT_PKT_BURST_SIZE_H          (51),
		.OUT_PKT_BURST_SIZE_L          (49),
		.OUT_PKT_RESPONSE_STATUS_H     (77),
		.OUT_PKT_RESPONSE_STATUS_L     (76),
		.OUT_PKT_TRANS_EXCLUSIVE       (42),
		.OUT_PKT_BURST_TYPE_H          (53),
		.OUT_PKT_BURST_TYPE_L          (52),
		.OUT_PKT_ORI_BURST_SIZE_L      (78),
		.OUT_PKT_ORI_BURST_SIZE_H      (80),
		.OUT_ST_DATA_W                 (81),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) character_lcd_0_avalon_lcd_slave_cmd_width_adapter (
		.clk                  (MAIN_CLK_sys_clk_clk),                                                 //       clk.clk
		.reset                (myCPU_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                //          .ready
		.in_data              (cmd_mux_001_src_data),                                                 //          .data
		.out_endofpacket      (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (character_lcd_0_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),                     // in_rst_0.reset
		.in_0_data      (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (character_lcd_0_avalon_lcd_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                                                                // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),                                             // in_rst_0.reset
		.in_0_data      (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (altera_up_sd_card_avalon_interface_0_avalon_sdcard_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                                    //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (mycpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mycpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mycpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                 //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (system_clock_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (system_clock_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (system_clock_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                 //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (high_res_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (high_res_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (high_res_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_0_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_0_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_0_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_1_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_1_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_1_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_2_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_2_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_2_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_3_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_3_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_3_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_4_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_4_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_4_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_5_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_5_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_5_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_6_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_6_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_6_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex_7_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (hex_7_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (hex_7_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledg_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (ledg_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (ledg_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_0_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (key_0_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (key_0_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)        //         .error
	);

	niosSys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (MAIN_CLK_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (myCPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tcm_s2_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (tcm_s2_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (tcm_s2_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)        //         .error
	);

endmodule
